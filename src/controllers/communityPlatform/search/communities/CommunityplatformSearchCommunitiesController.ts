import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchcommunityPlatformSearchCommunities } from "../../../../providers/patchcommunityPlatformSearchCommunities";

import { IPageICommunityPlatformCommunity } from "../../../../api/structures/IPageICommunityPlatformCommunity";
import { ICommunityPlatformCommunity } from "../../../../api/structures/ICommunityPlatformCommunity";

@Controller("/communityPlatform/search/communities")
export class CommunityplatformSearchCommunitiesController {
  /**
   * Search communities by name with pagination and sorting
   * (community_platform_communities).
   *
   * This operation searches the community_platform_communities table.
   * Communities include immutable unique name, optional description, optional
   * logo/banner URIs, category reference (community_platform_categories),
   * last_active_at, disabled_at, and timestamps. Logical deletion is tracked by
   * deleted_at and such rows must be excluded from normal search results. The
   * endpoint should also hide communities with non-null disabled_at from
   * promotion surfaces per business rules.
   *
   * Ranking and sorting: Provide two primary modes. Name Match (default) orders
   * by similarity to the query against the name field, breaking ties by more
   * recent created_at and then larger id. Recently Created orders strictly by
   * created_at desc with a deterministic tiebreaker by id. Page size is
   * typically 20 with load-more. Category facets are supported by joining
   * community_platform_categories where useful for filters; categories carry
   * fields such as code, name, active, and display_order.
   *
   * Validation and business logic: Enforce minimum query length of 2
   * characters. Accept optional filters such as category, active category
   * enforcement, and disabled status exclusion in accordance with platform
   * policy. The response should include essential summary fields such as
   * community name (/c/{name}), description snippet, category label, and member
   * count computed from community_platform_community_memberships if included by
   * the request DTO.
   *
   * Related endpoints: Use community detail retrieval and feed endpoints for
   * deeper browsing. Search is publicly accessible and read-only, intended for
   * exploration and discovery.
   *
   * @param connection
   * @param body Search query, sorting (Name Match/Recently Created), filters,
   *   and pagination.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPlatformCommunity.IRequest,
  ): Promise<IPageICommunityPlatformCommunity.ISummary> {
    try {
      return await patchcommunityPlatformSearchCommunities({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
