import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchCommunityPlatformSearchCommunities } from "../../../../providers/patchCommunityPlatformSearchCommunities";

import { IPageICommunityPlatformCommunity } from "../../../../api/structures/IPageICommunityPlatformCommunity";
import { ICommunityPlatformCommunity } from "../../../../api/structures/ICommunityPlatformCommunity";

@Controller("/communityPlatform/search/communities")
export class CommunityplatformSearchCommunitiesController {
  /**
   * Search communities (community_platform_communities) with Name Match or
   * Recently Created sorting.
   *
   * Search sub-communities using the community_platform_communities table,
   * which stores immutable name, name_key (normalized CI uniqueness), category,
   * optional description, optional logo_uri/banner_uri, timestamps (created_at,
   * updated_at, last_active_at), and deleted_at for visibility control. The API
   * excludes records where deleted_at is set. Name-based ranking is performed
   * according to business rules: exact case-insensitive match of name, then
   * starts-with, then token containment, then fuzzy proximity, with
   * tie-breakers on created_at desc then id desc. GIN trigram indexes on name
   * and description support efficient matching as indicated by the schema
   * indices.
   *
   * Security and access: This endpoint is public (no authentication required)
   * and returns only non-deleted communities. Readers may also require per-item
   * flags like isMember for the current user, which can be computed when
   * authentication is present but does not change the public accessibility of
   * the search itself.
   *
   * Database relationships and derived fields: Member count derives from the
   * number of rows in community_platform_community_members referencing the
   * target community with deleted_at null. Rules can be shown from
   * community_platform_community_rules (top 5 by order_index) when the client
   * chooses to display them in detail views. Sorting options include nameMatch
   * (ranking as above) and recentlyCreated which orders by created_at desc and
   * then id desc. Reserved name handling and name immutability are enforced at
   * the application layer; uniqueness is maintained by name_key at the database
   * level.
   *
   * Validation and business logic: The request validates that the query is at
   * least 2 characters after normalization (trim, case-insensitive,
   * diacritics-insensitive, hyphen/underscore as separators). Pagination uses a
   * 20-item page size with an opaque cursor derived from the active sort’s
   * ordering tuple to maintain deterministic continuation. Deleted communities
   * (deleted_at not null) are excluded, and deletion cascades remove dependent
   * entities from visibility (posts and memberships) due to onDelete: Cascade
   * on relations.
   *
   * Related operations: Often used with Explore pages or Community detail
   * retrieval by name. Error handling includes 400 for too-short queries
   * (“Please enter at least 2 characters.”) and 5xx for transient failures (“A
   * temporary error occurred. Please try again in a moment.”).
   *
   * @param connection
   * @param body Community search parameters: normalized query, sort
   *   (nameMatch|recentlyCreated), optional category filter, and cursor
   *   pagination.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPlatformCommunity.IRequest,
  ): Promise<IPageICommunityPlatformCommunity.ISummary> {
    try {
      return await patchCommunityPlatformSearchCommunities({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
