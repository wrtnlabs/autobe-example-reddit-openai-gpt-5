import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchcommunityPlatformSearchPosts } from "../../../../providers/patchcommunityPlatformSearchPosts";

import { IPageICommunityPlatformPost } from "../../../../api/structures/IPageICommunityPlatformPost";
import { ICommunityPlatformPost } from "../../../../api/structures/ICommunityPlatformPost";

@Controller("/communityPlatform/search/posts")
export class CommunityplatformSearchPostsController {
  /**
   * Search posts by title/body with pagination and sorting
   * (community_platform_posts).
   *
   * This operation provides a search surface over community_platform_posts.
   * According to the schema, posts contain title (5–120 chars), body (10–10,000
   * chars), optional author_display_name, and timestamps
   * (created_at/updated_at), with a logical deletion timestamp deleted_at. The
   * endpoint should match words against title and body and exclude posts where
   * deleted_at is not null. When applicable, posts associated to communities
   * with a non-null disabled_at should be hidden from promotion surfaces;
   * search implementations commonly exclude such content.
   *
   * Sorting and pagination: The default sort is Newest, ordering by created_at
   * desc and using a deterministic tiebreaker by id when timestamps match.
   * Optionally support a Top sort that orders by computed score (upvotes −
   * downvotes via community_platform_post_votes), then by more recent
   * created_at, and then by larger id for ties. Page size is typically 20 with
   * load-more behavior; clients provide pagination cursors or page/index as
   * defined by the request DTO.
   *
   * Validation and business rules: Enforce minimum query length of 2
   * characters; shorter queries should return a validation-style outcome per
   * product copy guidelines. Filtering can include community scoping, author
   * scoping, date ranges, and score thresholds if present in the request DTO.
   * Results return lightweight post summaries optimized for list display
   * (community name, title, author display name, relative time, comment count,
   * score) while the authoritative data remains in the posts and related
   * tables.
   *
   * Related endpoints: Use community feeds or home feeds for non-search
   * listing, and use post detail retrieval (not defined here) to fetch the full
   * post. Error handling follows standard patterns and the search should be
   * publicly accessible for unauthenticated users.
   *
   * @param connection
   * @param body Search query, sorting (Newest/Top), and pagination settings for
   *   posts.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPlatformPost.IRequest,
  ): Promise<IPageICommunityPlatformPost.ISummary> {
    try {
      return await patchcommunityPlatformSearchPosts({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
