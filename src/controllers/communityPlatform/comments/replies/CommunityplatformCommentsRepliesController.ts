import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchcommunityPlatformCommentsCommentIdReplies } from "../../../../providers/patchcommunityPlatformCommentsCommentIdReplies";

import { IPageICommunityPlatformComment } from "../../../../api/structures/IPageICommunityPlatformComment";
import { ICommunityPlatformComment } from "../../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/comments/:commentId/replies")
export class CommunityplatformCommentsRepliesController {
  /**
   * List replies (community_platform_comments) under a parent comment with
   * pagination.
   *
   * List replies for a parent comment using the community_platform_comments
   * table. Each reply record contains fields such as id,
   * community_platform_post_id, community_platform_user_id, parent_id (set to
   * the parent commentâ€™s id), content (plain text), created_at, updated_at, and
   * deleted_at. Only active (deleted_at is null) child comments should be
   * returned. This endpoint focuses on nested threading, returning direct
   * children where parent_id matches the path parameter.
   *
   * This operation is public (no authentication required) because reading
   * comments is open per product rules. It supports pagination and sorting,
   * typically Newest first (by created_at descending with tie-breaking by
   * identifier) and may also support Top depending on business needs. The
   * request body ICommunityPlatformComment.IRequest captures paging, sorting,
   * and any query fields; the response is a paginated list for client-side
   * load-more flows.
   *
   * Business logic must validate the existence of the parent comment and
   * exclude removed entries (deleted_at not null). Errors include invalid
   * identifiers or referencing a non-existent parent. Related operations
   * include creating a reply and updating/deleting comments, which modify this
   * list over time. This list endpoint is commonly used together with post
   * detail views and comment threads.
   *
   * @param connection
   * @param commentId Parent comment's ID (UUID) whose replies are being listed
   * @param body Search, filtering, sorting, and pagination parameters for
   *   replies
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformComment.IRequest,
  ): Promise<IPageICommunityPlatformComment> {
    try {
      return await patchcommunityPlatformCommentsCommentIdReplies({
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
