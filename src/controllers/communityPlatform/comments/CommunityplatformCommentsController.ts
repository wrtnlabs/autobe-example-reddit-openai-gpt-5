import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchcommunityPlatformComments } from "../../../providers/patchcommunityPlatformComments";
import { getcommunityPlatformCommentsCommentId } from "../../../providers/getcommunityPlatformCommentsCommentId";

import { IPageICommunityPlatformComment } from "../../../api/structures/IPageICommunityPlatformComment";
import { ICommunityPlatformComment } from "../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/comments")
export class CommunityplatformCommentsController {
  /**
   * Search and paginate comments from community_platform_comments.
   *
   * Retrieve a paginated, filterable list of comments from
   * community_platform_comments across all posts. The schema describes id,
   * community_platform_post_id, community_platform_user_id, optional parent_id
   * for nesting, content (plain text), created_at/updated_at, and a deleted_at
   * column for removed comments. This operation supports business search rules:
   * minimum query length for text search (if implemented) and deterministic
   * Newest ordering with tie-breaks.
   *
   * Security and permissions: this is a public read endpoint; authentication is
   * not required. Sensitive author-only operations are out of scope for this
   * endpoint. Records marked removed (deleted_at not null) are not returned.
   *
   * Filtering, sorting, and pagination: clients may filter by post, author,
   * parent (top-level only vs replies), and created_at ranges. Text search can
   * match content with trigram/FTS where available. Sorting is Newest
   * (created_at descending; tie-break by larger identifier when needed).
   * Pagination returns 20 per page by default with page/pageSize and optional
   * cursor support.
   *
   * Error handling: malformed filters (e.g., invalid UUIDs), out-of-range
   * pagination parameters, or too-short search queries yield validation errors
   * with explanatory messages. Related operations include GET
   * /comments/{commentId} for detail and POST /posts/{postId}/comments for
   * creation within a post.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for comments
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPlatformComment.IRequest,
  ): Promise<IPageICommunityPlatformComment> {
    try {
      return await patchcommunityPlatformComments({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single comment from community_platform_comments by ID.
   *
   * Return a single comment from community_platform_comments identified by
   * commentId. The model contains id, community_platform_post_id (the container
   * post), community_platform_user_id (author), optional parent_id for nested
   * threads, content, created_at/updated_at timestamps, and a deleted_at
   * column. The endpoint exposes the comment only if it is not removed
   * (deleted_at is null).
   *
   * Security: public read access; no authentication required. Ownership and
   * moderation policies impact editing/removal but not this retrieval.
   *
   * Validation and errors: commentId must be a valid UUID. If the comment does
   * not exist or is marked as removed, return a 404. This operation complements
   * PATCH /comments for list/search and PATCH/POST under
   * /posts/{postId}/comments.
   *
   * @param connection
   * @param commentId Identifier of the target comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await getcommunityPlatformCommentsCommentId({
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
