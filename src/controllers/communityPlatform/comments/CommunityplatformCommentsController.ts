import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformCommentsCommentId } from "../../../providers/getCommunityPlatformCommentsCommentId";

import { ICommunityPlatformComment } from "../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/comments/:commentId")
export class CommunityplatformCommentsController {
  /**
   * Get one comment (community_platform_comments) by ID.
   *
   * Return detailed information for a specific comment. The
   * community_platform_comments model includes fields: id,
   * community_platform_post_id, community_platform_user_id, optional parent_id
   * for threading, content (plain text), created_at, updated_at, and deleted_at
   * for visibility. The endpoint exposes a single resource to support Post
   * Detail threads, search result navigation, and moderation UIs.
   *
   * Security and visibility: reading comments is public. When deleted_at is set
   * (soft-deleted), the API still returns 200 with the comment resource
   * (including deleted_at) so clients can render a neutral placeholder while
   * preserving thread position per business rules. Ownership and author guard
   * apply to write actions, not reads.
   *
   * Database relationships and behavior: the commentâ€™s parent and post
   * associations allow clients to reconstruct thread context. Indexes on
   * (community_platform_post_id, created_at, id) and (parent_id, created_at,
   * id) support efficient retrieval and deterministic Newest ordering in list
   * endpoints; while this endpoint returns a single item, the same model
   * constraints apply.
   *
   * Error handling: 404 is returned only if the comment does not exist.
   * Transient failures return the standard temporary error copy. This operation
   * is related to POST/PUT/DELETE comment endpoints used to manage lifecycle.
   *
   * @param connection
   * @param commentId Identifier of the target comment
   *   (community_platform_comments.id)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await getCommunityPlatformCommentsCommentId({
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
