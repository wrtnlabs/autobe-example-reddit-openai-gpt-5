import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postcommunityPlatformCommunityMemberCommentsCommentIdReplies } from "../../../../../providers/postcommunityPlatformCommunityMemberCommentsCommentIdReplies";
import { CommunitymemberAuth } from "../../../../../decorators/CommunitymemberAuth";
import { CommunitymemberPayload } from "../../../../../decorators/payload/CommunitymemberPayload";

import { ICommunityPlatformComment } from "../../../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/communityMember/comments/:commentId/replies")
export class CommunityplatformCommunitymemberCommentsRepliesController {
  /**
   * Create a reply comment (community_platform_comments) under a parent
   * comment.
   *
   * Create a new reply to a comment by inserting into the
   * community_platform_comments table. The model defines required fields
   * including community_platform_post_id, community_platform_user_id (author),
   * content (2–2,000 characters, plain text), and lifecycle timestamps
   * (created_at, updated_at), with optional parent_id to enable nesting. For a
   * reply, parent_id must be set to the commentId from the path, and
   * community_platform_post_id should match the parent comment’s post to
   * preserve thread integrity.
   *
   * This operation requires authentication (role "communityMember") and
   * enforces authorship rules. It must validate that the parent comment exists
   * and is not marked removed via deleted_at, and that the content meets length
   * constraints defined in the schema comments. Upon success, the API returns
   * the newly created comment as ICommunityPlatformComment so the client can
   * update the thread optimistically and reconcile with authoritative state.
   *
   * Related operations include listing replies for pagination and visibility,
   * and subsequent edit/delete actions by the reply’s author. Error handling
   * includes invalid parent references, content validation failures, or
   * permission issues for unauthenticated actors.
   *
   * @param connection
   * @param commentId Parent comment's ID (UUID) to reply to
   * @param body Data required to create a reply comment (content and metadata)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CommunitymemberAuth()
    communityMember: CommunitymemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformComment.ICreate,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await postcommunityPlatformCommunityMemberCommentsCommentIdReplies(
        {
          communityMember,
          commentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
