import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putcommunityPlatformCommunityMemberCommentsCommentId } from "../../../../providers/putcommunityPlatformCommunityMemberCommentsCommentId";
import { CommunitymemberAuth } from "../../../../decorators/CommunitymemberAuth";
import { CommunitymemberPayload } from "../../../../decorators/payload/CommunitymemberPayload";
import { deletecommunityPlatformCommunityMemberCommentsCommentId } from "../../../../providers/deletecommunityPlatformCommunityMemberCommentsCommentId";

import { ICommunityPlatformComment } from "../../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/communityMember/comments/:commentId")
export class CommunityplatformCommunitymemberCommentsController {
  /**
   * Update a comment (community_platform_comments) by ID.
   *
   * Edit an existing comment identified by commentId in the
   * community_platform_comments table. The underlying Prisma model defines key
   * columns such as content (plain text, business rule 2–2,000 characters),
   * community_platform_user_id (author), community_platform_post_id (container
   * post), optional parent_id for nested replies, and lifecycle timestamps
   * (created_at, updated_at, deleted_at). The API updates mutable fields
   * (typically content) and sets updated_at, maintaining the integrity of
   * authorship and thread structure.
   *
   * Security and permissions follow the product rules: only the author of a
   * comment may edit it. Attempts by non-authors must be denied with the
   * standard message, and unauthenticated users must be required to sign in
   * prior to state-changing actions. The operation requires an authenticated
   * session (role "communityMember") with ownership verified in business
   * logic.
   *
   * The operation works in the context of related entities: comments belong to
   * posts (community_platform_posts) and may reference a parent comment via
   * parent_id for nested threading. Business validation must ensure the target
   * comment exists and is not already marked removed via deleted_at. Content
   * length constraints (2–2,000) and plain-text expectations are enforced at
   * the application level per the model commentary.
   *
   * Related operations include creating a reply under a comment and listing
   * replies. Error handling should provide clear responses when the comment is
   * not found, when the actor lacks ownership, or when validation fails.
   * Updated entities are returned as ICommunityPlatformComment for client
   * reconciliation and optimistic UI confirmation.
   *
   * @param connection
   * @param commentId Target comment's ID (UUID) to update
   * @param body Editable fields of the comment to update (e.g., content)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @CommunitymemberAuth()
    communityMember: CommunitymemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformComment.IUpdate,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await putcommunityPlatformCommunityMemberCommentsCommentId({
        communityMember,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a comment (community_platform_comments) by ID by setting deleted_at.
   *
   * Delete a comment by its identifier in the community_platform_comments table
   * by marking it removed via the deleted_at timestamp. The Prisma model
   * explicitly includes deleted_at (nullable) for comments, which indicates
   * records can be marked as removed from public view without erasing
   * historical data. The operation should ensure the comment exists, is not
   * already removed, and that the actor is the author (or otherwise authorized)
   * before proceeding.
   *
   * Security and permissions require that only the comment author can delete
   * their own comment under normal operations. Unauthenticated requests must be
   * blocked and prompted to sign in. Administrative removals, if implemented
   * elsewhere, are outside the scope of this endpoint and should be captured in
   * separate policy functions and audit trails.
   *
   * The comment is linked to a post (community_platform_posts) and may have a
   * parent comment via parent_id for nesting. When marking the comment as
   * removed, application logic should update updated_at accordingly and ensure
   * reply-thread integrity for remaining comments. Errors include missing or
   * already-removed comments and permission denials. On success, no response
   * body is returned, and clients should reconcile their view accordingly.
   *
   * @param connection
   * @param commentId Target comment's ID (UUID) to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @CommunitymemberAuth()
    communityMember: CommunitymemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletecommunityPlatformCommunityMemberCommentsCommentId({
        communityMember,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
