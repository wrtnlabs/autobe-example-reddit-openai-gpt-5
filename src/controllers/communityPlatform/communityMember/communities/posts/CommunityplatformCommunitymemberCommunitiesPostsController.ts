import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postcommunityPlatformCommunityMemberCommunitiesCommunityIdPosts } from "../../../../../providers/postcommunityPlatformCommunityMemberCommunitiesCommunityIdPosts";
import { CommunitymemberAuth } from "../../../../../decorators/CommunitymemberAuth";
import { CommunitymemberPayload } from "../../../../../decorators/payload/CommunitymemberPayload";

import { ICommunityPlatformPost } from "../../../../../api/structures/ICommunityPlatformPost";

@Controller("/communityPlatform/communityMember/communities/:communityId/posts")
export class CommunityplatformCommunitymemberCommunitiesPostsController {
  /**
   * Create a post (community_platform_posts) within a specific community.
   *
   * Create a new post under a specified community. According to the Prisma
   * schema for community_platform_posts, each post belongs to exactly one
   * community (community_platform_community_id) and is authored by a user
   * (author_user_id), with required fields title and body, and an optional
   * author_display_name. The schema describes business constraints at the
   * application layer: title length 5–120 characters and body length 10–10,000
   * characters as plain text with line breaks only; author display name is
   * optional (0–32 characters) and presentation-only. This API uses the
   * communityId path parameter to resolve the target community
   * (community_platform_communities).
   *
   * Security and permissions: Only authenticated users may create posts.
   * Ownership semantics from the requirements apply: the authenticated user
   * becomes the author of the post and later may edit or delete their own
   * content, while non-authors are denied such actions. Administrative policy
   * actions are separate and recorded elsewhere. Reading is public and
   * unaffected by this creation endpoint.
   *
   * Database relations and lifecycle: The new community_platform_posts record
   * references community_platform_communities (via the path communityId) and
   * community_platform_users (author). Timestamps created_at and updated_at are
   * set on creation. Validation rules from the PRD apply: title/body length
   * limits, plain text only for body, and selection of exactly one target
   * community. Any community identifier in the body, if present, is ignored in
   * favor of the path parameter. The created entity is returned in full detail
   * for client confirmation.
   *
   * Related operations: Use GET /communityPlatform/posts/{postId} to retrieve
   * an individual post. Use PATCH /communityPlatform/posts for
   * listing/searching with pagination and sorting (Newest or Top).
   *
   * @param connection
   * @param communityId Target community’s ID (UUID) where the post will be
   *   created
   * @param body Creation payload for a community-scoped post (title, body,
   *   optional author display name)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CommunitymemberAuth()
    communityMember: CommunitymemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPost.ICreate,
  ): Promise<ICommunityPlatformPost> {
    try {
      return await postcommunityPlatformCommunityMemberCommunitiesCommunityIdPosts(
        {
          communityMember,
          communityId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
