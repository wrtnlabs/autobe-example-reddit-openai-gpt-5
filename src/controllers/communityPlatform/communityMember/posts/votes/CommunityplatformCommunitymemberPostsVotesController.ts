import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putcommunityPlatformCommunityMemberPostsPostIdVotes } from "../../../../../providers/putcommunityPlatformCommunityMemberPostsPostIdVotes";
import { CommunitymemberAuth } from "../../../../../decorators/CommunitymemberAuth";
import { CommunitymemberPayload } from "../../../../../decorators/payload/CommunitymemberPayload";
import { deletecommunityPlatformCommunityMemberPostsPostIdVotes } from "../../../../../providers/deletecommunityPlatformCommunityMemberPostsPostIdVotes";

import { ICommunityPlatformPostVote } from "../../../../../api/structures/ICommunityPlatformPostVote";

@Controller("/communityPlatform/communityMember/posts/:postId/votes")
export class CommunityplatformCommunitymemberPostsVotesController {
  /**
   * Upsert the current user’s vote (community_platform_post_votes) to "up" or
   * "down" for a post.
   *
   * Create or update the authenticated user’s vote for a specific post in
   * community_platform_post_votes. The model defines a unique constraint over
   * (community_platform_post_id, community_platform_user_id) ensuring one vote
   * per user per post, with a state column representing the current vote.
   * Schema guidance recommends lower-case values for parity with comment votes:
   * "up" for upvote and "down" for downvote. The vote record also tracks
   * created_at, updated_at, and an optional deleted_at for retention policies.
   *
   * Security and permissions: Only authenticated users (role: communityMember)
   * may vote, and users cannot vote on their own posts. If a user attempts to
   * vote on their own content, reject with: "You can’t vote on your own
   * posts/comments.". This endpoint sets the vote state to the requested value.
   * To revert to no vote (None), clients should call DELETE
   * /posts/{postId}/votes, which removes the record from active consideration.
   *
   * Business logic and score: Post score is computed as (number of "up") −
   * (number of "down") across active votes. The post entity itself does not
   * persist a score; instead, consumers compute it or consult denormalized
   * views such as mv_community_platform_global_latest_posts, which may lag real
   * time. This endpoint does not modify post content or comments.
   *
   * Error handling and validation: Validate state ∈ {"up","down"}. The target
   * post must exist and not be marked deleted_at. Ownership checks and join
   * membership are not required for voting; membership does not grant
   * moderation rights per product rules.
   *
   * @param connection
   * @param postId Unique identifier (UUID) of the post to vote on
   * @param body Desired vote state for the current user on the target post
   *   ("up" | "down")
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @CommunitymemberAuth()
    communityMember: CommunitymemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostVote.IUpdate,
  ): Promise<ICommunityPlatformPostVote> {
    try {
      return await putcommunityPlatformCommunityMemberPostsPostIdVotes({
        communityMember,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove the current user’s active vote from community_platform_post_votes.
   *
   * Remove the authenticated user’s vote on the specified post so that their
   * state becomes "None". The underlying community_platform_post_votes table
   * enforces one record per (post, user) with a state string and timestamps
   * (created_at, updated_at, deleted_at). Clearing the vote should result in no
   * active vote record for this (post, user) pair. Read paths must exclude
   * votes where deleted_at is set.
   *
   * Security and permissions: Only authenticated users may clear their own
   * votes; attempting to clear a vote on a non-existent post should return a
   * not-found error. Users cannot meaningfully "clear" a vote on their own post
   * if no vote exists; in all cases, the outcome should be that no active vote
   * remains for this (post, user) pair.
   *
   * Notes on scoring and views: Removing a vote changes the effective score
   * (upvotes − downvotes) and will be reflected in subsequent queries or
   * materialized views (mv_community_platform_global_latest_posts) after their
   * refresh cycle. This endpoint does not alter the post resource or comments
   * and returns no response body.
   *
   * @param connection
   * @param postId Unique identifier (UUID) of the post whose vote will be
   *   cleared
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @CommunitymemberAuth()
    communityMember: CommunitymemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletecommunityPlatformCommunityMemberPostsPostIdVotes({
        communityMember,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
