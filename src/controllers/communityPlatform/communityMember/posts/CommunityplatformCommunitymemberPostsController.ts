import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postcommunityPlatformCommunityMemberPosts } from "../../../../providers/postcommunityPlatformCommunityMemberPosts";
import { CommunitymemberAuth } from "../../../../decorators/CommunitymemberAuth";
import { CommunitymemberPayload } from "../../../../decorators/payload/CommunitymemberPayload";
import { putcommunityPlatformCommunityMemberPostsPostId } from "../../../../providers/putcommunityPlatformCommunityMemberPostsPostId";
import { deletecommunityPlatformCommunityMemberPostsPostId } from "../../../../providers/deletecommunityPlatformCommunityMemberPostsPostId";

import { ICommunityPlatformPost } from "../../../../api/structures/ICommunityPlatformPost";

@Controller("/communityPlatform/communityMember/posts")
export class CommunityplatformCommunitymemberPostsController {
  /**
   * Create a post (community_platform_posts) via global composer.
   *
   * Create a post via the global composer. Per the community_platform_posts
   * schema, a post requires exactly one target community
   * (community_platform_community_id), a title, and a body, plus optional
   * author_display_name. This endpoint expects the community identifier in the
   * request body (ICommunityPlatformPost.ICreate) and attributes authorship to
   * the authenticated user. Creation timestamps are set accordingly and the new
   * entity is returned in full detail.
   *
   * Security and permissions: Only authenticated users can create posts.
   * Ownership is assigned to the creating user, who can later edit/delete their
   * own post via separate endpoints; non-authors are denied such actions.
   * Guests attempting to create should be prompted to sign in and the action
   * can resume upon successful login as per business requirements.
   *
   * Validation and behavior: Enforce title/body length limits, ensure
   * plain-text body, and require a valid community reference. If the target
   * community cannot be found or is not allowed for posting (e.g.,
   * administratively disabled), the server should reject the request according
   * to business rules. On success, the created record is returned to the
   * client.
   *
   * Related operations: Use GET /communityPlatform/posts/{postId} to fetch the
   * created post later. Use PATCH /communityPlatform/posts for search/list and
   * POST /communityPlatform/communityMember/communities/{communityId}/posts for
   * community-scoped creation.
   *
   * @param connection
   * @param body Creation payload for a globally-composed post, including target
   *   community
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CommunitymemberAuth()
    communityMember: CommunitymemberPayload,
    @TypedBody()
    body: ICommunityPlatformPost.ICreate,
  ): Promise<ICommunityPlatformPost> {
    try {
      return await postcommunityPlatformCommunityMemberPosts({
        communityMember,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing post (community_platform_posts) by ID.
   *
   * Modify a post identified by its UUID, constrained by the business rules
   * defined for Posts. The underlying table is community_platform_posts, which
   * stores title, body, optional author_display_name, created_at, updated_at,
   * and deleted_at among other relations. Only the author is allowed to edit
   * per product rules; attempts by non-authors MUST be rejected with the
   * message: "You can edit or delete only items you authored.". Application
   * logic should set updated_at accordingly and, if implemented, append a
   * snapshot into community_platform_post_snapshots capturing the previous
   * state (title, body, author_display_name) for audit history as suggested by
   * that table’s description.
   *
   * Security and permissions: Authenticated users (role: communityMember) may
   * edit only posts they authored (community_platform_posts.author_user_id
   * equals the requester’s user id). Administrative takedowns are separate
   * policy actions and out of scope for this endpoint. Ownership checks occur
   * in business logic; this documentation focuses on the API contract.
   *
   * Validation and business logic: Title must be 5–120 characters; body must be
   * 10–10,000 characters and remain plain text (no scripts/executable code);
   * author_display_name, when provided, must be 0–32 characters. The community
   * reference (community_platform_community_id) and author_user_id are not
   * changeable here. The response returns the full post entity so clients can
   * immediately reflect changes in feeds and details. Error handling follows
   * standard messages in the requirements: invalid inputs should be reported
   * with clear messages (e.g., "Title must be 5–120 characters.").
   *
   * Relations and consistency: The post belongs to a community via
   * community_platform_community_id and optionally references an author via
   * author_user_id (nullable for anonymization scenarios). This endpoint does
   * not alter votes (community_platform_post_votes) or comments
   * (community_platform_comments); those are managed by dedicated endpoints. On
   * success, updated_at should reflect the edit time to support sorting and
   * auditing.
   *
   * @param connection
   * @param postId Unique identifier (UUID) of the post to update
   * @param body Mutable post fields to update (title, body,
   *   author_display_name)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":postId")
  public async update(
    @CommunitymemberAuth()
    communityMember: CommunitymemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPost.IUpdate,
  ): Promise<ICommunityPlatformPost> {
    try {
      return await putcommunityPlatformCommunityMemberPostsPostId({
        communityMember,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a post from active access by setting deleted_at in
   * community_platform_posts.
   *
   * Remove a post from active use by marking its deleted_at timestamp in
   * community_platform_posts. The model’s description indicates deleted_at is
   * used to indicate that a record is considered removed from active views.
   * Once marked, the post must be excluded from feeds, search, and the Global
   * Latest materialized view (mv_community_platform_global_latest_posts) on its
   * next refresh.
   *
   * Security and permissions: Only the author of the post may perform this
   * operation in normal flows. If a non-author attempts this action, deny with:
   * "You can edit or delete only items you authored.". Administrative removals
   * (policy takedown) are tracked separately in
   * community_platform_admin_actions and are not part of this endpoint’s
   * contract.
   *
   * Behavior and consistency: Setting deleted_at for the post ensures it will
   * no longer appear in queries. Related comments (community_platform_comments)
   * and votes (community_platform_post_votes) should be ignored by read paths
   * for the deleted post. Implementations may also log to
   * community_platform_audit_logs. This endpoint does not accept a request body
   * and does not return a response body.
   *
   * @param connection
   * @param postId Unique identifier (UUID) of the post to remove from active
   *   access
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":postId")
  public async erase(
    @CommunitymemberAuth()
    communityMember: CommunitymemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletecommunityPlatformCommunityMemberPostsPostId({
        communityMember,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
