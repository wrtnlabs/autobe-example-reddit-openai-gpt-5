import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postcommunityPlatformCommunityMemberPostsPostIdComments } from "../../../../../providers/postcommunityPlatformCommunityMemberPostsPostIdComments";
import { CommunitymemberAuth } from "../../../../../decorators/CommunitymemberAuth";
import { CommunitymemberPayload } from "../../../../../decorators/payload/CommunitymemberPayload";

import { ICommunityPlatformComment } from "../../../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/communityMember/posts/:postId/comments")
export class CommunityplatformCommunitymemberPostsCommentsController {
  /**
   * Create a comment in community_platform_comments for a specific post.
   *
   * This operation creates a new comment in the community_platform_comments
   * model for the post identified by postId. The model includes fields id
   * (UUID), community_platform_post_id (required), community_platform_user_id
   * (author), optional parent_id for reply threading, content (plain text
   * 2–2,000 chars), created_at/updated_at timestamps, and a deleted_at column
   * used to hide removed comments. The author is the authenticated account; the
   * author display label is handled elsewhere via user profile if needed.
   *
   * Security: creation of comments requires an authenticated role. Use the
   * communityMember role for normal users. The API will reject unauthenticated
   * requests. Ownership and author guards apply to subsequent edit/delete
   * operations (not part of this endpoint).
   *
   * Relationships and validation: the postId path parameter sets
   * community_platform_post_id. If a parentId is provided, it must reference an
   * existing comment belonging to the same post; otherwise, validation fails.
   * The content must be plain text and within the allowed length range. The
   * operation returns the created comment entity.
   *
   * Error handling: invalid UUIDs for postId or parentId, missing/too-short
   * content, or cross-post parent references result in 400 validation errors.
   * Attempts by unauthenticated callers result in 401/403 based on policy.
   *
   * @param connection
   * @param postId Target post’s ID where the comment will be created
   * @param body Comment creation payload including content and optional
   *   parentId
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @CommunitymemberAuth()
    communityMember: CommunitymemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformComment.ICreate,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await postcommunityPlatformCommunityMemberPostsPostIdComments({
        communityMember,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
