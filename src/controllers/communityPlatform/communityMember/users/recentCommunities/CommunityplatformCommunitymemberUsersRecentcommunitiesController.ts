import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchcommunityPlatformCommunityMemberUsersUserIdRecentCommunities } from "../../../../../providers/patchcommunityPlatformCommunityMemberUsersUserIdRecentCommunities";
import { CommunitymemberAuth } from "../../../../../decorators/CommunitymemberAuth";
import { CommunitymemberPayload } from "../../../../../decorators/payload/CommunitymemberPayload";

import { IPageICommunityPlatformRecentCommunity } from "../../../../../api/structures/IPageICommunityPlatformRecentCommunity";
import { ICommunityPlatformRecentCommunity } from "../../../../../api/structures/ICommunityPlatformRecentCommunity";

@Controller(
  "/communityPlatform/communityMember/users/:userId/recentCommunities",
)
export class CommunityplatformCommunitymemberUsersRecentcommunitiesController {
  /**
   * List a user’s recent communities from
   * community_platform_recent_communities.
   *
   * Fetch the per-user Recent Communities list maintained in the
   * community_platform_recent_communities table. Per the Prisma schema, each
   * record references a user (community_platform_user_id) and a community
   * (community_platform_community_id) and stores last_activity_at, created_at,
   * and updated_at timestamps. The application uses last_activity_at to order
   * the top entries for sidebar rendering and quick navigation.
   *
   * Security and permissions: Access requires an authenticated user context
   * because the resource exposes user-specific navigation data. Provider logic
   * should ensure a user can retrieve only their own recent list (path userId
   * must match the authenticated subject), while privileged support views—if
   * any—remain enforced in business logic. No write occurs through this
   * endpoint; it is a read-only retrieval.
   *
   * Entity relationships and behavior: Each record forms a unique mapping of
   * (user, community), ensuring no duplicates in the list. When eligible
   * activities occur (e.g., visit, post, comment, vote, join/leave), the system
   * updates last_activity_at and maintains the most recent communities in
   * order. Records with a non-null deleted_at should be excluded from normal
   * reads.
   *
   * Validation and related operations: The request body can carry pagination
   * and sorting directives (commonly ordering by last_activity_at descending).
   * If the userId path parameter does not correspond to an existing user,
   * return a not-found response. Join/leave and other actions that influence
   * recency are handled elsewhere and update this table implicitly; this
   * endpoint is a view over that store.
   *
   * @param connection
   * @param userId Target user’s ID whose recent communities are requested
   * @param body Search, filtering, sorting, and pagination parameters for
   *   per-user recent communities
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @CommunitymemberAuth()
    communityMember: CommunitymemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformRecentCommunity.IRequest,
  ): Promise<IPageICommunityPlatformRecentCommunity.ISummary> {
    try {
      return await patchcommunityPlatformCommunityMemberUsersUserIdRecentCommunities(
        {
          communityMember,
          userId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
