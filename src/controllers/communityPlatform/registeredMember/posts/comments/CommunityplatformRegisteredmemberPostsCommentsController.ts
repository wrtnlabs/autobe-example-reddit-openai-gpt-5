import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformRegisteredMemberPostsPostIdComments } from "../../../../../providers/postCommunityPlatformRegisteredMemberPostsPostIdComments";
import { RegisteredmemberAuth } from "../../../../../decorators/RegisteredmemberAuth";
import { RegisteredmemberPayload } from "../../../../../decorators/payload/RegisteredmemberPayload";
import { putCommunityPlatformRegisteredMemberPostsPostIdCommentsCommentId } from "../../../../../providers/putCommunityPlatformRegisteredMemberPostsPostIdCommentsCommentId";

import { ICommunityPlatformComment } from "../../../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/registeredMember/posts/:postId/comments")
export class CommunityplatformRegisteredmemberPostsCommentsController {
  /**
   * Create a new comment (community_platform_comments) under a post.
   *
   * Create a new threaded comment for a given post. According to the
   * community_platform_comments model description, each comment belongs to
   * exactly one post (community_platform_post_id) and one author account
   * (community_platform_user_id). The content field stores plain text with line
   * breaks, and the model tracks created_at and updated_at timestamps for
   * ordering and audit.
   *
   * Security and permissions follow the business rules: writing requires
   * authentication. Only authenticated registered members are allowed to create
   * comments. Guests receive an authentication prompt and, on successful
   * sign-in, the original intent should resume. This endpoint requires
   * role-based access consistent with registeredMember semantics while
   * siteAdmin overrides are handled in business logic rather than endpoint-role
   * multiplication.
   *
   * The operation enforces validation rules derived from requirements and
   * aligned with schema semantics: content length must be between 2 and 2,000
   * characters (plain text; no executable code). If parent_id is provided, it
   * must reference an existing community_platform_comments row associated with
   * the same community_platform_post_id, and the nesting depth must not exceed
   * 8 levels (including root depth 1). Replies to a soft-deleted parent are
   * rejected. The post referenced by postId must exist in
   * community_platform_posts and not be removed from public view.
   *
   * Relationships and indexes in the schema support deterministic ordering and
   * search: comments are indexed by (community_platform_post_id, created_at,
   * id) for Newest ordering and by parent_id for hierarchical pagination.
   * Although this endpoint only creates a single record, related read
   * operations (e.g., GET /posts/{postId}/comments) will use these tuples for
   * pagination and sorting. The response includes the created comment so
   * clients can optimistically render it and reconcile with server-confirmed
   * state.
   *
   * Expected behavior and error handling: return 201 with the created comment.
   * Return 400 for validation failures (e.g., content length, invalid parent),
   * 401 when unauthenticated with the standard message, 403 if the
   * authenticated user is restricted from writing, and 404 if the post or
   * parent cannot be found under the specified post. Transient failures respond
   * with a generic temporary error message per platform copy.
   *
   * @param connection
   * @param postId Identifier of the target post (community_platform_posts.id)
   *   to comment on
   * @param body Comment creation payload including plain-text content and
   *   optional parent comment reference for threading
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegisteredmemberAuth()
    registeredMember: RegisteredmemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformComment.ICreate,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await postCommunityPlatformRegisteredMemberPostsPostIdComments({
        registeredMember,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing comment (community_platform_comments) content within a
   * post.
   *
   * Modify a specific comment’s plain-text content. The
   * community_platform_comments model maintains content as plain text and
   * tracks updated_at for edits. Ownership is enforced by associating each
   * comment with community_platform_user_id. This operation updates only
   * editable fields and returns the full updated comment for client
   * reconciliation.
   *
   * Security and permissions: only the comment’s author (or a siteAdmin via
   * platform policy) may edit. Endpoint access requires an authenticated
   * registered member role; siteAdmin overrides are handled in the provider
   * logic to avoid multiplying role-specific endpoints. Guests receive 401 with
   * the standard message and should be prompted to sign in and resume.
   *
   * Database relationships and immutability: the comment must belong to the
   * specified post (community_platform_post_id equals the postId path
   * parameter). The post association, author reference, and parent_id are
   * immutable via this endpoint. The schema’s timestamps
   * (created_at/updated_at) ensure deterministic Newest ordering for subsequent
   * reads.
   *
   * Validation and business logic: content must remain within 2–2,000
   * characters, plain text with line breaks. Attempts to change post
   * association or parent structure are rejected. Edits must not violate
   * nesting constraints or target a deleted resource.
   *
   * Related operations: creators use POST /posts/{postId}/comments to add new
   * comments and DELETE /comments/{commentId} to remove. Clients retrieve
   * details with GET /comments/{commentId} or paginated lists under the post.
   * Error handling includes 400 for invalid content, 401 for unauthenticated
   * access, 403 when the actor is not the author, and 404 if the post/comment
   * pair does not exist or is no longer available.
   *
   * @param connection
   * @param postId Identifier of the parent post (community_platform_posts.id)
   *   containing the comment
   * @param commentId Identifier of the comment (community_platform_comments.id)
   *   to update
   * @param body Comment update payload containing the new plain-text content
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentId")
  public async update(
    @RegisteredmemberAuth()
    registeredMember: RegisteredmemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformComment.IUpdate,
  ): Promise<ICommunityPlatformComment> {
    try {
      return await putCommunityPlatformRegisteredMemberPostsPostIdCommentsCommentId(
        {
          registeredMember,
          postId,
          commentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
