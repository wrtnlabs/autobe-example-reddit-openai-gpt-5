import { Controller } from "@nestjs/common";
import { TypedRoute } from "@nestia/core";
import typia from "typia";
import { getCommunityPlatformRegisteredMemberMeRecentCommunities } from "../../../../../providers/getCommunityPlatformRegisteredMemberMeRecentCommunities";
import { RegisteredmemberAuth } from "../../../../../decorators/RegisteredmemberAuth";
import { RegisteredmemberPayload } from "../../../../../decorators/payload/RegisteredmemberPayload";

import { ICommunityPlatformRecentCommunity } from "../../../../../api/structures/ICommunityPlatformRecentCommunity";

@Controller("/communityPlatform/registeredMember/me/recentCommunities")
export class CommunityplatformRegisteredmemberMeRecentcommunitiesController {
  /**
   * Get the current user’s recent communities from
   * community_platform_recent_communities.
   *
   * Return the current user’s most recently active communities to render the
   * Left Sidebar list. According to the Prisma schema, the
   * community_platform_recent_communities table tracks per-user recency with
   * last_activity_at, and enforces uniqueness per (community_platform_user_id,
   * community_platform_community_id). The operation filters out any rows where
   * either the recency record or the referenced community has a non-null
   * deleted_at and sorts by last_activity_at in descending order.
   *
   * Security and permissions: Access requires an authenticated session
   * associated with a row in community_platform_users. The result is scoped to
   * the calling user and does not expose another user’s recency list.
   * Rate-limiting may be applied for defensive purposes but should preserve
   * responsiveness.
   *
   * Database relationships: Each record links to community_platform_users via
   * community_platform_user_id and to community_platform_communities via
   * community_platform_community_id. For each returned item, clients commonly
   * display community name (from community_platform_communities.name), optional
   * logo_uri, and last_activity_at from community_platform_recent_communities.
   * Implementations may also include a derived memberCount computed from
   * community_platform_community_members where deleted_at is null to align with
   * display needs, though the primary source table for this list is
   * community_platform_recent_communities.
   *
   * Validation and business logic: The list is capped to a maximum of five most
   * recent items as described in the requirements. When a community is removed
   * from visibility, its appearance should disappear from this list immediately
   * by virtue of the deleted_at filter on the community reference. Timestamps
   * in the response should be ISO-8601 in UTC; clients render relative time in
   * the user’s locale.
   *
   * Related operations: Joining/leaving communities and other actions like
   * visiting a community, posting, commenting, or voting are expected to update
   * last_activity_at via application signals. See the membership update
   * operation for how join/leave affects this list.
   *
   * Error handling: If the caller is unauthenticated, return an authorization
   * error consistent with the platform’s standardized copy. Transient errors
   * should return a temporary error message allowing retry.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(
    @RegisteredmemberAuth()
    registeredMember: RegisteredmemberPayload,
  ): Promise<ICommunityPlatformRecentCommunity.IList> {
    try {
      return await getCommunityPlatformRegisteredMemberMeRecentCommunities({
        registeredMember,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
