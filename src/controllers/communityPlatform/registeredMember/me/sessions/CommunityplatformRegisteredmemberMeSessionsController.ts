import { Controller } from "@nestjs/common";
import { TypedRoute } from "@nestia/core";
import typia from "typia";
import { getCommunityPlatformRegisteredMemberMeSessions } from "../../../../../providers/getCommunityPlatformRegisteredMemberMeSessions";
import { RegisteredmemberAuth } from "../../../../../decorators/RegisteredmemberAuth";
import { RegisteredmemberPayload } from "../../../../../decorators/payload/RegisteredmemberPayload";

import { IPageICommunityPlatformSession } from "../../../../../api/structures/IPageICommunityPlatformSession";

@Controller("/communityPlatform/registeredMember/me/sessions")
export class CommunityplatformRegisteredmemberMeSessionsController {
  /**
   * List authenticated user’s sessions (community_platform_sessions).
   *
   * Return the authenticated user’s sessions as stored in
   * community_platform_sessions. Columns include id (UUID primary key),
   * hashed_token (stored hash only; never expose plaintext), user_agent and ip
   * (optional client hints), created_at/updated_at, last_seen_at for activity,
   * expires_at for absolute lifetime, and revoked_at for explicit invalidation.
   * A deleted_at column exists for retention workflows.
   *
   * Security and permissions: requires an authenticated registered member and
   * returns only sessions where community_platform_user_id matches the caller.
   * Providers should not expose hashed_token or any sensitive materials beyond
   * what’s necessary for device identification; hashed_token remains opaque.
   *
   * Pagination and ordering: sessions are typically listed by last_seen_at or
   * created_at descending. Even though this is a GET endpoint, implementations
   * should support pagination via query parameters (e.g., cursor and limit)
   * consistent with platform patterns. Revoked or expired sessions may be
   * included to improve transparency; clients can filter or label accordingly.
   *
   * Error handling: 401 responses use the standardized message “Please sign in
   * to continue.”. The endpoint is read-only and does not mutate session state
   * (separate revoke/sign-out APIs can be used to invalidate sessions).
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(
    @RegisteredmemberAuth()
    registeredMember: RegisteredmemberPayload,
  ): Promise<IPageICommunityPlatformSession> {
    try {
      return await getCommunityPlatformRegisteredMemberMeSessions({
        registeredMember,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
