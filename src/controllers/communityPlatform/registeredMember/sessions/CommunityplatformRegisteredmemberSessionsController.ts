import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformRegisteredMemberSessions } from "../../../../providers/patchCommunityPlatformRegisteredMemberSessions";
import { RegisteredmemberAuth } from "../../../../decorators/RegisteredmemberAuth";
import { RegisteredmemberPayload } from "../../../../decorators/payload/RegisteredmemberPayload";
import { getCommunityPlatformRegisteredMemberSessionsSessionId } from "../../../../providers/getCommunityPlatformRegisteredMemberSessionsSessionId";

import { IPageICommunityPlatformSession } from "../../../../api/structures/IPageICommunityPlatformSession";
import { ICommunityPlatformSession } from "../../../../api/structures/ICommunityPlatformSession";

@Controller("/communityPlatform/registeredMember/sessions")
export class CommunityplatformRegisteredmemberSessionsController {
  /**
   * List authentication sessions for current user
   * (community_platform_sessions).
   *
   * Retrieve a paginated list of the current user’s authentication sessions
   * sourced from the community_platform_sessions table. The schema defines core
   * columns used for session management and audit, including id (UUID),
   * community_platform_user_id, hashed_token (never exposed in plaintext),
   * user_agent, ip, client_platform, client_device, session_type, created_at,
   * updated_at, last_seen_at, expires_at, revoked_at, and deleted_at. Client
   * UIs typically show device hints and last activity while masking sensitive
   * internals.
   *
   * Security and permissions: access is restricted to authenticated users
   * viewing their own sessions. Provider logic must enforce that only sessions
   * belonging to the requester’s community_platform_user_id are returned.
   * Revoked or expired sessions may be excluded by default to align with a
   * clean “active sessions” view; administrative or troubleshooting tools can
   * include them when appropriate.
   *
   * Relationship to underlying entities: each session belongs to a
   * community_platform_users record via community_platform_user_id (onDelete:
   * Cascade). Listing sessions is often paired with endpoints to revoke a
   * specific session or to refresh the current one. Records where revoked_at is
   * not null or expires_at is reached should be treated as inactive; records
   * where deleted_at is not null are considered deactivated for retention
   * reasons and should be filtered from normal results.
   *
   * Validation and business rules: this index supports pagination using a
   * cursor derived from created_at and id (for deterministic Newest ordering)
   * and may support filtering by session_type, last_seen_at windows, or status
   * (active vs revoked/expired). Timestamps must be returned in ISO-8601 UTC.
   * Sensitive fields like hashed_token are never returned.
   *
   * Related operations: GET /sessions/{sessionId} returns an individual session
   * detail. Authentication refresh and sign-out flows are implemented elsewhere
   * and may leverage this listing for device/session management UIs. Error
   * handling should return a standardized 401 message when unauthenticated and
   * generic temporary error copy for transient failures.
   *
   * @param connection
   * @param body Search, filter, sort, and pagination criteria for listing the
   *   user’s sessions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @RegisteredmemberAuth()
    registeredMember: RegisteredmemberPayload,
    @TypedBody()
    body: ICommunityPlatformSession.IRequest,
  ): Promise<IPageICommunityPlatformSession.ISummary> {
    try {
      return await patchCommunityPlatformRegisteredMemberSessions({
        registeredMember,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a session by ID (community_platform_sessions).
   *
   * Fetch one session from community_platform_sessions using its id (UUID). The
   * table includes fields id, community_platform_user_id, hashed_token (hash
   * only), user_agent, ip, client_platform, client_device, session_type,
   * created_at, updated_at, last_seen_at, expires_at, revoked_at, and
   * deleted_at. Presentation should include device and timing metadata; never
   * expose raw tokens.
   *
   * Security: only authenticated users may call this endpoint, and only for
   * sessions associated with their own community_platform_user_id. Sessions
   * where revoked_at is set or expires_at is in the past are considered
   * inactive and may still be shown for history depending on product
   * requirements; records with deleted_at set are treated as deactivated and
   * should not be returned in normal flows.
   *
   * Behavior and errors: Return the full session view object for valid
   * ownership checks. If the identifier does not belong to the caller, respond
   * with authorization failure. Use ISO-8601 UTC timestamps and preserve exact
   * stored values for created_at, updated_at, last_seen_at, and expires_at.
   * This detail API is often used in concert with a revoke operation to
   * invalidate a specific session.
   *
   * @param connection
   * @param sessionId Target session’s ID (UUID) to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":sessionId")
  public async at(
    @RegisteredmemberAuth()
    registeredMember: RegisteredmemberPayload,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformSession> {
    try {
      return await getCommunityPlatformRegisteredMemberSessionsSessionId({
        registeredMember,
        sessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
