import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postCommunityPlatformRegisteredMemberCommunitiesCommunityNameRules } from "../../../../../providers/postCommunityPlatformRegisteredMemberCommunitiesCommunityNameRules";
import { RegisteredmemberAuth } from "../../../../../decorators/RegisteredmemberAuth";
import { RegisteredmemberPayload } from "../../../../../decorators/payload/RegisteredmemberPayload";
import { putCommunityPlatformRegisteredMemberCommunitiesCommunityNameRulesRuleId } from "../../../../../providers/putCommunityPlatformRegisteredMemberCommunitiesCommunityNameRulesRuleId";
import { deleteCommunityPlatformRegisteredMemberCommunitiesCommunityNameRulesRuleId } from "../../../../../providers/deleteCommunityPlatformRegisteredMemberCommunitiesCommunityNameRulesRuleId";

import { ICommunityPlatformCommunityRule } from "../../../../../api/structures/ICommunityPlatformCommunityRule";

@Controller(
  "/communityPlatform/registeredMember/communities/:communityName/rules",
)
export class CommunityplatformRegisteredmemberCommunitiesRulesController {
  /**
   * Create a community rule (community_platform_community_rules) under a named
   * community.
   *
   * This endpoint creates a concise, ordered rule item for display in the
   * "Community Rules" section. In the Prisma schema,
   * community_platform_community_rules defines: id (UUID),
   * community_platform_community_id (FK to the parent community), order_index
   * (Int for display order starting at 1), text (short content ~≤100 chars),
   * created_at, updated_at, and deleted_at (for visibility control). The unique
   * constraint on (community_platform_community_id, order_index) ensures that
   * no two rules share the same order within a community; note that this
   * uniqueness applies even to rows with deleted_at set unless the application
   * purges or adjusts them.
   *
   * Security and permissions: Only authenticated users who own the target
   * community (or a siteAdmin) may add rules. Assign this endpoint to
   * registered members at the controller level (authorizationRole
   * "registeredMember") and enforce ownership/administrator checks in the
   * provider. Guests receive an authentication-required outcome per platform
   * conventions. If the parent community is not found or is removed (deleted_at
   * set), the operation must fail appropriately.
   *
   * Relationship and validation: The {communityName} path parameter identifies
   * the community via name/name_key in community_platform_communities. The
   * request body provides order and text that map to order_index and text in
   * community_platform_community_rules. Enforce business constraints:
   * order_index must be a positive integer and unique within the community;
   * text should be concise (≈ ≤100 chars). On success, the response returns the
   * created rule with timestamps. If the order_index conflicts with an existing
   * rule for the same community (including soft-deleted rows if they remain),
   * return a conflict outcome. This operation complements GET (read), PUT
   * (update), and DELETE (mark as deleted) for complete lifecycle management of
   * rules.
   *
   * @param connection
   * @param communityName Immutable community name used to resolve the parent
   *   community
   * @param body New rule data to create under the specified community
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @RegisteredmemberAuth()
    registeredMember: RegisteredmemberPayload,
    @TypedParam("communityName")
    communityName: string &
      tags.MinLength<3> &
      tags.MaxLength<30> &
      tags.Pattern<"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$">,
    @TypedBody()
    body: ICommunityPlatformCommunityRule.ICreate,
  ): Promise<ICommunityPlatformCommunityRule> {
    try {
      return await postCommunityPlatformRegisteredMemberCommunitiesCommunityNameRules(
        {
          registeredMember,
          communityName,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a community rule (community_platform_community_rules) within a named
   * community.
   *
   * Modify the text and/or order of a rule item displayed in a community’s
   * "Community Rules" section. The Prisma table
   * community_platform_community_rules tracks fields: id,
   * community_platform_community_id (FK), order_index, text, created_at,
   * updated_at, and deleted_at. Update operations should not allow changing the
   * parent community; instead, they update only mutable attributes (e.g., text,
   * order_index). The uniqueness constraint on
   * (community_platform_community_id, order_index) remains enforced, including
   * for rows with deleted_at set unless altered by application logic.
   *
   * Security and permissions: Only the community owner or siteAdmin can update
   * rules. Configure endpoint access for authenticated members
   * (authorizationRole "registeredMember") with an ownership/administrator
   * check in business logic. If the user lacks permission, return a forbidden
   * outcome per the platform’s standardized message. Rules marked deleted
   * (deleted_at set) are considered unavailable for normal edits.
   *
   * Validation and behavior: Confirm the ruleId is a UUID and that the rule
   * belongs to the community derived from {communityName}. Validate that text
   * remains concise (≈ ≤100 chars) and that order_index remains a positive
   * integer and unique within the community. If attempting to set an
   * order_index that duplicates another existing rule for the same community
   * (including soft-deleted rows if they remain), return a conflict outcome. On
   * success, return the updated rule including updated_at. Related endpoints:
   * GET retrieves the rule, POST creates a new rule, and DELETE marks the rule
   * as deleted while preserving history.
   *
   * @param connection
   * @param communityName Immutable community name used to resolve the parent
   *   community
   * @param ruleId Identifier of the rule to update (UUID)
   * @param body Fields to update for the specified rule
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":ruleId")
  public async update(
    @RegisteredmemberAuth()
    registeredMember: RegisteredmemberPayload,
    @TypedParam("communityName")
    communityName: string &
      tags.MinLength<3> &
      tags.MaxLength<30> &
      tags.Pattern<"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$">,
    @TypedParam("ruleId")
    ruleId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommunityRule.IUpdate,
  ): Promise<ICommunityPlatformCommunityRule> {
    try {
      return await putCommunityPlatformRegisteredMemberCommunitiesCommunityNameRulesRuleId(
        {
          registeredMember,
          communityName,
          ruleId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete (mark deleted_at) a community rule in
   * community_platform_community_rules.
   *
   * This operation marks a rule as deleted by setting the deleted_at timestamp
   * in community_platform_community_rules, making it invisible to normal reads
   * while preserving historical integrity. The model’s columns include id,
   * community_platform_community_id, order_index, text, created_at, updated_at,
   * and deleted_at. Because rules are ordered snippets used for the "Community
   * Rules" box, soft deletion maintains referential consistency while allowing
   * recovery or audit if required by policy.
   *
   * Security and permissions: Only the community owner or siteAdmin may delete
   * (mark as deleted) a rule. Gate this endpoint to authenticated members
   * (authorizationRole "registeredMember") and enforce ownership/administrator
   * checks in business logic. Guests should receive an authentication-required
   * outcome. If the rule or community does not exist—or the rule is not part of
   * the specified community—return a not-found outcome.
   *
   * Expected behavior and errors: Ensure the rule belongs to the community
   * resolved from {communityName} before applying deletion. After marking
   * deleted, subsequent reads must exclude it from standard lists and counts.
   * If the rule is already deleted, the operation may be treated as idempotent.
   * Related operations: POST to create a rule, GET to read a specific rule, and
   * PUT to edit existing rules.
   *
   * @param connection
   * @param communityName Immutable community name used to resolve the parent
   *   community
   * @param ruleId Identifier of the rule to remove (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":ruleId")
  public async erase(
    @RegisteredmemberAuth()
    registeredMember: RegisteredmemberPayload,
    @TypedParam("communityName")
    communityName: string &
      tags.MinLength<3> &
      tags.MaxLength<30> &
      tags.Pattern<"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$">,
    @TypedParam("ruleId")
    ruleId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformRegisteredMemberCommunitiesCommunityNameRulesRuleId(
        {
          registeredMember,
          communityName,
          ruleId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
