import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformRegisteredMemberUsersUserIdMemberships } from "../../../../../providers/getCommunityPlatformRegisteredMemberUsersUserIdMemberships";
import { RegisteredmemberAuth } from "../../../../../decorators/RegisteredmemberAuth";
import { RegisteredmemberPayload } from "../../../../../decorators/payload/RegisteredmemberPayload";

import { ICommunityPlatformCommunityMember } from "../../../../../api/structures/ICommunityPlatformCommunityMember";

@Controller("/communityPlatform/registeredMember/users/:userId/memberships")
export class CommunityplatformRegisteredmemberUsersMembershipsController {
  /**
   * List a user’s current community memberships from
   * community_platform_community_members.
   *
   * Return the list of communities a user is currently joined to. The Prisma
   * model community_platform_community_members links users
   * (community_platform_users.id) to communities
   * (community_platform_communities.id) and records created_at and updated_at
   * timestamps. This operation filters by the path parameter {userId} and
   * includes only visible memberships (deleted_at is null) and communities that
   * are still visible.
   *
   * Security considerations: Authorization requires an authenticated session.
   * The provider should enforce that the requesting user matches {userId} for
   * privacy, or apply elevated privileges in administrative contexts per
   * policy. This documentation assigns the generic “registeredMember” role and
   * expects ownership enforcement in provider logic.
   *
   * Relationships and data shape: Each returned membership references the
   * community entity for fields such as name, description, logo_uri, and
   * category. Member count shown in cards, if included, should be computed from
   * active rows in community_platform_community_members for the referenced
   * community.
   *
   * Validation rules and business logic: The path parameter {userId} must be a
   * valid UUID present in community_platform_users. Records with a non-null
   * deleted_at are not returned. Timestamps should be emitted in ISO-8601 UTC
   * format.
   *
   * Related operations: /me/recentCommunities for the recency-based list, and
   * PUT /communities/{communityName}/membership to toggle membership. Community
   * discovery is handled by /communities endpoints.
   *
   * Error handling: Unauthenticated access should result in an authorization
   * error with standardized copy. If the user id does not exist, return
   * not-found; temporary issues should surface the standardized temporary
   * error.
   *
   * @param connection
   * @param userId Target user’s ID (community_platform_users.id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(
    @RegisteredmemberAuth()
    registeredMember: RegisteredmemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommunityMember.IList> {
    try {
      return await getCommunityPlatformRegisteredMemberUsersUserIdMemberships({
        registeredMember,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
