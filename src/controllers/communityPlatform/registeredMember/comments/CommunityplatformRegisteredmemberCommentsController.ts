import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteCommunityPlatformRegisteredMemberCommentsCommentId } from "../../../../providers/deleteCommunityPlatformRegisteredMemberCommentsCommentId";
import { RegisteredmemberAuth } from "../../../../decorators/RegisteredmemberAuth";
import { RegisteredmemberPayload } from "../../../../decorators/payload/RegisteredmemberPayload";

@Controller("/communityPlatform/registeredMember/comments/:commentId")
export class CommunityplatformRegisteredmemberCommentsController {
  /**
   * Delete a comment (community_platform_comments) via soft deletion (sets
   * deleted_at).
   *
   * Delete a comment by its identifier using soft deletion behavior defined in
   * the community_platform_comments model (deleted_at nullable timestamp). When
   * executed by the author (or siteAdmin per policy), the system sets
   * deleted_at, hiding the comment body while keeping its position in the
   * thread so replies remain visible and counts exclude the deleted item per
   * business rules.
   *
   * Security and permissions: only the commentâ€™s author may perform this action
   * (siteAdmin overrides in business logic). Endpoint access requires an
   * authenticated registered member. Guests receive 401 with the standard
   * message and should be prompted to sign in and resume. Author guard denies
   * non-owners with a 403 response using the standardized copy.
   *
   * Database and behavior details: the operation sets deleted_at on the target
   * row in community_platform_comments without altering
   * community_platform_post_id, community_platform_user_id, or parent
   * relations. Post/comment visibility rules ensure soft-deleted comments are
   * excluded from visible comment counts while preserving thread continuity.
   * Related reads (GET single comment or post-thread lists) should render a
   * neutral placeholder for deleted items.
   *
   * Error handling: return 204 on success with no body. Return 401 for
   * unauthenticated users, 403 for non-owners, and 404 if the comment is
   * missing. Transient failures use the standard temporary error copy. Related
   * operations include creation (POST), update (PUT), and retrieval (GET).
   *
   * @param connection
   * @param commentId Identifier of the comment (community_platform_comments.id)
   *   to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @RegisteredmemberAuth()
    registeredMember: RegisteredmemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformRegisteredMemberCommentsCommentId({
        registeredMember,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
