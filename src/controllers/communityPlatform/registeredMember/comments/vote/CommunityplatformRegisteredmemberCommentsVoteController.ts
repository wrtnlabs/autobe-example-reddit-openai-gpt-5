import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putCommunityPlatformRegisteredMemberCommentsCommentIdVote } from "../../../../../providers/putCommunityPlatformRegisteredMemberCommentsCommentIdVote";
import { RegisteredmemberAuth } from "../../../../../decorators/RegisteredmemberAuth";
import { RegisteredmemberPayload } from "../../../../../decorators/payload/RegisteredmemberPayload";
import { deleteCommunityPlatformRegisteredMemberCommentsCommentIdVote } from "../../../../../providers/deleteCommunityPlatformRegisteredMemberCommentsCommentIdVote";

import { ICommunityPlatformCommentVoteOutcome } from "../../../../../api/structures/ICommunityPlatformCommentVoteOutcome";
import { ICommunityPlatformCommentVote } from "../../../../../api/structures/ICommunityPlatformCommentVote";

@Controller("/communityPlatform/registeredMember/comments/:commentId/vote")
export class CommunityplatformRegisteredmemberCommentsVoteController {
  /**
   * Apply an Upvote or Downvote on a comment
   * (community_platform_comment_votes).
   *
   * This endpoint applies a vote from the currently authenticated registered
   * member to a specific comment identified by commentId. In the Prisma schema,
   * community_platform_comment_votes records a single per-user vote on a
   * comment with columns: id (UUID), community_platform_comment_id (UUID),
   * community_platform_user_id (UUID), value (Int; allowed 1 for upvote, -1 for
   * downvote), created_at, updated_at, and deleted_at (nullable). A uniqueness
   * constraint over (community_platform_user_id, community_platform_comment_id)
   * guarantees only one effective vote per user per comment.
   *
   * Security and permissions follow business rules: voting requires
   * authentication as a registered member, and users are prohibited from voting
   * on their own comments. Attempts to vote on one’s own comment must be
   * rejected with copy “You can’t vote on your own posts/comments.” The
   * operation uses the caller’s authenticated identity; it does not accept user
   * identifiers in the request body.
   *
   * This operation writes to community_platform_comment_votes by inserting a
   * new row for first-time votes or updating the existing row’s value when
   * switching directly between Upvote and Downvote. A transition to the None
   * state is represented by removing the vote row and is handled by the DELETE
   * /comments/{commentId}/vote endpoint. After applying the vote, the service
   * should compute the comment’s new score (upvotes − downvotes) using
   * community_platform_comment_votes and return the caller’s current vote for
   * UI reconciliation. Related operations commonly used together: DELETE
   * /comments/{commentId}/vote to clear the vote; the post voting endpoints for
   * post-level votes.
   *
   * Validation and error handling: if the target comment does not exist in
   * community_platform_comments, or belongs to an unavailable post (e.g., the
   * post has been removed), the operation must return an appropriate error.
   * Transient failures should return the standardized message "A temporary
   * error occurred. Please try again in a moment.".
   *
   * @param connection
   * @param commentId UUID of the target comment to vote on.
   * @param body Desired vote state for this comment. Only UPVOTE or DOWNVOTE
   *   are accepted here; use DELETE to clear (None).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @RegisteredmemberAuth()
    registeredMember: RegisteredmemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformCommentVote.IUpdate,
  ): Promise<ICommunityPlatformCommentVoteOutcome> {
    try {
      return await putCommunityPlatformRegisteredMemberCommentsCommentIdVote({
        registeredMember,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove the caller’s vote (set to None) on a comment
   * (community_platform_comment_votes).
   *
   * This endpoint removes the caller’s effective vote on the specified comment
   * by deleting the row from community_platform_comment_votes matching
   * (community_platform_comment_id, community_platform_user_id). The table
   * captures a single effective vote with columns id (UUID),
   * community_platform_comment_id (UUID), community_platform_user_id (UUID),
   * value in {-1, 1}, timestamps, and a nullable deleted_at field. None is
   * represented by the absence of a vote row. After deletion, the comment’s
   * score updates accordingly on subsequent reads.
   *
   * Permissions: Only authenticated registered members may perform this action.
   * Clearing a non-existent vote is idempotent and should succeed with no
   * content. The global restriction against self-voting is enforced on the PUT
   * operation; for DELETE, attempting to clear a non-existent vote is a no-op.
   *
   * Error handling: If the comment does not exist or is not accessible (e.g.,
   * its parent post has been removed), respond with an appropriate error.
   * Transient failures should return the standardized temporary error message.
   * This DELETE endpoint complements PUT /comments/{commentId}/vote which sets
   * a specific Upvote or Downvote value.
   *
   * @param connection
   * @param commentId UUID of the target comment to clear vote from.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @RegisteredmemberAuth()
    registeredMember: RegisteredmemberPayload,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformRegisteredMemberCommentsCommentIdVote(
        {
          registeredMember,
          commentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
