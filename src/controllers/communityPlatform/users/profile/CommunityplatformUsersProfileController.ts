import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getcommunityPlatformUsersUserIdProfile } from "../../../../providers/getcommunityPlatformUsersUserIdProfile";

import { ICommunityPlatformUserProfile } from "../../../../api/structures/ICommunityPlatformUserProfile";

@Controller("/communityPlatform/users/:userId/profile")
export class CommunityplatformUsersProfileController {
  /**
   * Retrieve a user profile (community_platform_user_profiles) by userId.
   *
   * Get the presentation-layer profile associated with a user. The
   * community_platform_user_profiles model stores fields intended for display
   * rather than authentication: display_name (suggested 0–32 characters),
   * optional bio, avatar_uri, and optional locale and timezone preferences. It
   * references the owning user via community_platform_user_id and is unique per
   * user.
   *
   * Security and privacy: This read operation should expose only public-safe
   * profile information. It performs no changes. Profiles with a non-null
   * deleted_at should not be returned in standard responses. Implementations
   * may localize time-related displays using the user’s timezone value, but raw
   * timestamps are returned as stored.
   *
   * Relationships: The profile is one-to-one with community_platform_users.
   * Other account data such as credentials or sessions are deliberately
   * separated and are not included in this response. Use GET /users/{userId}
   * for identity fields and authorship references, and use content endpoints to
   * fetch authored posts/comments.
   *
   * Error handling: Return not found when no active profile exists for the
   * specified userId. This endpoint complements the user detail endpoint to
   * build author tiles and account pages.
   *
   * @param connection
   * @param userId Identifier of the user whose profile is requested
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformUserProfile> {
    try {
      return await getcommunityPlatformUsersUserIdProfile({
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
