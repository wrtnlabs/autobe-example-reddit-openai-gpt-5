import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getcommunityPlatformUsersUserId } from "../../../providers/getcommunityPlatformUsersUserId";

import { ICommunityPlatformUser } from "../../../api/structures/ICommunityPlatformUser";

@Controller("/communityPlatform/users/:userId")
export class CommunityplatformUsersController {
  /**
   * Retrieve a user (community_platform_users) by ID.
   *
   * Fetch the primary user identity referenced throughout the platform. The
   * community_platform_users model contains the unique username, account
   * status, and lifecycle timestamps such as created_at and updated_at, with
   * last_login_at optionally present. This table is the parent for credentials,
   * profile, and sessions, and is referenced by role assignment tables and
   * content ownership relations (posts, comments).
   *
   * Security and visibility: Reading user identity by ID is often public in
   * community contexts; however, implementations must respect privacy
   * constraints regarding which fields are exposed. No modifications are
   * performed by this endpoint. Records with a non-null deleted_at are
   * considered removed from active use and should not be presented in normal
   * responses.
   *
   * Relationships and usage: A user can have an associated profile
   * (community_platform_user_profiles), credentials
   * (community_platform_user_credentials), sessions
   * (community_platform_sessions), and content authored (posts and comments).
   * This endpoint returns just the user entity. Use the profile endpoint to
   * retrieve presentation details like display_name and avatar URI.
   *
   * Error handling: Return not found when the user does not exist or is no
   * longer active for public views. This endpoint is commonly paired with GET
   * /users/{userId}/profile to render full author cards.
   *
   * @param connection
   * @param userId Identifier of the user to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformUser> {
    try {
      return await getcommunityPlatformUsersUserId({
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
