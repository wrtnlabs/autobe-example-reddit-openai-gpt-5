import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchcommunityPlatformCategories } from "../../../providers/patchcommunityPlatformCategories";
import { getcommunityPlatformCategoriesCategoryId } from "../../../providers/getcommunityPlatformCategoriesCategoryId";

import { IPageICommunityPlatformCategory } from "../../../api/structures/IPageICommunityPlatformCategory";
import { ICommunityPlatformCategory } from "../../../api/structures/ICommunityPlatformCategory";

@Controller("/communityPlatform/categories")
export class CommunityplatformCategoriesController {
  /**
   * Search and paginate categories from Prisma table
   * community_platform_categories.
   *
   * This operation queries the community_platform_categories table, which is
   * the canonical list of community categories used for Explore and filtering
   * across the platform. According to the schema comments, it maintains a
   * unique code (slug-like), a unique name for display, an optional
   * description, a UI-oriented display_order, an active flag, and lifecycle
   * timestamps (created_at, updated_at). The results are intended for list/grid
   * surfaces and administrative pickers.
   *
   * Security-wise, this is a read-only discovery endpoint and should be
   * publicly accessible. Authorization can remain open while the service
   * ensures that only records appropriate for public consumption are returned.
   * Business logic should exclude categories where deleted_at is not null and
   * may also optionally exclude inactive categories unless explicitly requested
   * via filters.
   *
   * From a data modeling standpoint, communities
   * (community_platform_communities) reference categories through
   * community_platform_category_id. The uniqueness constraints on code and name
   * (both unique) enable deterministic linking and avoid ambiguous labels.
   * Client queries commonly search by partial code/name and filter by active to
   * power user-facing category chips and explore filters.
   *
   * Validation and business logic considerations: the request body supports
   * pagination parameters, search terms for code/name, and sorting on
   * display_order (typical default ascending for chip presentation), name, or
   * created_at. Filters should be sanitized, and unknown sort keys rejected
   * with a clear error, while respecting the schemaâ€™s indices (e.g., active,
   * display_order; created_at) for performance.
   *
   * Related operations include GET /categories/{categoryId} for a single
   * category detail. Expected behavior includes deterministic ordering (stable
   * within the same response) and excluding records marked deleted via the
   * deleted_at column. Error handling should return meaningful messages for
   * invalid sort fields or malformed pagination inputs while preserving public
   * read semantics.
   *
   * @param connection
   * @param body Search, filter, sort, and pagination parameters for categories
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPlatformCategory.IRequest,
  ): Promise<IPageICommunityPlatformCategory.ISummary> {
    try {
      return await patchcommunityPlatformCategories({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single category (community_platform_categories) by ID.
   *
   * This operation retrieves one record from community_platform_categories
   * using the categoryId path parameter (UUID). As described in the schema,
   * each category carries a unique business code (code), a unique display name
   * (name), optional description, UI display_order, a Boolean active state, and
   * lifecycle timestamps (created_at, updated_at). Communities reference
   * categories by id, so this endpoint is often used to hydrate configuration
   * screens and contextual sidebars.
   *
   * Security considerations: this is a read-only public endpoint intended for
   * discovery and reference. Implementations should omit records where
   * deleted_at is not null. If the requested id does not correspond to an
   * available record, a not-found response should be produced.
   *
   * The underlying relationships include community_platform_communities
   * referencing the category; however, this endpoint returns only the category
   * entity. Validation ensures the identifier format is correct and that the
   * record exists and is eligible for return. Error handling should
   * differentiate invalid identifiers from valid-but-missing records, and avoid
   * leaking internal details.
   *
   * @param connection
   * @param categoryId Unique identifier of the category (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":categoryId")
  public async at(
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCategory> {
    try {
      return await getcommunityPlatformCategoriesCategoryId({
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
