import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchcommunityPlatformCommunities } from "../../../providers/patchcommunityPlatformCommunities";
import { getcommunityPlatformCommunitiesCommunityId } from "../../../providers/getcommunityPlatformCommunitiesCommunityId";

import { IPageICommunityPlatformCommunity } from "../../../api/structures/IPageICommunityPlatformCommunity";
import { ICommunityPlatformCommunity } from "../../../api/structures/ICommunityPlatformCommunity";

@Controller("/communityPlatform/communities")
export class CommunityplatformCommunitiesController {
  /**
   * Search and paginate communities from Prisma table
   * community_platform_communities for public discovery.
   *
   * This operation lists community records from community_platform_communities
   * for public discovery and navigation. The Prisma schema describes
   * communities with an immutable unique name, optional description, optional
   * logo and banner URIs, a required category (via
   * community_platform_categories), an owner reference
   * (community_platform_users), last_active_at, disabled_at for administrative
   * disablement, and lifecycle timestamps. Records with a non-null deleted_at
   * are considered removed from active views and should be excluded from
   * discovery responses. When disabled_at is set, communities should be hidden
   * from promotion surfaces per schema note, which informs filtering behavior
   * for general listings.
   *
   * This endpoint is public read and does not require authentication. It
   * enables search and exploration scenarios: free-text search on
   * name/description, category filtering by community_platform_category_id or
   * business code, and sorting. Common sorts include Newest (created_at
   * descending with stable tie-breaking) and activity-based ordering
   * (last_active_at). Name-based sorting can support alphabetical ordering for
   * browse views. The request body ICommunityPlatformCommunity.IRequest conveys
   * filters and pagination (page, limit), and sort directives with explicit
   * direction.
   *
   * The response is a paginated container
   * IPageICommunityPlatformCommunity.ISummary, returning essential fields for
   * list rendering: id, immutable name, category linkage (id/code/name if
   * denormalized in DTO), optional description and logo/banner URIs, member
   * count if included by view composition, and timestamps needed for sorting
   * (created_at, last_active_at). This list endpoint pairs with GET
   * /communities/{communityId} for detail screens and with other feed endpoints
   * for posts within a community.
   *
   * @param connection
   * @param body Community search filters, sorting, and pagination parameters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPlatformCommunity.IRequest,
  ): Promise<IPageICommunityPlatformCommunity.ISummary> {
    try {
      return await patchcommunityPlatformCommunities({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific community (community_platform_communities) by ID for public
   * detail view.
   *
   * This read operation fetches a specific community from
   * community_platform_communities using its id (UUID). Per schema comments, a
   * community has an immutable unique name and optional metadata assets,
   * belongs to a category in community_platform_categories, and references an
   * owner in community_platform_users. It also tracks last_active_at for
   * display and sorting, disabled_at to indicate administrative disablement,
   * and created_at/updated_at timestamps. Records where deleted_at is non-null
   * are considered removed from active use; standard behavior for public detail
   * retrieval is to return a not-found outcome for such records.
   *
   * The endpoint is public read and requires no authentication. It supports
   * community detail pages that display identity and metadata. For community
   * rules, the system stores an ordered list in
   * community_platform_community_rules with order_index and text; clients may
   * call a separate endpoint to fetch them or receive them pre-composed
   * depending on DTO design. This operation does not modify any state and thus
   * returns data without side effects.
   *
   * Typical errors include not found when the identifier does not match an
   * available community and visibility constraints when disabled_at is set
   * (e.g., detail may remain accessible while promotion surfaces hide it
   * depending on product policy). This endpoint is commonly used with the
   * list/search endpoint PATCH /communities and downstream post list endpoints
   * within the community.
   *
   * @param connection
   * @param communityId Unique identifier of the target community (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":communityId")
  public async at(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommunity> {
    try {
      return await getcommunityPlatformCommunitiesCommunityId({
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
