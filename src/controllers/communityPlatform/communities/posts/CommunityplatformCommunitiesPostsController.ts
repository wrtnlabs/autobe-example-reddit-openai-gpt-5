import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformCommunitiesCommunityNamePosts } from "../../../../providers/patchCommunityPlatformCommunitiesCommunityNamePosts";

import { IPageICommunityPlatformPost } from "../../../../api/structures/IPageICommunityPlatformPost";
import { ICommunityPlatformPost } from "../../../../api/structures/ICommunityPlatformPost";

@Controller("/communityPlatform/communities/:communityName/posts")
export class CommunityplatformCommunitiesPostsController {
  /**
   * Search and paginate community posts using community_platform_posts (with
   * votes for Top).
   *
   * Provide a paginated, sortable list of posts for the target community. In
   * the Prisma schema, community_platform_posts contains title, body,
   * author_display_name, created_at, and updated_at, as well as foreign keys to
   * community_platform_communities (community scope) and
   * community_platform_users (author). This operation filters by the target
   * community resolved from {communityName} and excludes posts that are not
   * visible by checking deleted_at.
   *
   * Security considerations: Reading is public; no authentication is required
   * to fetch community posts. However, if the client supplies an authenticated
   * context, additional personalization fields like myVote may be included by
   * application logic using community_platform_post_votes for the calling
   * user.
   *
   * Sorting and tie-breakers: When sort=newest, order by created_at descending
   * and break ties by id descending as per deterministic rules. When sort=top,
   * compute score from community_platform_post_votes (sum of value), order by
   * score descending; if scores are equal, order by created_at descending; if
   * still equal, order by id descending. Pagination cursors must encode the
   * active sort’s ordering tuple to ensure stable continuation without
   * duplicates or omissions.
   *
   * Validation and business rules: The request body
   * ICommunityPlatformPost.IRequest includes sort, limit (default 20), and an
   * opaque cursor string. Implementations should validate the community exists
   * (community_platform_communities.name_key) and is visible. Title/body length
   * constraints are enforced at creation/update time, not here.
   *
   * Related operations: Use GET /communities/{communityName} for the
   * community’s details and rules, and GET /posts/{postId} for individual post
   * detail. Home feed and Global Latest are separate endpoints with their own
   * scopes.
   *
   * Error handling: If the community is not found or not visible, return an
   * appropriate not-found response. Transient failures should return the
   * platform’s standardized temporary error message and allow retry.
   *
   * @param connection
   * @param communityName Immutable community name used to resolve
   *   community_platform_communities (application normalizes to name_key).
   * @param body Search and pagination parameters: { sort: "newest"|"top",
   *   cursor?: string, limit?: number (default 20) }. Cursor encodes the active
   *   sort’s boundary tuple.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("communityName")
    communityName: string &
      tags.MinLength<3> &
      tags.MaxLength<30> &
      tags.Pattern<"^[A-Za-z0-9](?:[A-Za-z0-9_-]*[A-Za-z0-9])$">,
    @TypedBody()
    body: ICommunityPlatformPost.IRequest,
  ): Promise<IPageICommunityPlatformPost.ISummary> {
    try {
      return await patchCommunityPlatformCommunitiesCommunityNamePosts({
        communityName,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
