import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchcommunityPlatformSystemAdminAdminActions } from "../../../../providers/patchcommunityPlatformSystemAdminAdminActions";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";
import { getcommunityPlatformSystemAdminAdminActionsAdminActionId } from "../../../../providers/getcommunityPlatformSystemAdminAdminActionsAdminActionId";

import { IPageICommunityPlatformAdminAction } from "../../../../api/structures/IPageICommunityPlatformAdminAction";
import { ICommunityPlatformAdminAction } from "../../../../api/structures/ICommunityPlatformAdminAction";

@Controller("/communityPlatform/systemAdmin/adminActions")
export class CommunityplatformSystemadminAdminactionsController {
  /**
   * List administrative actions from community_platform_admin_actions.
   *
   * List administrative action records from community_platform_admin_actions.
   * The schema captures actor_user_id, optional target identifiers
   * (target_community_id, target_post_id, target_comment_id), a canonical
   * action string (e.g., "disable_community", "delete_post", "remove_comment"),
   * and optional reason, ip, and user_agent metadata. Time-based filtering and
   * indices on action/targets support efficient queries.
   *
   * Security and permissions: Only administrators may access this endpoint;
   * enforce role checks so non-administrative callers are denied. The operation
   * is read-only and is intended for audit and compliance oversight.
   *
   * Entity relationships and behavior: Each record links to an admin user
   * (community_platform_users.id) and may reference a community, post, or
   * comment. Providers may enrich summaries with actor usernames or resource
   * labels while respecting privacy constraints. Records where deleted_at is
   * set should be excluded from standard reads.
   *
   * Validation and related operations: The request body may include pagination
   * controls, sort options, action filters, actor filters, and date ranges.
   * Typical ordering is created_at descending. Use GET
   * /adminActions/{adminActionId} to retrieve an individual snapshot when
   * detailed review is required.
   *
   * @param connection
   * @param body Search criteria, filters, and pagination settings for
   *   administrative actions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: ICommunityPlatformAdminAction.IRequest,
  ): Promise<IPageICommunityPlatformAdminAction.ISummary> {
    try {
      return await patchcommunityPlatformSystemAdminAdminActions({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific administrative action (community_platform_admin_actions) by
   * ID.
   *
   * Fetch one administrative action record by ID from
   * community_platform_admin_actions. Fields include actor_user_id (admin who
   * performed the action), optional target_community_id, target_post_id,
   * target_comment_id, canonical action string, optional reason text, ip,
   * user_agent, and created_at/updated_at timestamps. The record is an
   * immutable snapshot designed for audit, investigation, and compliance.
   *
   * Security and permissions: Administrator-only read operation. Provider logic
   * must ensure only authorized callers can retrieve these records; non-admin
   * requests should be denied.
   *
   * Validation and related operations: If the provided adminActionId does not
   * correspond to an existing record, return a not-found response. For listing
   * and filtering needs, use PATCH /adminActions.
   *
   * @param connection
   * @param adminActionId Unique administrative action ID to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":adminActionId")
  public async at(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedParam("adminActionId")
    adminActionId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformAdminAction> {
    try {
      return await getcommunityPlatformSystemAdminAdminActionsAdminActionId({
        systemAdmin,
        adminActionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
