import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformSiteAdminSiteAdmins } from "../../../../providers/patchCommunityPlatformSiteAdminSiteAdmins";
import { SiteadminAuth } from "../../../../decorators/SiteadminAuth";
import { SiteadminPayload } from "../../../../decorators/payload/SiteadminPayload";
import { getCommunityPlatformSiteAdminSiteAdminsSiteAdminId } from "../../../../providers/getCommunityPlatformSiteAdminSiteAdminsSiteAdminId";

import { IPageICommunityPlatformSiteAdmin } from "../../../../api/structures/IPageICommunityPlatformSiteAdmin";
import { ICommunityPlatformSiteAdmin } from "../../../../api/structures/ICommunityPlatformSiteAdmin";

@Controller("/communityPlatform/siteAdmin/siteAdmins")
export class CommunityplatformSiteadminSiteadminsController {
  /**
   * List/search site administrator assignments (table:
   * community_platform_siteadmins).
   *
   * Retrieve a paginated list of site administrator assignments from the
   * community_platform_siteadmins table. Per Prisma schema comments, this model
   * grants administrative privileges to a community_platform_users account and
   * records audit timestamps: id (PK), community_platform_user_id (FK),
   * granted_at, optional revoked_at, created_at, updated_at, and deleted_at
   * (nullable). A unique constraint on community_platform_user_id ensures a
   * single assignment record per user (revocation tracked by updating
   * revoked_at).
   *
   * Security and authorization: Only privileged administrators should access
   * this listing. The endpoint requires siteAdmin role. By default, return only
   * currently visible rows (e.g., where deleted_at is null). Clients may filter
   * by active assignments (revoked_at is null) or include historical records by
   * specifying filters defined in the request DTO.
   *
   * Sorting and pagination: The default sort is granted_at descending, with a
   * deterministic tie-breaker on id descending. Cursor-based pagination uses
   * the last item’s (granted_at, id) tuple to continue the sequence without
   * overlap or omission, aligned with platform-wide pagination rules.
   *
   * Related operations: Use GET
   * /communityPlatform/siteAdmin/siteAdmins/{siteAdminId} when a single
   * assignment’s detail is needed. Role-granting and revocation actions are
   * outside the scope of this read API and are handled by separate
   * administrative workflows.
   *
   * Error handling: Invalid filters return 400. Authentication/authorization
   * failures return 401/403. Transient backend conditions return a recoverable
   * error message.
   *
   * @param connection
   * @param body Search criteria, sorting, and pagination for site admin
   *   assignments.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @SiteadminAuth()
    siteAdmin: SiteadminPayload,
    @TypedBody()
    body: ICommunityPlatformSiteAdmin.IRequest,
  ): Promise<IPageICommunityPlatformSiteAdmin.ISummary> {
    try {
      return await patchCommunityPlatformSiteAdminSiteAdmins({
        siteAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a site administrator assignment by id (table:
   * community_platform_siteadmins).
   *
   * Fetch one site administrator assignment by id from
   * community_platform_siteadmins. The Prisma schema defines: id (PK),
   * community_platform_user_id (FK to community_platform_users), granted_at
   * (when admin privileges were granted), optional revoked_at (revocation
   * time), created_at/updated_at for audit, and a nullable deleted_at flag used
   * to hide removed records. The FK relation cascade behavior ensures
   * referential integrity with the owning user.
   *
   * Security: Access requires siteAdmin privileges. Records with deleted_at set
   * are typically hidden; this endpoint is read-only and does not alter
   * privileges.
   *
   * Behavior and errors: Return 404 if the id is not found or is hidden by
   * policy. Return 400 for invalid UUID formats. Return 401/403 for
   * authentication/authorization failures. Temporary failures return a
   * recoverable error response.
   *
   * @param connection
   * @param siteAdminId Target site administrator assignment’s UUID.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":siteAdminId")
  public async at(
    @SiteadminAuth()
    siteAdmin: SiteadminPayload,
    @TypedParam("siteAdminId")
    siteAdminId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformSiteAdmin> {
    try {
      return await getCommunityPlatformSiteAdminSiteAdminsSiteAdminId({
        siteAdmin,
        siteAdminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
