import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchcommunityPlatformPostsPostIdHistory } from "../../../../providers/patchcommunityPlatformPostsPostIdHistory";
import { getcommunityPlatformPostsPostIdHistoryHistoryId } from "../../../../providers/getcommunityPlatformPostsPostIdHistoryHistoryId";

import { IPageICommunityPlatformPostSnapshot } from "../../../../api/structures/IPageICommunityPlatformPostSnapshot";
import { ICommunityPlatformPostSnapshot } from "../../../../api/structures/ICommunityPlatformPostSnapshot";

@Controller("/communityPlatform/posts/:postId/history")
export class CommunityplatformPostsHistoryController {
  /**
   * List post snapshots from community_platform_post_snapshots for a post.
   *
   * This operation lists snapshots from community_platform_post_snapshots for
   * the given postId. The schema defines id (UUID), community_platform_post_id
   * (UUID), editor_user_id (UUID, optional), title, body, author_display_name
   * (optional), created_at (snapshot time), updated_at, and deleted_at.
   * Snapshots are append-only records reflecting the post’s mutable fields at
   * edit time, thus serving as an immutable audit trail of content changes. The
   * operation returns snapshots scoped to the target post.
   *
   * Security: reading history is a public capability for public content in this
   * platform. No authentication is required for read, but upstream layers may
   * filter visibility in case of post removal or community policy. The endpoint
   * should never allow creation, modification, or deletion of snapshots, as
   * those are system-generated when post edits occur.
   *
   * Relationships: community_platform_post_snapshots rows reference
   * community_platform_posts (via community_platform_post_id) and optionally
   * community_platform_users as editor_user_id. The list should support
   * pagination and sorting. Reasonable defaults include ordering by created_at
   * descending to show newest edits first, with tie-breaking by identifier when
   * timestamps are equal.
   *
   * Validation and behavior: reject requests for non-existent posts; if the
   * post or its community is unavailable, the list should be empty or handled
   * by business rules. Errors include invalid postId format, missing post, or
   * access constraints imposed by higher layers.
   *
   * @param connection
   * @param postId Source post’s ID
   * @param body Search, filter, sort, and pagination parameters for listing
   *   snapshots
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformPostSnapshot.IRequest,
  ): Promise<IPageICommunityPlatformPostSnapshot> {
    try {
      return await patchcommunityPlatformPostsPostIdHistory({
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific post snapshot (community_platform_post_snapshots).
   *
   * This operation retrieves one snapshot record from
   * community_platform_post_snapshots using both the parent postId context and
   * the specific historyId (snapshot id). The Prisma schema documents the
   * snapshot fields: id (UUID), community_platform_post_id (UUID),
   * editor_user_id (UUID, optional), title, body, author_display_name
   * (optional), created_at (snapshot time), updated_at, and deleted_at. The
   * record represents a point-in-time state of a post’s mutable fields and is
   * append-only for audit purposes.
   *
   * Security: reading snapshot history is a public capability for public
   * content; no authentication is required. Access control or filtering for
   * removed content may be applied by upstream business rules. This operation
   * is strictly read-only and never modifies snapshot data.
   *
   * Relationships: each snapshot references community_platform_posts
   * (community_platform_post_id) and optionally community_platform_users
   * (editor_user_id). The controller/provider should verify that the requested
   * snapshot belongs to the specified postId to prevent cross-resource access.
   * Errors include not found for either the post or the history record, invalid
   * identifiers, or visibility constraints.
   *
   * @param connection
   * @param postId Source post’s ID
   * @param historyId Snapshot ID to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":historyId")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("historyId")
    historyId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformPostSnapshot> {
    try {
      return await getcommunityPlatformPostsPostIdHistoryHistoryId({
        postId,
        historyId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
