import { Controller } from "@nestjs/common";
import { TypedRoute } from "@nestia/core";
import typia from "typia";
import { getCommunityPlatformPostsGlobalLatest } from "../../../../providers/getCommunityPlatformPostsGlobalLatest";

import { ICommunityPlatformPost } from "../../../../api/structures/ICommunityPlatformPost";

@Controller("/communityPlatform/posts/globalLatest")
export class CommunityplatformPostsGloballatestController {
  /**
   * Fetch exactly 10 newest posts (Newest by created_at, id) from
   * community_platform_posts for Global Latest.
   *
   * Purpose and overview: Return a compact, fixed-size collection of the 10
   * most recent posts sitewide to populate the Home right sidebar. The
   * underlying model is community_platform_posts with key columns created_at
   * (for ordering) and id (for final tie-breaking), plus title and optional
   * author_display_name. Only active records (deleted_at is null) are
   * eligible.
   *
   * Security considerations: This is a public read endpoint; no authentication
   * is required. It must not leak non-public content. Membership status does
   * not filter results, and administrative roles are irrelevant for access.
   *
   * Ordering and limits: Apply deterministic Newest ordering defined by
   * created_at DESC with ties broken by id DESC. Return exactly 10 items with
   * no pagination or cursor support. Newer content can appear on subsequent
   * refreshes as expected.
   *
   * Relationships: While the response may include minimal community identity
   * for display (community_platform_communities.name, optional logo_uri), this
   * endpoint does not modify any data. Voting and comment aggregates (from
   * community_platform_post_votes and community_platform_comments) may be
   * included as derived read-only fields per the response schema but are not
   * persisted by this operation.
   *
   * Error handling: Temporary errors should return a transient failure
   * response. If no eligible posts exist, return an empty data list with a
   * well-formed payload.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(): Promise<ICommunityPlatformPost.IGlobalLatest> {
    try {
      return await getCommunityPlatformPostsGlobalLatest();
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
