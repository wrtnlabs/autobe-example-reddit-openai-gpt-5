import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchcommunityPlatformPostsPostIdComments } from "../../../../providers/patchcommunityPlatformPostsPostIdComments";

import { IPageICommunityPlatformComment } from "../../../../api/structures/IPageICommunityPlatformComment";
import { ICommunityPlatformComment } from "../../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/posts/:postId/comments")
export class CommunityplatformPostsCommentsController {
  /**
   * List/search comments for a post from community_platform_comments.
   *
   * Retrieve a paginated list of comments for a given post from the
   * community_platform_comments model. The schema defines key fields including
   * id, community_platform_post_id (required, relates to
   * community_platform_posts), community_platform_user_id (author), optional
   * parent_id for nesting, content (plain text), created_at/updated_at
   * timestamps, and a deleted_at column used to mark removed comments. This
   * operation focuses on reading comments under a single post, with optional
   * filtering to fetch only top-level comments (parent_id = null) or only
   * replies to a particular parent comment.
   *
   * Security and permissions: reading public comments is open to everyone. No
   * authentication is required. Author-guard rules affect edit/delete
   * operations but not this read operation. Comments marked removed (deleted_at
   * not null) must not appear in normal results.
   *
   * Relationships and query constraints: the provided postId must match
   * community_platform_comments.community_platform_post_id. If a parentId
   * filter is provided in the request body, it must reference a comment
   * belonging to the same post. Sorting follows business rules for comments:
   * Newest (created_at descending, tie-break by larger identifier when
   * timestamps match). Pagination returns 20 per page by default, with page and
   * pageSize controls and opaque cursor support if the implementation chooses
   * to offer it.
   *
   * Validation and error behavior: if postId is not a valid UUID, the request
   * is rejected. If parentId is provided but does not belong to the same post,
   * return a validation error. When page parameters are out of bounds or
   * malformed, return a 400 with an explanatory message. This operation pairs
   * with GET /comments/{commentId} for detail and POST /posts/{postId}/comments
   * for creation.
   *
   * @param connection
   * @param postId Target postâ€™s ID to list comments for
   * @param body Search and pagination parameters for listing comments under a
   *   post (filters like parentId, top-level only, sort, pagination)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformComment.IRequest,
  ): Promise<IPageICommunityPlatformComment> {
    try {
      return await patchcommunityPlatformPostsPostIdComments({
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
