import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformPostsPostIdComments } from "../../../../providers/patchCommunityPlatformPostsPostIdComments";

import { IPageICommunityPlatformComment } from "../../../../api/structures/IPageICommunityPlatformComment";
import { ICommunityPlatformComment } from "../../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/posts/:postId/comments")
export class CommunityplatformPostsCommentsController {
  /**
   * Paginated Newest-ordered comments for a post from
   * community_platform_comments.
   *
   * Purpose and overview: Retrieve a paginated, sorted collection of comments
   * for a post using the community_platform_comments model (columns include id,
   * community_platform_post_id, community_platform_user_id, parent_id, content,
   * created_at, updated_at, deleted_at). The response focuses on visible
   * comments (where deleted_at is null) and follows Newest ordering semantics.
   *
   * Security and access: Reading comments is public and requires no
   * authentication. Clients may optionally map the current user to per-item
   * vote state using community_platform_comment_votes, but this operation does
   * not require login to view. Content flagged as deleted (deleted_at not null)
   * should be omitted from the listing and from counts presented by clients.
   *
   * Ordering, pagination, and structure: Apply deterministic Newest ordering by
   * created_at DESC with ties broken by id DESC. The request supports
   * cursor-based pagination with a default size of 20. The cursor should encode
   * the last itemâ€™s ordering tuple to ensure stable continuation without
   * duplicates or gaps. Although comments support nesting via parent_id
   * (self-relation), this endpoint returns items for the target post; clients
   * may use parent_id to group replies into threads.
   *
   * Validation and related operations: Validate that the target post exists and
   * is visible; otherwise return a not-found result. Related endpoints include
   * post detail retrieval, comment creation/edit/delete, and vote state
   * toggles. Temporary errors should expose retry guidance without losing
   * client state.
   *
   * @param connection
   * @param postId Post identifier (UUID) whose comments are requested
   * @param body Query parameters for listing comments with Newest ordering and
   *   cursor pagination
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformComment.IRequest,
  ): Promise<IPageICommunityPlatformComment> {
    try {
      return await patchCommunityPlatformPostsPostIdComments({
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
