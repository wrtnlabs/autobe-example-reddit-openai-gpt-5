import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchcommunityPlatformPosts } from "../../../providers/patchcommunityPlatformPosts";
import { getcommunityPlatformPostsPostId } from "../../../providers/getcommunityPlatformPostsPostId";

import { IPageICommunityPlatformPost } from "../../../api/structures/IPageICommunityPlatformPost";
import { ICommunityPlatformPost } from "../../../api/structures/ICommunityPlatformPost";

@Controller("/communityPlatform/posts")
export class CommunityplatformPostsController {
  /**
   * List/search posts (community_platform_posts) with pagination and sorting.
   *
   * Return a filtered, paginated list of posts using the
   * community_platform_posts entity as the primary source. The Prisma schema
   * includes trigram indexes on title and body to support efficient text
   * matching. Business constraints from the requirements define the search and
   * sorting behavior: queries match words in titles and bodies; sorting
   * supports Newest (order by created_at descending; if equal, larger
   * identifier first) and Top (order by score derived from
   * community_platform_post_votes as up−down; ties by more recent created_at,
   * then by larger identifier). Items not publicly accessible (records with
   * non-null deleted_at) are excluded from results.
   *
   * Security and access: Reading posts is allowed for all users, including
   * guests. This endpoint is public and does not require authentication.
   * Sensitive author information is not exposed beyond what is stored for
   * presentation (e.g., author_display_name). Ownership rules do not limit read
   * access.
   *
   * Data model and relationships: Each post belongs to one community
   * (community_platform_communities) and optionally references an author
   * (community_platform_users, nullable to support anonymization). Votes are
   * stored in community_platform_post_votes and may be aggregated for Top
   * sorting. The request body (ICommunityPlatformPost.IRequest) should include
   * pagination controls, optional community filter, search query (length ≥ 2
   * characters to execute), and sort selector. The response returns a paginated
   * page of post summaries suitable for feeds and result lists.
   *
   * Related endpoints: Use GET /communityPlatform/posts/{postId} to retrieve a
   * specific post. Use POST /communityPlatform/communityMember/posts or POST
   * /communityPlatform/communityMember/communities/{communityId}/posts for
   * creation flows.
   *
   * @param connection
   * @param body Search, filter, sort, and pagination parameters for posts
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: ICommunityPlatformPost.IRequest,
  ): Promise<IPageICommunityPlatformPost.ISummary> {
    try {
      return await patchcommunityPlatformPosts({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single post (community_platform_posts) by ID.
   *
   * Retrieve a single post resource from community_platform_posts by its ID.
   * According to the Prisma schema, posts have required title and body,
   * optional author_display_name, belong to a community
   * (community_platform_community_id), and may have a nullable author_user_id
   * (to support anonymization). The operation returns full details for display
   * in post detail screens.
   *
   * Security and permissions: This is a public read operation; no
   * authentication is required. Records that are not publicly accessible (e.g.,
   * where deleted_at is set) are not returned. Ownership constraints do not
   * affect reads here, but apply to updates/deletes via separate endpoints.
   *
   * Data relationships and behavior: The post references
   * community_platform_communities and community_platform_users (author).
   * Voting and comments are separate entities and not directly altered by this
   * read. For Global Latest sidebar behavior or aggregated counters, clients
   * may rely on separate materialized views or related endpoints as needed.
   *
   * Related endpoints: Use PATCH /communityPlatform/posts for listing/searching
   * posts with pagination. Use POST /communityPlatform/communityMember/posts or
   * POST /communityPlatform/communityMember/communities/{communityId}/posts for
   * creation flows.
   *
   * @param connection
   * @param postId Unique identifier of the target post (UUID)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":postId")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformPost> {
    try {
      return await getcommunityPlatformPostsPostId({
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
