import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putAuthSiteAdminPassword } from "../../../../providers/putAuthSiteAdminPassword";
import { SiteadminAuth } from "../../../../decorators/SiteadminAuth";
import { SiteadminPayload } from "../../../../decorators/payload/SiteadminPayload";

import { ICommunityPlatformSiteAdmin } from "../../../../api/structures/ICommunityPlatformSiteAdmin";
import { ICommunityPlatformSiteAdminPassword } from "../../../../api/structures/ICommunityPlatformSiteAdminPassword";

@Controller("/auth/siteAdmin/password")
export class AuthSiteadminPasswordController {
  /**
   * Change the authenticated adminâ€™s password by updating password_hash in
   * community_platform_users.
   *
   * This endpoint allows an authenticated administrator to change their
   * password. The application must validate the current password against
   * community_platform_users.password_hash and, upon success, produce a new
   * password_hash for storage. The users table also tracks updated_at and
   * last_login_at; updated_at should be set to the current time when the
   * password is changed.
   *
   * No rows in community_platform_siteadmins are modified by this operation,
   * and the user identity in community_platform_users remains the same.
   * Depending on policy, existing sessions in community_platform_sessions may
   * be left intact or selectively revoked; this endpoint by itself does not
   * require session revocation unless specified by business rules.
   *
   * Security considerations include strong hashing of the new password, never
   * exposing password_hash, and ensuring deactivated accounts (deleted_at set)
   * cannot change credentials. Clients should re-authenticate seamlessly using
   * the long-lived session model or perform a fresh login if required by
   * policy.
   *
   * Related operations include /auth/siteAdmin/login for subsequent sign-in and
   * /auth/siteAdmin/logout or /auth/siteAdmin/logoutAll if session invalidation
   * is desired after the password change.
   *
   * @param connection
   * @param body Password change payload including current and new password
   *   values.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async changePassword(
    @SiteadminAuth()
    siteAdmin: SiteadminPayload,
    @TypedBody()
    body: ICommunityPlatformSiteAdminPassword.IUpdate,
  ): Promise<ICommunityPlatformSiteAdmin> {
    try {
      return await putAuthSiteAdminPassword({
        siteAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
