import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putauthCommunityMemberPassword } from "../../../../providers/putauthCommunityMemberPassword";
import { CommunitymemberAuth } from "../../../../decorators/CommunitymemberAuth";
import { CommunitymemberPayload } from "../../../../decorators/payload/CommunitymemberPayload";

import { ICommunityPlatformCommunityMember } from "../../../../api/structures/ICommunityPlatformCommunityMember";

@Controller("/auth/communityMember/password")
export class AuthCommunitymemberPasswordController {
  /**
   * Change password for communityMember by updating
   * community_platform_user_credentials.password_hash and password_updated_at.
   *
   * This endpoint allows an authenticated community member to change their
   * password. It reads the stored hash from
   * community_platform_user_credentials.password_hash for the account (linked
   * through community_platform_user_id) and validates the provided current
   * password. On success, it sets a new password_hash and updates
   * password_updated_at to reflect the rotation time. Timestamps created_at and
   * updated_at on the credential record are maintained by standard persistence
   * behavior.
   *
   * The operation is security-sensitive and may be paired with session hygiene:
   * implementers may optionally revoke existing sessions in
   * community_platform_sessions by setting revoked_at on other rows to reduce
   * risk. This is not mandatory in the schema but is a common policy aligned
   * with the available fields (refresh_token_hash, revoked_at, expires_at).
   *
   * This endpoint does not alter role assignments in
   * community_platform_communitymembers; it strictly manages credentials. It
   * also does not require or modify email_verified_at in
   * community_platform_user_credentials. The operation returns no body; success
   * indicates the password is updated.
   *
   * Related operations: POST /auth/communityMember/login authenticates using
   * the updated password; POST /auth/communityMember/logout and POST
   * /auth/communityMember/logoutAll manage sessions using
   * community_platform_sessions.
   *
   * @param connection
   * @param body Password change payload with current and new password.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async updatePassword(
    @CommunitymemberAuth()
    communityMember: CommunitymemberPayload,
    @TypedBody()
    body: ICommunityPlatformCommunityMember.IUpdate,
  ): Promise<void> {
    try {
      return await putauthCommunityMemberPassword({
        communityMember,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
