import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putauthSystemAdminPassword } from "../../../../providers/putauthSystemAdminPassword";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";

import { ICommunityPlatformSystemAdmin } from "../../../../api/structures/ICommunityPlatformSystemAdmin";
import { ICommunityPlatformSystemAdminPassword } from "../../../../api/structures/ICommunityPlatformSystemAdminPassword";

@Controller("/auth/systemAdmin/password")
export class AuthSystemadminPasswordController {
  /**
   * Update password_hash/password_updated_at in
   * community_platform_user_credentials; optionally rotate
   * community_platform_sessions.
   *
   * Purpose and function: Allows an authenticated systemAdmin to change their
   * password by validating the current secret against password_hash in
   * community_platform_user_credentials and persisting a new password_hash
   * along with password_updated_at.
   *
   * Implementation details: After verifying the current password, the service
   * writes the new password_hash and sets password_updated_at. Depending on
   * security policy, it may revoke other community_platform_sessions
   * (revoked_at) and either keep or replace the current session. If rotation is
   * requested, the endpoint can respond with updated tokens to avoid forcing a
   * disruptive re-login.
   *
   * Role-specific integration: Requires an authenticated systemAdmin and
   * affects only the callerâ€™s credentials; it does not modify other users.
   *
   * Security considerations: Plaintext passwords are never stored; only
   * password_hash is updated. Session revocation behavior is aligned with the
   * sessions schema fields revoked_at/expires_at.
   *
   * Related operations: If the user needs to terminate active devices, they can
   * call POST /auth/systemAdmin/logoutAll. If they lost access tokens but have
   * a refresh token, they should use POST /auth/systemAdmin/refresh.
   *
   * @param connection
   * @param body Current and new password along with optional flags for session
   *   rotation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async changePassword(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
    @TypedBody()
    body: ICommunityPlatformSystemAdminPassword.IUpdate,
  ): Promise<ICommunityPlatformSystemAdmin.IAuthorized> {
    try {
      return await putauthSystemAdminPassword({
        systemAdmin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
