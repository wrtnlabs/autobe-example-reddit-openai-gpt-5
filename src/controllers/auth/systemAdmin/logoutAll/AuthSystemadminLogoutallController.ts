import { Controller } from "@nestjs/common";
import { TypedRoute } from "@nestia/core";
import typia from "typia";
import { postauthSystemAdminLogoutAll } from "../../../../providers/postauthSystemAdminLogoutAll";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";

import { ICommunityPlatformSystemAdmin } from "../../../../api/structures/ICommunityPlatformSystemAdmin";

@Controller("/auth/systemAdmin/logoutAll")
export class AuthSystemadminLogoutallController {
  /**
   * Revoke all admin sessions by updating revoked_at across
   * community_platform_sessions for the user.
   *
   * Purpose and function: Revokes every active session belonging to the
   * authenticated system administrator by setting revoked_at across all
   * corresponding community_platform_sessions records.
   *
   * Implementation details: The provider queries all active sessions for
   * community_platform_user_id and marks them revoked atomically or
   * idempotently. updated_at is adjusted accordingly.
   *
   * Role-specific integration: Only the authenticated systemAdmin can revoke
   * their own sessions en masse.
   *
   * Security considerations: After completion, no refresh token for the admin
   * remains valid. Access tokens expire naturally according to their TTL.
   *
   * Related operations: Use POST /auth/systemAdmin/logout for current session
   * only, and PUT /auth/systemAdmin/password to rotate password_hash which
   * often implies revoking other sessions as well.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async signOutAll(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
  ): Promise<ICommunityPlatformSystemAdmin.ISignOutAll> {
    try {
      return await postauthSystemAdminLogoutAll({
        systemAdmin,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
