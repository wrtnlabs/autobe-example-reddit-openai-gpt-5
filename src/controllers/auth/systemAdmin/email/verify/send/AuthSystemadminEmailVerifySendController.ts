import { Controller } from "@nestjs/common";
import { TypedRoute } from "@nestia/core";
import typia from "typia";
import { postauthSystemAdminEmailVerifySend } from "../../../../../../providers/postauthSystemAdminEmailVerifySend";
import { SystemadminAuth } from "../../../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../../../decorators/payload/SystemadminPayload";

import { ICommunityPlatformSystemAdminEmailVerify } from "../../../../../../api/structures/ICommunityPlatformSystemAdminEmailVerify";

@Controller("/auth/systemAdmin/email/verify/send")
export class AuthSystemadminEmailVerifySendController {
  /**
   * Trigger verification email based on
   * community_platform_user_credentials.email when email_verified_at is null.
   *
   * Purpose and function: Initiates email verification for the authenticated
   * systemAdmin by sending a verification link to the address stored in
   * community_platform_user_credentials.email when email_verified_at is null.
   *
   * Implementation details: The provider checks email_verified_at and reads
   * email/email_normalized. It dispatches a verification message out of band
   * and returns an acknowledgment. No structural changes to credentials occur
   * yet.
   *
   * Role-specific integration: Requires the caller to be an authenticated
   * systemAdmin; this action affects only their own credentials record.
   *
   * Security considerations: The endpoint does not disclose whether an email is
   * already verified beyond the authenticated context and avoids leaking
   * information publicly. Any token associated with verification is handled by
   * the messaging layer; only email_verified_at is ultimately updated by the
   * confirmation endpoint.
   *
   * Related operations: Use POST /auth/systemAdmin/email/verify to confirm the
   * token and set email_verified_at.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async sendEmailVerification(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
  ): Promise<ICommunityPlatformSystemAdminEmailVerify.ISent> {
    try {
      return await postauthSystemAdminEmailVerifySend({
        systemAdmin,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
