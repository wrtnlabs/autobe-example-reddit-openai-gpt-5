import { Controller } from "@nestjs/common";
import { TypedRoute } from "@nestia/core";
import typia from "typia";
import { postauthSystemAdminLogout } from "../../../../providers/postauthSystemAdminLogout";
import { SystemadminAuth } from "../../../../decorators/SystemadminAuth";
import { SystemadminPayload } from "../../../../decorators/payload/SystemadminPayload";

import { ICommunityPlatformSystemAdmin } from "../../../../api/structures/ICommunityPlatformSystemAdmin";

@Controller("/auth/systemAdmin/logout")
export class AuthSystemadminLogoutController {
  /**
   * Revoke the current admin session by setting revoked_at in
   * community_platform_sessions.
   *
   * Purpose and function: Terminates the callerâ€™s current session by updating
   * revoked_at in community_platform_sessions so the refresh token can no
   * longer be used.
   *
   * Implementation details: The provider identifies the active session tied to
   * the authenticated admin and sets revoked_at. updated_at is also modified.
   *
   * Role-specific integration: Requires an authenticated systemAdmin context to
   * revoke only their own session.
   *
   * Security considerations: Only the session row is changed; no credentials or
   * other sessions are affected. This conforms to session revocation semantics
   * captured in the schema.
   *
   * Related operations: Use POST /auth/systemAdmin/logoutAll to revoke all
   * sessions for the admin, POST /auth/systemAdmin/refresh to renew an
   * unrevoked session, and PUT /auth/systemAdmin/password to rotate
   * password_hash if needed.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async signOut(
    @SystemadminAuth()
    systemAdmin: SystemadminPayload,
  ): Promise<ICommunityPlatformSystemAdmin.ISignOut> {
    try {
      return await postauthSystemAdminLogout({
        systemAdmin,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
