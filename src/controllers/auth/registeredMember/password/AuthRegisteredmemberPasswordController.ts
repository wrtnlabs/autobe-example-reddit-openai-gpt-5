import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { putAuthRegisteredMemberPassword } from "../../../../providers/putAuthRegisteredMemberPassword";
import { RegisteredmemberAuth } from "../../../../decorators/RegisteredmemberAuth";
import { RegisteredmemberPayload } from "../../../../decorators/payload/RegisteredmemberPayload";

import { ICommunityPlatformRegisteredMember } from "../../../../api/structures/ICommunityPlatformRegisteredMember";

@Controller("/auth/registeredMember/password")
export class AuthRegisteredmemberPasswordController {
  /**
   * Update password by writing a new password_hash in community_platform_users.
   *
   * This operation updates the memberâ€™s password by replacing password_hash in
   * community_platform_users after verifying the supplied current password. The
   * account is identified by the authenticated context
   * (community_platform_user_id). Upon success, updated_at should be set to the
   * current timestamp. Depending on security policy, the server may choose to
   * revoke other sessions by setting revoked_at in community_platform_sessions,
   * while keeping the current session valid or rotating its token.
   *
   * The endpoint does not modify identity fields such as email,
   * email_normalized, username, or username_normalized, and does not affect the
   * presence of the role assignment in community_platform_registeredmembers. It
   * strictly focuses on credential rotation in alignment with schema fields and
   * business requirements for long-lived sessions and smooth re-login.
   *
   * If the current password fails validation against the existing
   * password_hash, the operation should fail gracefully without changing any
   * data. On success, the client may receive refreshed authorization context if
   * token rotation is applied.
   *
   * @param connection
   * @param body Current and new password values for rotation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async updatePassword(
    @RegisteredmemberAuth()
    registeredMember: RegisteredmemberPayload,
    @TypedBody()
    body: ICommunityPlatformRegisteredMember.IUpdatePassword,
  ): Promise<ICommunityPlatformRegisteredMember.IUpdatePasswordResult> {
    try {
      return await putAuthRegisteredMemberPassword({
        registeredMember,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
