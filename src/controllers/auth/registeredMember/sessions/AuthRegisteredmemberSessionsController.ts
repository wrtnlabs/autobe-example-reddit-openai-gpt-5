import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteAuthRegisteredMemberSessionsSessionId } from "../../../../providers/deleteAuthRegisteredMemberSessionsSessionId";
import { RegisteredmemberAuth } from "../../../../decorators/RegisteredmemberAuth";
import { RegisteredmemberPayload } from "../../../../decorators/payload/RegisteredmemberPayload";

import { ICommunityPlatformRegisteredMember } from "../../../../api/structures/ICommunityPlatformRegisteredMember";

@Controller("/auth/registeredMember/sessions/:sessionId")
export class AuthRegisteredmemberSessionsController {
  /**
   * Revoke one session in community_platform_sessions by ID for the current
   * member.
   *
   * This operation revokes a specific session by ID for the authenticated
   * member. It operates on community_platform_sessions by locating the row with
   * id equal to the provided sessionId and verifying that its
   * community_platform_user_id matches the caller. If matched, the endpoint
   * sets revoked_at and updates updated_at for audit consistency. If the
   * session is already revoked or expired per expires_at, the operation is
   * treated as success to keep the behavior idempotent.
   *
   * The endpoint does not modify credential data in community_platform_users
   * and does not affect the member role assignment in
   * community_platform_registeredmembers. It can be used alongside session
   * listings in account management UIs to remove individual devices.
   *
   * If the session does not belong to the caller, the server should return a
   * permission error consistent with role-based access policies. Clients may
   * pair this with logoutAll to provide complete session hygiene tools.
   *
   * @param connection
   * @param sessionId Target sessionâ€™s ID (UUID) to revoke.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async revokeSession(
    @RegisteredmemberAuth()
    registeredMember: RegisteredmemberPayload,
    @TypedParam("sessionId")
    sessionId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformRegisteredMember.ISessionRevocationResult> {
    try {
      return await deleteAuthRegisteredMemberSessionsSessionId({
        registeredMember,
        sessionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
