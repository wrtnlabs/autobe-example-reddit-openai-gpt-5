import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformSiteAdminPassword } from "../../../../structures/ICommunityPlatformSiteAdminPassword";
import { ICommunityPlatformSiteAdmin } from "../../../../structures/ICommunityPlatformSiteAdmin";

/**
 * Change the authenticated adminâ€™s password by updating password_hash in
 * community_platform_users.
 *
 * This endpoint allows an authenticated administrator to change their password.
 * The application must validate the current password against
 * community_platform_users.password_hash and, upon success, produce a new
 * password_hash for storage. The users table also tracks updated_at and
 * last_login_at; updated_at should be set to the current time when the password
 * is changed.
 *
 * No rows in community_platform_siteadmins are modified by this operation, and
 * the user identity in community_platform_users remains the same. Depending on
 * policy, existing sessions in community_platform_sessions may be left intact
 * or selectively revoked; this endpoint by itself does not require session
 * revocation unless specified by business rules.
 *
 * Security considerations include strong hashing of the new password, never
 * exposing password_hash, and ensuring deactivated accounts (deleted_at set)
 * cannot change credentials. Clients should re-authenticate seamlessly using
 * the long-lived session model or perform a fresh login if required by policy.
 *
 * Related operations include /auth/siteAdmin/login for subsequent sign-in and
 * /auth/siteAdmin/logout or /auth/siteAdmin/logoutAll if session invalidation
 * is desired after the password change.
 *
 * @param props.connection
 * @param props.body Password change payload including current and new password
 *   values.
 * @path /auth/siteAdmin/password
 * @accessor api.functional.auth.siteAdmin.password.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /** Password change payload including current and new password values. */
    body: ICommunityPlatformSiteAdminPassword.IUpdate;
  };
  export type Body = ICommunityPlatformSiteAdminPassword.IUpdate;
  export type Response = ICommunityPlatformSiteAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/auth/siteAdmin/password",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/siteAdmin/password";
  export const random = (): ICommunityPlatformSiteAdmin =>
    typia.random<ICommunityPlatformSiteAdmin>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
