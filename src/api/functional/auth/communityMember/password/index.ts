import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityMember } from "../../../../structures/ICommunityPlatformCommunityMember";

/**
 * Change password for communityMember by updating
 * community_platform_user_credentials.password_hash and password_updated_at.
 *
 * This endpoint allows an authenticated community member to change their
 * password. It reads the stored hash from
 * community_platform_user_credentials.password_hash for the account (linked
 * through community_platform_user_id) and validates the provided current
 * password. On success, it sets a new password_hash and updates
 * password_updated_at to reflect the rotation time. Timestamps created_at and
 * updated_at on the credential record are maintained by standard persistence
 * behavior.
 *
 * The operation is security-sensitive and may be paired with session hygiene:
 * implementers may optionally revoke existing sessions in
 * community_platform_sessions by setting revoked_at on other rows to reduce
 * risk. This is not mandatory in the schema but is a common policy aligned with
 * the available fields (refresh_token_hash, revoked_at, expires_at).
 *
 * This endpoint does not alter role assignments in
 * community_platform_communitymembers; it strictly manages credentials. It also
 * does not require or modify email_verified_at in
 * community_platform_user_credentials. The operation returns no body; success
 * indicates the password is updated.
 *
 * Related operations: POST /auth/communityMember/login authenticates using the
 * updated password; POST /auth/communityMember/logout and POST
 * /auth/communityMember/logoutAll manage sessions using
 * community_platform_sessions.
 *
 * @param props.connection
 * @param props.body Password change payload with current and new password.
 * @path /auth/communityMember/password
 * @accessor api.functional.auth.communityMember.password.updatePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updatePassword(
  connection: IConnection,
  props: updatePassword.Props,
): Promise<void> {
  return true === connection.simulate
    ? updatePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updatePassword.METADATA,
          path: updatePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace updatePassword {
  export type Props = {
    /** Password change payload with current and new password. */
    body: ICommunityPlatformCommunityMember.IUpdate;
  };
  export type Body = ICommunityPlatformCommunityMember.IUpdate;

  export const METADATA = {
    method: "PUT",
    path: "/auth/communityMember/password",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/communityMember/password";
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: updatePassword.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updatePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
