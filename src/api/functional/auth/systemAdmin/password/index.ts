import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformSystemAdminPassword } from "../../../../structures/ICommunityPlatformSystemAdminPassword";
import { ICommunityPlatformSystemAdmin } from "../../../../structures/ICommunityPlatformSystemAdmin";

/**
 * Update password_hash/password_updated_at in
 * community_platform_user_credentials; optionally rotate
 * community_platform_sessions.
 *
 * Purpose and function: Allows an authenticated systemAdmin to change their
 * password by validating the current secret against password_hash in
 * community_platform_user_credentials and persisting a new password_hash along
 * with password_updated_at.
 *
 * Implementation details: After verifying the current password, the service
 * writes the new password_hash and sets password_updated_at. Depending on
 * security policy, it may revoke other community_platform_sessions (revoked_at)
 * and either keep or replace the current session. If rotation is requested, the
 * endpoint can respond with updated tokens to avoid forcing a disruptive
 * re-login.
 *
 * Role-specific integration: Requires an authenticated systemAdmin and affects
 * only the callerâ€™s credentials; it does not modify other users.
 *
 * Security considerations: Plaintext passwords are never stored; only
 * password_hash is updated. Session revocation behavior is aligned with the
 * sessions schema fields revoked_at/expires_at.
 *
 * Related operations: If the user needs to terminate active devices, they can
 * call POST /auth/systemAdmin/logoutAll. If they lost access tokens but have a
 * refresh token, they should use POST /auth/systemAdmin/refresh.
 *
 * @param props.connection
 * @param props.body Current and new password along with optional flags for
 *   session rotation.
 * @path /auth/systemAdmin/password
 * @accessor api.functional.auth.systemAdmin.password.changePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function changePassword(
  connection: IConnection,
  props: changePassword.Props,
): Promise<changePassword.Response> {
  return true === connection.simulate
    ? changePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...changePassword.METADATA,
          path: changePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace changePassword {
  export type Props = {
    /**
     * Current and new password along with optional flags for session
     * rotation.
     */
    body: ICommunityPlatformSystemAdminPassword.IUpdate;
  };
  export type Body = ICommunityPlatformSystemAdminPassword.IUpdate;
  export type Response = ICommunityPlatformSystemAdmin.IAuthorized;

  export const METADATA = {
    method: "PUT",
    path: "/auth/systemAdmin/password",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/systemAdmin/password";
  export const random = (): ICommunityPlatformSystemAdmin.IAuthorized =>
    typia.random<ICommunityPlatformSystemAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: changePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: changePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
