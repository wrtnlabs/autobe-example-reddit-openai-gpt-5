import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { ICommunityPlatformSystemAdmin } from "../../../../structures/ICommunityPlatformSystemAdmin";

/**
 * Revoke the current admin session by setting revoked_at in
 * community_platform_sessions.
 *
 * Purpose and function: Terminates the callerâ€™s current session by updating
 * revoked_at in community_platform_sessions so the refresh token can no longer
 * be used.
 *
 * Implementation details: The provider identifies the active session tied to
 * the authenticated admin and sets revoked_at. updated_at is also modified.
 *
 * Role-specific integration: Requires an authenticated systemAdmin context to
 * revoke only their own session.
 *
 * Security considerations: Only the session row is changed; no credentials or
 * other sessions are affected. This conforms to session revocation semantics
 * captured in the schema.
 *
 * Related operations: Use POST /auth/systemAdmin/logoutAll to revoke all
 * sessions for the admin, POST /auth/systemAdmin/refresh to renew an unrevoked
 * session, and PUT /auth/systemAdmin/password to rotate password_hash if
 * needed.
 *
 * @param props.connection
 * @path /auth/systemAdmin/logout
 * @accessor api.functional.auth.systemAdmin.logout.signOut
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function signOut(
  connection: IConnection,
): Promise<signOut.Response> {
  return true === connection.simulate
    ? signOut.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...signOut.METADATA,
          path: signOut.path(),
          status: null,
        },
      );
}
export namespace signOut {
  export type Response = ICommunityPlatformSystemAdmin.ISignOut;

  export const METADATA = {
    method: "POST",
    path: "/auth/systemAdmin/logout",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/systemAdmin/logout";
  export const random = (): ICommunityPlatformSystemAdmin.ISignOut =>
    typia.random<ICommunityPlatformSystemAdmin.ISignOut>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
