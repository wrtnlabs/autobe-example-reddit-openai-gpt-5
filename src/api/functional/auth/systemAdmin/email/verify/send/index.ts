import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { ICommunityPlatformSystemAdminEmailVerify } from "../../../../../../structures/ICommunityPlatformSystemAdminEmailVerify";

/**
 * Trigger verification email based on community_platform_user_credentials.email
 * when email_verified_at is null.
 *
 * Purpose and function: Initiates email verification for the authenticated
 * systemAdmin by sending a verification link to the address stored in
 * community_platform_user_credentials.email when email_verified_at is null.
 *
 * Implementation details: The provider checks email_verified_at and reads
 * email/email_normalized. It dispatches a verification message out of band and
 * returns an acknowledgment. No structural changes to credentials occur yet.
 *
 * Role-specific integration: Requires the caller to be an authenticated
 * systemAdmin; this action affects only their own credentials record.
 *
 * Security considerations: The endpoint does not disclose whether an email is
 * already verified beyond the authenticated context and avoids leaking
 * information publicly. Any token associated with verification is handled by
 * the messaging layer; only email_verified_at is ultimately updated by the
 * confirmation endpoint.
 *
 * Related operations: Use POST /auth/systemAdmin/email/verify to confirm the
 * token and set email_verified_at.
 *
 * @param props.connection
 * @path /auth/systemAdmin/email/verify/send
 * @accessor api.functional.auth.systemAdmin.email.verify.send.sendEmailVerification
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function sendEmailVerification(
  connection: IConnection,
): Promise<sendEmailVerification.Response> {
  return true === connection.simulate
    ? sendEmailVerification.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...sendEmailVerification.METADATA,
          path: sendEmailVerification.path(),
          status: null,
        },
      );
}
export namespace sendEmailVerification {
  export type Response = ICommunityPlatformSystemAdminEmailVerify.ISent;

  export const METADATA = {
    method: "POST",
    path: "/auth/systemAdmin/email/verify/send",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/systemAdmin/email/verify/send";
  export const random = (): ICommunityPlatformSystemAdminEmailVerify.ISent =>
    typia.random<ICommunityPlatformSystemAdminEmailVerify.ISent>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
