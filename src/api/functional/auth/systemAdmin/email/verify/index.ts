import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformSystemAdminEmailVerify } from "../../../../../structures/ICommunityPlatformSystemAdminEmailVerify";
export * as send from "./send/index";

/**
 * Set email_verified_at on community_platform_user_credentials after verifying
 * the provided token.
 *
 * Purpose and function: Marks the admin’s email as verified by setting
 * email_verified_at on community_platform_user_credentials after validating the
 * provided verification token.
 *
 * Implementation details: The provider decodes/validates the token, locates the
 * relevant credentials record (email/email_normalized), and sets
 * email_verified_at. No changes are made to community_platform_users or
 * community_platform_sessions.
 *
 * Role-specific integration: Public confirmation does not require an
 * authenticated context because the token itself provides authorization for
 * this action; it pertains to a systemAdmin’s credentials record.
 *
 * Security considerations: Tokens must be single-use and time-limited; the
 * endpoint will refuse invalid or expired tokens and avoid leaking existence of
 * accounts beyond success/failure semantics.
 *
 * Related operations: If the user requires a new token, they should use POST
 * /auth/systemAdmin/email/verify/send after logging in.
 *
 * @param props.connection
 * @param props.body Verification token payload.
 * @path /auth/systemAdmin/email/verify
 * @accessor api.functional.auth.systemAdmin.email.verify.verifyEmail
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /** Verification token payload. */
    body: ICommunityPlatformSystemAdminEmailVerify.IRequest;
  };
  export type Body = ICommunityPlatformSystemAdminEmailVerify.IRequest;
  export type Response = ICommunityPlatformSystemAdminEmailVerify.IResponse;

  export const METADATA = {
    method: "POST",
    path: "/auth/systemAdmin/email/verify",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/systemAdmin/email/verify";
  export const random =
    (): ICommunityPlatformSystemAdminEmailVerify.IResponse =>
      typia.random<ICommunityPlatformSystemAdminEmailVerify.IResponse>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
