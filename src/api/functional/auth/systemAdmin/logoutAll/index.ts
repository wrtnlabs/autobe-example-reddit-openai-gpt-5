import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { ICommunityPlatformSystemAdmin } from "../../../../structures/ICommunityPlatformSystemAdmin";

/**
 * Revoke all admin sessions by updating revoked_at across
 * community_platform_sessions for the user.
 *
 * Purpose and function: Revokes every active session belonging to the
 * authenticated system administrator by setting revoked_at across all
 * corresponding community_platform_sessions records.
 *
 * Implementation details: The provider queries all active sessions for
 * community_platform_user_id and marks them revoked atomically or idempotently.
 * updated_at is adjusted accordingly.
 *
 * Role-specific integration: Only the authenticated systemAdmin can revoke
 * their own sessions en masse.
 *
 * Security considerations: After completion, no refresh token for the admin
 * remains valid. Access tokens expire naturally according to their TTL.
 *
 * Related operations: Use POST /auth/systemAdmin/logout for current session
 * only, and PUT /auth/systemAdmin/password to rotate password_hash which often
 * implies revoking other sessions as well.
 *
 * @param props.connection
 * @path /auth/systemAdmin/logoutAll
 * @accessor api.functional.auth.systemAdmin.logoutAll.signOutAll
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function signOutAll(
  connection: IConnection,
): Promise<signOutAll.Response> {
  return true === connection.simulate
    ? signOutAll.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...signOutAll.METADATA,
          path: signOutAll.path(),
          status: null,
        },
      );
}
export namespace signOutAll {
  export type Response = ICommunityPlatformSystemAdmin.ISignOutAll;

  export const METADATA = {
    method: "POST",
    path: "/auth/systemAdmin/logoutAll",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/systemAdmin/logoutAll";
  export const random = (): ICommunityPlatformSystemAdmin.ISignOutAll =>
    typia.random<ICommunityPlatformSystemAdmin.ISignOutAll>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
