import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformRegisteredMember } from "../../../../structures/ICommunityPlatformRegisteredMember";

/**
 * Update password by writing a new password_hash in community_platform_users.
 *
 * This operation updates the memberâ€™s password by replacing password_hash in
 * community_platform_users after verifying the supplied current password. The
 * account is identified by the authenticated context
 * (community_platform_user_id). Upon success, updated_at should be set to the
 * current timestamp. Depending on security policy, the server may choose to
 * revoke other sessions by setting revoked_at in community_platform_sessions,
 * while keeping the current session valid or rotating its token.
 *
 * The endpoint does not modify identity fields such as email, email_normalized,
 * username, or username_normalized, and does not affect the presence of the
 * role assignment in community_platform_registeredmembers. It strictly focuses
 * on credential rotation in alignment with schema fields and business
 * requirements for long-lived sessions and smooth re-login.
 *
 * If the current password fails validation against the existing password_hash,
 * the operation should fail gracefully without changing any data. On success,
 * the client may receive refreshed authorization context if token rotation is
 * applied.
 *
 * @param props.connection
 * @param props.body Current and new password values for rotation.
 * @path /auth/registeredMember/password
 * @accessor api.functional.auth.registeredMember.password.updatePassword
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function updatePassword(
  connection: IConnection,
  props: updatePassword.Props,
): Promise<updatePassword.Response> {
  return true === connection.simulate
    ? updatePassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updatePassword.METADATA,
          path: updatePassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace updatePassword {
  export type Props = {
    /** Current and new password values for rotation. */
    body: ICommunityPlatformRegisteredMember.IUpdatePassword;
  };
  export type Body = ICommunityPlatformRegisteredMember.IUpdatePassword;
  export type Response =
    ICommunityPlatformRegisteredMember.IUpdatePasswordResult;

  export const METADATA = {
    method: "PUT",
    path: "/auth/registeredMember/password",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/registeredMember/password";
  export const random =
    (): ICommunityPlatformRegisteredMember.IUpdatePasswordResult =>
      typia.random<ICommunityPlatformRegisteredMember.IUpdatePasswordResult>();
  export const simulate = (
    connection: IConnection,
    props: updatePassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: updatePassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
