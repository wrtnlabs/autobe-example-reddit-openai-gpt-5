import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformRegisteredMember } from "../../../../structures/ICommunityPlatformRegisteredMember";

/**
 * Revoke one session in community_platform_sessions by ID for the current
 * member.
 *
 * This operation revokes a specific session by ID for the authenticated member.
 * It operates on community_platform_sessions by locating the row with id equal
 * to the provided sessionId and verifying that its community_platform_user_id
 * matches the caller. If matched, the endpoint sets revoked_at and updates
 * updated_at for audit consistency. If the session is already revoked or
 * expired per expires_at, the operation is treated as success to keep the
 * behavior idempotent.
 *
 * The endpoint does not modify credential data in community_platform_users and
 * does not affect the member role assignment in
 * community_platform_registeredmembers. It can be used alongside session
 * listings in account management UIs to remove individual devices.
 *
 * If the session does not belong to the caller, the server should return a
 * permission error consistent with role-based access policies. Clients may pair
 * this with logoutAll to provide complete session hygiene tools.
 *
 * @param props.connection
 * @param props.sessionId Target session’s ID (UUID) to revoke.
 * @path /auth/registeredMember/sessions/:sessionId
 * @accessor api.functional.auth.registeredMember.sessions.revokeSession
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function revokeSession(
  connection: IConnection,
  props: revokeSession.Props,
): Promise<revokeSession.Response> {
  return true === connection.simulate
    ? revokeSession.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...revokeSession.METADATA,
          path: revokeSession.path(props),
          status: null,
        },
      );
}
export namespace revokeSession {
  export type Props = {
    /** Target session’s ID (UUID) to revoke. */
    sessionId: string & tags.Format<"uuid">;
  };
  export type Response =
    ICommunityPlatformRegisteredMember.ISessionRevocationResult;

  export const METADATA = {
    method: "DELETE",
    path: "/auth/registeredMember/sessions/:sessionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/auth/registeredMember/sessions/${encodeURIComponent(props.sessionId ?? "null")}`;
  export const random =
    (): ICommunityPlatformRegisteredMember.ISessionRevocationResult =>
      typia.random<ICommunityPlatformRegisteredMember.ISessionRevocationResult>();
  export const simulate = (
    connection: IConnection,
    props: revokeSession.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: revokeSession.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("sessionId")(() => typia.assert(props.sessionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
