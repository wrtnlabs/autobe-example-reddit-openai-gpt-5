import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { ICommunityPlatformUser } from "../../../../structures/ICommunityPlatformUser";
export * as sessions from "./sessions/index";
export * as recentCommunities from "./recentCommunities/index";

/**
 * Get the authenticated user profile (community_platform_users).
 *
 * Fetch the current authenticated user’s profile based on the session context.
 * The primary data source is the community_platform_users table, which stores
 * account identity and profile basics including id (UUID), email/username (with
 * case-insensitive uniqueness enforced via email_normalized and
 * username_normalized), optional display_name, and audit timestamps created_at
 * and updated_at. The last_login_at column reflects the most recent successful
 * sign-in.
 *
 * Security and permissions: this endpoint requires an authenticated registered
 * member session. The response is scoped to the caller only; no cross-account
 * access is permitted. If the underlying user record has deleted_at populated,
 * the account is considered deactivated and should not be treated as an active
 * profile for write actions.
 *
 * Entity relationships: role assignment tables
 * community_platform_registeredmembers and community_platform_siteadmins are
 * related to community_platform_users for permission evaluation elsewhere.
 * While their raw rows are not required in this response, providers can derive
 * boolean flags (e.g., isRegisteredMember, isSiteAdmin) for client convenience
 * if included in the DTO type. This endpoint is read-only and does not write to
 * any tables.
 *
 * Validation and behavior: the provider should rely on the authenticated
 * session for user identity and should not accept external identifiers. Errors
 * should follow standardized copy for authentication failures (401 with “Please
 * sign in to continue.”).
 *
 * @param props.connection
 * @path /communityPlatform/registeredMember/me
 * @accessor api.functional.communityPlatform.registeredMember.me.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(connection: IConnection): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(),
          status: null,
        },
      );
}
export namespace at {
  export type Response = ICommunityPlatformUser;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/registeredMember/me",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/registeredMember/me";
  export const random = (): ICommunityPlatformUser =>
    typia.random<ICommunityPlatformUser>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
