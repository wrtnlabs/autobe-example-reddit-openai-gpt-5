import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IPageICommunityPlatformSession } from "../../../../../structures/IPageICommunityPlatformSession";

/**
 * List authenticated user’s sessions (community_platform_sessions).
 *
 * Return the authenticated user’s sessions as stored in
 * community_platform_sessions. Columns include id (UUID primary key),
 * hashed_token (stored hash only; never expose plaintext), user_agent and ip
 * (optional client hints), created_at/updated_at, last_seen_at for activity,
 * expires_at for absolute lifetime, and revoked_at for explicit invalidation. A
 * deleted_at column exists for retention workflows.
 *
 * Security and permissions: requires an authenticated registered member and
 * returns only sessions where community_platform_user_id matches the caller.
 * Providers should not expose hashed_token or any sensitive materials beyond
 * what’s necessary for device identification; hashed_token remains opaque.
 *
 * Pagination and ordering: sessions are typically listed by last_seen_at or
 * created_at descending. Even though this is a GET endpoint, implementations
 * should support pagination via query parameters (e.g., cursor and limit)
 * consistent with platform patterns. Revoked or expired sessions may be
 * included to improve transparency; clients can filter or label accordingly.
 *
 * Error handling: 401 responses use the standardized message “Please sign in to
 * continue.”. The endpoint is read-only and does not mutate session state
 * (separate revoke/sign-out APIs can be used to invalidate sessions).
 *
 * @param props.connection
 * @path /communityPlatform/registeredMember/me/sessions
 * @accessor api.functional.communityPlatform.registeredMember.me.sessions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageICommunityPlatformSession;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/registeredMember/me/sessions",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/registeredMember/me/sessions";
  export const random = (): IPageICommunityPlatformSession =>
    typia.random<IPageICommunityPlatformSession>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
