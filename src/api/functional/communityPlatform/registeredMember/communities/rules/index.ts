import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityRule } from "../../../../../structures/ICommunityPlatformCommunityRule";

/**
 * Create a community rule (community_platform_community_rules) under a named
 * community.
 *
 * This endpoint creates a concise, ordered rule item for display in the
 * "Community Rules" section. In the Prisma schema,
 * community_platform_community_rules defines: id (UUID),
 * community_platform_community_id (FK to the parent community), order_index
 * (Int for display order starting at 1), text (short content ~≤100 chars),
 * created_at, updated_at, and deleted_at (for visibility control). The unique
 * constraint on (community_platform_community_id, order_index) ensures that no
 * two rules share the same order within a community; note that this uniqueness
 * applies even to rows with deleted_at set unless the application purges or
 * adjusts them.
 *
 * Security and permissions: Only authenticated users who own the target
 * community (or a siteAdmin) may add rules. Assign this endpoint to registered
 * members at the controller level (authorizationRole "registeredMember") and
 * enforce ownership/administrator checks in the provider. Guests receive an
 * authentication-required outcome per platform conventions. If the parent
 * community is not found or is removed (deleted_at set), the operation must
 * fail appropriately.
 *
 * Relationship and validation: The {communityName} path parameter identifies
 * the community via name/name_key in community_platform_communities. The
 * request body provides order and text that map to order_index and text in
 * community_platform_community_rules. Enforce business constraints: order_index
 * must be a positive integer and unique within the community; text should be
 * concise (≈ ≤100 chars). On success, the response returns the created rule
 * with timestamps. If the order_index conflicts with an existing rule for the
 * same community (including soft-deleted rows if they remain), return a
 * conflict outcome. This operation complements GET (read), PUT (update), and
 * DELETE (mark as deleted) for complete lifecycle management of rules.
 *
 * @param props.connection
 * @param props.communityName Immutable community name used to resolve the
 *   parent community
 * @param props.body New rule data to create under the specified community
 * @path /communityPlatform/registeredMember/communities/:communityName/rules
 * @accessor api.functional.communityPlatform.registeredMember.communities.rules.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Immutable community name used to resolve the parent community */
    communityName: string &
      tags.MinLength<3> &
      tags.MaxLength<30> &
      tags.Pattern<"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$">;

    /** New rule data to create under the specified community */
    body: ICommunityPlatformCommunityRule.ICreate;
  };
  export type Body = ICommunityPlatformCommunityRule.ICreate;
  export type Response = ICommunityPlatformCommunityRule;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/registeredMember/communities/:communityName/rules",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/registeredMember/communities/${encodeURIComponent(props.communityName ?? "null")}/rules`;
  export const random = (): ICommunityPlatformCommunityRule =>
    typia.random<ICommunityPlatformCommunityRule>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityName")(() => typia.assert(props.communityName));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a community rule (community_platform_community_rules) within a named
 * community.
 *
 * Modify the text and/or order of a rule item displayed in a community’s
 * "Community Rules" section. The Prisma table
 * community_platform_community_rules tracks fields: id,
 * community_platform_community_id (FK), order_index, text, created_at,
 * updated_at, and deleted_at. Update operations should not allow changing the
 * parent community; instead, they update only mutable attributes (e.g., text,
 * order_index). The uniqueness constraint on (community_platform_community_id,
 * order_index) remains enforced, including for rows with deleted_at set unless
 * altered by application logic.
 *
 * Security and permissions: Only the community owner or siteAdmin can update
 * rules. Configure endpoint access for authenticated members (authorizationRole
 * "registeredMember") with an ownership/administrator check in business logic.
 * If the user lacks permission, return a forbidden outcome per the platform’s
 * standardized message. Rules marked deleted (deleted_at set) are considered
 * unavailable for normal edits.
 *
 * Validation and behavior: Confirm the ruleId is a UUID and that the rule
 * belongs to the community derived from {communityName}. Validate that text
 * remains concise (≈ ≤100 chars) and that order_index remains a positive
 * integer and unique within the community. If attempting to set an order_index
 * that duplicates another existing rule for the same community (including
 * soft-deleted rows if they remain), return a conflict outcome. On success,
 * return the updated rule including updated_at. Related endpoints: GET
 * retrieves the rule, POST creates a new rule, and DELETE marks the rule as
 * deleted while preserving history.
 *
 * @param props.connection
 * @param props.communityName Immutable community name used to resolve the
 *   parent community
 * @param props.ruleId Identifier of the rule to update (UUID)
 * @param props.body Fields to update for the specified rule
 * @path /communityPlatform/registeredMember/communities/:communityName/rules/:ruleId
 * @accessor api.functional.communityPlatform.registeredMember.communities.rules.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Immutable community name used to resolve the parent community */
    communityName: string &
      tags.MinLength<3> &
      tags.MaxLength<30> &
      tags.Pattern<"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$">;

    /** Identifier of the rule to update (UUID) */
    ruleId: string & tags.Format<"uuid">;

    /** Fields to update for the specified rule */
    body: ICommunityPlatformCommunityRule.IUpdate;
  };
  export type Body = ICommunityPlatformCommunityRule.IUpdate;
  export type Response = ICommunityPlatformCommunityRule;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/registeredMember/communities/:communityName/rules/:ruleId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/registeredMember/communities/${encodeURIComponent(props.communityName ?? "null")}/rules/${encodeURIComponent(props.ruleId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunityRule =>
    typia.random<ICommunityPlatformCommunityRule>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityName")(() => typia.assert(props.communityName));
      assert.param("ruleId")(() => typia.assert(props.ruleId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (mark deleted_at) a community rule in
 * community_platform_community_rules.
 *
 * This operation marks a rule as deleted by setting the deleted_at timestamp in
 * community_platform_community_rules, making it invisible to normal reads while
 * preserving historical integrity. The model’s columns include id,
 * community_platform_community_id, order_index, text, created_at, updated_at,
 * and deleted_at. Because rules are ordered snippets used for the "Community
 * Rules" box, soft deletion maintains referential consistency while allowing
 * recovery or audit if required by policy.
 *
 * Security and permissions: Only the community owner or siteAdmin may delete
 * (mark as deleted) a rule. Gate this endpoint to authenticated members
 * (authorizationRole "registeredMember") and enforce ownership/administrator
 * checks in business logic. Guests should receive an authentication-required
 * outcome. If the rule or community does not exist—or the rule is not part of
 * the specified community—return a not-found outcome.
 *
 * Expected behavior and errors: Ensure the rule belongs to the community
 * resolved from {communityName} before applying deletion. After marking
 * deleted, subsequent reads must exclude it from standard lists and counts. If
 * the rule is already deleted, the operation may be treated as idempotent.
 * Related operations: POST to create a rule, GET to read a specific rule, and
 * PUT to edit existing rules.
 *
 * @param props.connection
 * @param props.communityName Immutable community name used to resolve the
 *   parent community
 * @param props.ruleId Identifier of the rule to remove (UUID)
 * @path /communityPlatform/registeredMember/communities/:communityName/rules/:ruleId
 * @accessor api.functional.communityPlatform.registeredMember.communities.rules.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Immutable community name used to resolve the parent community */
    communityName: string &
      tags.MinLength<3> &
      tags.MaxLength<30> &
      tags.Pattern<"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$">;

    /** Identifier of the rule to remove (UUID) */
    ruleId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/registeredMember/communities/:communityName/rules/:ruleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/registeredMember/communities/${encodeURIComponent(props.communityName ?? "null")}/rules/${encodeURIComponent(props.ruleId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityName")(() => typia.assert(props.communityName));
      assert.param("ruleId")(() => typia.assert(props.ruleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
