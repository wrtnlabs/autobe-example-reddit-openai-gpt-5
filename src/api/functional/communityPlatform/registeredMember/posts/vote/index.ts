import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPostVote } from "../../../../../structures/ICommunityPlatformPostVote";
import { ICommunityPlatformPostVoteOutcome } from "../../../../../structures/ICommunityPlatformPostVoteOutcome";

/**
 * Apply an Upvote or Downvote on a post (community_platform_post_votes).
 *
 * This endpoint applies a vote from the currently authenticated registered
 * member to a specific post identified by postId. In the Prisma schema,
 * community_platform_post_votes records a single per-user vote on a post with
 * columns: id (UUID), community_platform_post_id (UUID),
 * community_platform_user_id (UUID), value (Int; allowed 1 for upvote, -1 for
 * downvote), created_at, updated_at, and deleted_at (nullable). Uniqueness
 * across (community_platform_post_id, community_platform_user_id) ensures only
 * one effective vote per user per post.
 *
 * Security and permissions follow the business rules: voting requires
 * authentication as a registered member, and users are prohibited from voting
 * on their own posts. Attempts to vote on one’s own post must be rejected with
 * copy “You can’t vote on your own posts/comments.” as a validation error.
 * Authorization is enforced at the service layer using the caller’s user
 * identity and the post’s author from community_platform_posts (which
 * references community_platform_users via community_platform_user_id). The
 * operation does not expose user identifiers in the request; it uses the
 * authenticated session.
 *
 * This operation writes to community_platform_post_votes by inserting a new row
 * for first-time votes or updating the existing row’s value when toggling
 * directly between Upvote and Downvote. A transition to the None state is not
 * represented by value=0 in the schema; instead, the None transition is modeled
 * by removing the row, which is performed by the DELETE /posts/{postId}/vote
 * operation. After applying the vote, the service should compute the post’s new
 * score (upvotes − downvotes) using the counts from
 * community_platform_post_votes and return the caller’s current vote for UI
 * reconciliation. Related operations commonly used together are: DELETE
 * /posts/{postId}/vote to clear the vote; PUT/DELETE on
 * /comments/{commentId}/vote for comment voting.
 *
 * Validation and error handling: if the target post does not exist in
 * community_platform_posts or is not visible (e.g., has a deleted_at set), the
 * operation must return an appropriate error. If the caller tries to vote on
 * their own content, return a 400 with the standardized message. Transient
 * failures should return a retriable error with the standardized message "A
 * temporary error occurred. Please try again in a moment.".
 *
 * @param props.connection
 * @param props.postId UUID of the target post to vote on.
 * @param props.body Desired vote state for this post. Only UPVOTE or DOWNVOTE
 *   are accepted here; use DELETE to clear (None).
 * @path /communityPlatform/registeredMember/posts/:postId/vote
 * @accessor api.functional.communityPlatform.registeredMember.posts.vote.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the target post to vote on. */
    postId: string & tags.Format<"uuid">;

    /**
     * Desired vote state for this post. Only UPVOTE or DOWNVOTE are
     * accepted here; use DELETE to clear (None).
     */
    body: ICommunityPlatformPostVote.IUpdate;
  };
  export type Body = ICommunityPlatformPostVote.IUpdate;
  export type Response = ICommunityPlatformPostVoteOutcome;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/registeredMember/posts/:postId/vote",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/registeredMember/posts/${encodeURIComponent(props.postId ?? "null")}/vote`;
  export const random = (): ICommunityPlatformPostVoteOutcome =>
    typia.random<ICommunityPlatformPostVoteOutcome>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove the caller’s vote (set to None) on a post
 * (community_platform_post_votes).
 *
 * This endpoint removes the caller’s effective vote on the specified post by
 * deleting the corresponding row from community_platform_post_votes where
 * (community_platform_post_id, community_platform_user_id) matches the caller
 * and path parameter. The table enforces a single vote per user and includes
 * columns id (UUID), community_platform_post_id (UUID),
 * community_platform_user_id (UUID), value (Int in {-1, 1}), created_at,
 * updated_at, and deleted_at (nullable). The None state is modeled by the
 * absence of a vote row. After deletion, the post’s score (upvotes − downvotes)
 * will change accordingly on subsequent reads.
 *
 * Permissions: Only authenticated registered members may perform this action.
 * Users cannot clear votes on posts they authored if no prior vote exists
 * (no-op), but attempting to clear a non-existent vote should be treated
 * idempotently and return success with no content. Ownership checks for
 * authoring are irrelevant here except for the global restriction that
 * self-votes are not permitted; attempting to remove a non-existent vote on
 * self-authored content simply results in no-op behavior.
 *
 * Error handling: If the post does not exist or is not accessible (e.g.,
 * logically removed), respond with an appropriate error. Transient failures
 * should return the standardized temporary error message. This DELETE endpoint
 * is the inverse pair to the PUT /posts/{postId}/vote operation which sets a
 * specific Upvote or Downvote value.
 *
 * @param props.connection
 * @param props.postId UUID of the target post to clear vote from.
 * @path /communityPlatform/registeredMember/posts/:postId/vote
 * @accessor api.functional.communityPlatform.registeredMember.posts.vote.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the target post to clear vote from. */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/registeredMember/posts/:postId/vote",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/registeredMember/posts/${encodeURIComponent(props.postId ?? "null")}/vote`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
