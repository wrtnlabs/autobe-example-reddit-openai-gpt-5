import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommentVote } from "../../../../../structures/ICommunityPlatformCommentVote";
import { ICommunityPlatformCommentVoteOutcome } from "../../../../../structures/ICommunityPlatformCommentVoteOutcome";

/**
 * Apply an Upvote or Downvote on a comment (community_platform_comment_votes).
 *
 * This endpoint applies a vote from the currently authenticated registered
 * member to a specific comment identified by commentId. In the Prisma schema,
 * community_platform_comment_votes records a single per-user vote on a comment
 * with columns: id (UUID), community_platform_comment_id (UUID),
 * community_platform_user_id (UUID), value (Int; allowed 1 for upvote, -1 for
 * downvote), created_at, updated_at, and deleted_at (nullable). A uniqueness
 * constraint over (community_platform_user_id, community_platform_comment_id)
 * guarantees only one effective vote per user per comment.
 *
 * Security and permissions follow business rules: voting requires
 * authentication as a registered member, and users are prohibited from voting
 * on their own comments. Attempts to vote on one’s own comment must be rejected
 * with copy “You can’t vote on your own posts/comments.” The operation uses the
 * caller’s authenticated identity; it does not accept user identifiers in the
 * request body.
 *
 * This operation writes to community_platform_comment_votes by inserting a new
 * row for first-time votes or updating the existing row’s value when switching
 * directly between Upvote and Downvote. A transition to the None state is
 * represented by removing the vote row and is handled by the DELETE
 * /comments/{commentId}/vote endpoint. After applying the vote, the service
 * should compute the comment’s new score (upvotes − downvotes) using
 * community_platform_comment_votes and return the caller’s current vote for UI
 * reconciliation. Related operations commonly used together: DELETE
 * /comments/{commentId}/vote to clear the vote; the post voting endpoints for
 * post-level votes.
 *
 * Validation and error handling: if the target comment does not exist in
 * community_platform_comments, or belongs to an unavailable post (e.g., the
 * post has been removed), the operation must return an appropriate error.
 * Transient failures should return the standardized message "A temporary error
 * occurred. Please try again in a moment.".
 *
 * @param props.connection
 * @param props.commentId UUID of the target comment to vote on.
 * @param props.body Desired vote state for this comment. Only UPVOTE or
 *   DOWNVOTE are accepted here; use DELETE to clear (None).
 * @path /communityPlatform/registeredMember/comments/:commentId/vote
 * @accessor api.functional.communityPlatform.registeredMember.comments.vote.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the target comment to vote on. */
    commentId: string & tags.Format<"uuid">;

    /**
     * Desired vote state for this comment. Only UPVOTE or DOWNVOTE are
     * accepted here; use DELETE to clear (None).
     */
    body: ICommunityPlatformCommentVote.IUpdate;
  };
  export type Body = ICommunityPlatformCommentVote.IUpdate;
  export type Response = ICommunityPlatformCommentVoteOutcome;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/registeredMember/comments/:commentId/vote",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/registeredMember/comments/${encodeURIComponent(props.commentId ?? "null")}/vote`;
  export const random = (): ICommunityPlatformCommentVoteOutcome =>
    typia.random<ICommunityPlatformCommentVoteOutcome>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove the caller’s vote (set to None) on a comment
 * (community_platform_comment_votes).
 *
 * This endpoint removes the caller’s effective vote on the specified comment by
 * deleting the row from community_platform_comment_votes matching
 * (community_platform_comment_id, community_platform_user_id). The table
 * captures a single effective vote with columns id (UUID),
 * community_platform_comment_id (UUID), community_platform_user_id (UUID),
 * value in {-1, 1}, timestamps, and a nullable deleted_at field. None is
 * represented by the absence of a vote row. After deletion, the comment’s score
 * updates accordingly on subsequent reads.
 *
 * Permissions: Only authenticated registered members may perform this action.
 * Clearing a non-existent vote is idempotent and should succeed with no
 * content. The global restriction against self-voting is enforced on the PUT
 * operation; for DELETE, attempting to clear a non-existent vote is a no-op.
 *
 * Error handling: If the comment does not exist or is not accessible (e.g., its
 * parent post has been removed), respond with an appropriate error. Transient
 * failures should return the standardized temporary error message. This DELETE
 * endpoint complements PUT /comments/{commentId}/vote which sets a specific
 * Upvote or Downvote value.
 *
 * @param props.connection
 * @param props.commentId UUID of the target comment to clear vote from.
 * @path /communityPlatform/registeredMember/comments/:commentId/vote
 * @accessor api.functional.communityPlatform.registeredMember.comments.vote.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the target comment to clear vote from. */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/registeredMember/comments/:commentId/vote",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/registeredMember/comments/${encodeURIComponent(props.commentId ?? "null")}/vote`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
