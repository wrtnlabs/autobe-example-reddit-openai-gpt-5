import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
export * as vote from "./vote/index";

/**
 * Delete a comment (community_platform_comments) via soft deletion (sets
 * deleted_at).
 *
 * Delete a comment by its identifier using soft deletion behavior defined in
 * the community_platform_comments model (deleted_at nullable timestamp). When
 * executed by the author (or siteAdmin per policy), the system sets deleted_at,
 * hiding the comment body while keeping its position in the thread so replies
 * remain visible and counts exclude the deleted item per business rules.
 *
 * Security and permissions: only the commentâ€™s author may perform this action
 * (siteAdmin overrides in business logic). Endpoint access requires an
 * authenticated registered member. Guests receive 401 with the standard message
 * and should be prompted to sign in and resume. Author guard denies non-owners
 * with a 403 response using the standardized copy.
 *
 * Database and behavior details: the operation sets deleted_at on the target
 * row in community_platform_comments without altering
 * community_platform_post_id, community_platform_user_id, or parent relations.
 * Post/comment visibility rules ensure soft-deleted comments are excluded from
 * visible comment counts while preserving thread continuity. Related reads (GET
 * single comment or post-thread lists) should render a neutral placeholder for
 * deleted items.
 *
 * Error handling: return 204 on success with no body. Return 401 for
 * unauthenticated users, 403 for non-owners, and 404 if the comment is missing.
 * Transient failures use the standard temporary error copy. Related operations
 * include creation (POST), update (PUT), and retrieval (GET).
 *
 * @param props.connection
 * @param props.commentId Identifier of the comment
 *   (community_platform_comments.id) to delete
 * @path /communityPlatform/registeredMember/comments/:commentId
 * @accessor api.functional.communityPlatform.registeredMember.comments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Identifier of the comment (community_platform_comments.id) to delete */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/registeredMember/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/registeredMember/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
