import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunity } from "../../../structures/ICommunityPlatformCommunity";
import { IPageICommunityPlatformCommunity } from "../../../structures/IPageICommunityPlatformCommunity";
export * as rules from "./rules/index";
export * as posts from "./posts/index";

/**
 * Search and paginate communities from Prisma table
 * community_platform_communities for public discovery.
 *
 * This operation lists community records from community_platform_communities
 * for public discovery and navigation. The Prisma schema describes communities
 * with an immutable unique name, optional description, optional logo and banner
 * URIs, a required category (via community_platform_categories), an owner
 * reference (community_platform_users), last_active_at, disabled_at for
 * administrative disablement, and lifecycle timestamps. Records with a non-null
 * deleted_at are considered removed from active views and should be excluded
 * from discovery responses. When disabled_at is set, communities should be
 * hidden from promotion surfaces per schema note, which informs filtering
 * behavior for general listings.
 *
 * This endpoint is public read and does not require authentication. It enables
 * search and exploration scenarios: free-text search on name/description,
 * category filtering by community_platform_category_id or business code, and
 * sorting. Common sorts include Newest (created_at descending with stable
 * tie-breaking) and activity-based ordering (last_active_at). Name-based
 * sorting can support alphabetical ordering for browse views. The request body
 * ICommunityPlatformCommunity.IRequest conveys filters and pagination (page,
 * limit), and sort directives with explicit direction.
 *
 * The response is a paginated container
 * IPageICommunityPlatformCommunity.ISummary, returning essential fields for
 * list rendering: id, immutable name, category linkage (id/code/name if
 * denormalized in DTO), optional description and logo/banner URIs, member count
 * if included by view composition, and timestamps needed for sorting
 * (created_at, last_active_at). This list endpoint pairs with GET
 * /communities/{communityId} for detail screens and with other feed endpoints
 * for posts within a community.
 *
 * @param props.connection
 * @param props.body Community search filters, sorting, and pagination
 *   parameters.
 * @path /communityPlatform/communities
 * @accessor api.functional.communityPlatform.communities.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Community search filters, sorting, and pagination parameters. */
    body: ICommunityPlatformCommunity.IRequest;
  };
  export type Body = ICommunityPlatformCommunity.IRequest;
  export type Response = IPageICommunityPlatformCommunity.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/communities";
  export const random = (): IPageICommunityPlatformCommunity.ISummary =>
    typia.random<IPageICommunityPlatformCommunity.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific community (community_platform_communities) by ID for public
 * detail view.
 *
 * This read operation fetches a specific community from
 * community_platform_communities using its id (UUID). Per schema comments, a
 * community has an immutable unique name and optional metadata assets, belongs
 * to a category in community_platform_categories, and references an owner in
 * community_platform_users. It also tracks last_active_at for display and
 * sorting, disabled_at to indicate administrative disablement, and
 * created_at/updated_at timestamps. Records where deleted_at is non-null are
 * considered removed from active use; standard behavior for public detail
 * retrieval is to return a not-found outcome for such records.
 *
 * The endpoint is public read and requires no authentication. It supports
 * community detail pages that display identity and metadata. For community
 * rules, the system stores an ordered list in
 * community_platform_community_rules with order_index and text; clients may
 * call a separate endpoint to fetch them or receive them pre-composed depending
 * on DTO design. This operation does not modify any state and thus returns data
 * without side effects.
 *
 * Typical errors include not found when the identifier does not match an
 * available community and visibility constraints when disabled_at is set (e.g.,
 * detail may remain accessible while promotion surfaces hide it depending on
 * product policy). This endpoint is commonly used with the list/search endpoint
 * PATCH /communities and downstream post list endpoints within the community.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community (UUID).
 * @path /communityPlatform/communities/:communityId
 * @accessor api.functional.communityPlatform.communities.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target community (UUID). */
    communityId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommunity;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/communities/:communityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunity =>
    typia.random<ICommunityPlatformCommunity>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
