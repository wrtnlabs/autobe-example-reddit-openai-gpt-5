import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPost } from "../../../../structures/ICommunityPlatformPost";
import { IPageICommunityPlatformPost } from "../../../../structures/IPageICommunityPlatformPost";

/**
 * Search and paginate community posts using community_platform_posts (with
 * votes for Top).
 *
 * Provide a paginated, sortable list of posts for the target community. In the
 * Prisma schema, community_platform_posts contains title, body,
 * author_display_name, created_at, and updated_at, as well as foreign keys to
 * community_platform_communities (community scope) and community_platform_users
 * (author). This operation filters by the target community resolved from
 * {communityName} and excludes posts that are not visible by checking
 * deleted_at.
 *
 * Security considerations: Reading is public; no authentication is required to
 * fetch community posts. However, if the client supplies an authenticated
 * context, additional personalization fields like myVote may be included by
 * application logic using community_platform_post_votes for the calling user.
 *
 * Sorting and tie-breakers: When sort=newest, order by created_at descending
 * and break ties by id descending as per deterministic rules. When sort=top,
 * compute score from community_platform_post_votes (sum of value), order by
 * score descending; if scores are equal, order by created_at descending; if
 * still equal, order by id descending. Pagination cursors must encode the
 * active sort’s ordering tuple to ensure stable continuation without duplicates
 * or omissions.
 *
 * Validation and business rules: The request body
 * ICommunityPlatformPost.IRequest includes sort, limit (default 20), and an
 * opaque cursor string. Implementations should validate the community exists
 * (community_platform_communities.name_key) and is visible. Title/body length
 * constraints are enforced at creation/update time, not here.
 *
 * Related operations: Use GET /communities/{communityName} for the community’s
 * details and rules, and GET /posts/{postId} for individual post detail. Home
 * feed and Global Latest are separate endpoints with their own scopes.
 *
 * Error handling: If the community is not found or not visible, return an
 * appropriate not-found response. Transient failures should return the
 * platform’s standardized temporary error message and allow retry.
 *
 * @param props.connection
 * @param props.communityName Immutable community name used to resolve
 *   community_platform_communities (application normalizes to name_key).
 * @param props.body Search and pagination parameters: { sort: "newest"|"top",
 *   cursor?: string, limit?: number (default 20) }. Cursor encodes the active
 *   sort’s boundary tuple.
 * @path /communityPlatform/communities/:communityName/posts
 * @accessor api.functional.communityPlatform.communities.posts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Immutable community name used to resolve
     * community_platform_communities (application normalizes to name_key).
     */
    communityName: string &
      tags.MinLength<3> &
      tags.MaxLength<30> &
      tags.Pattern<"^[A-Za-z0-9](?:[A-Za-z0-9_-]*[A-Za-z0-9])$">;

    /**
     * Search and pagination parameters: { sort: "newest"|"top", cursor?:
     * string, limit?: number (default 20) }. Cursor encodes the active
     * sort’s boundary tuple.
     */
    body: ICommunityPlatformPost.IRequest;
  };
  export type Body = ICommunityPlatformPost.IRequest;
  export type Response = IPageICommunityPlatformPost.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/communities/:communityName/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/communities/${encodeURIComponent(props.communityName ?? "null")}/posts`;
  export const random = (): IPageICommunityPlatformPost.ISummary =>
    typia.random<IPageICommunityPlatformPost.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityName")(() => typia.assert(props.communityName));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
