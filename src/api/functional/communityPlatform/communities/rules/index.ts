import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityRule } from "../../../../structures/ICommunityPlatformCommunityRule";
import { IPageICommunityPlatformCommunityRule } from "../../../../structures/IPageICommunityPlatformCommunityRule";

/**
 * List community rules from community_platform_community_rules for a given
 * community.
 *
 * Purpose and Overview: Retrieve rule items associated with a community for
 * display in the right‑sidebar “Community Rules” section. The underlying model
 * community_platform_community_rules stores per‑community ordered rules with
 * order_index (starting at 1) and text. The parent community is identified via
 * community_platform_communities by normalizing communityName to name_key and
 * resolving its id. This endpoint returns a list with pagination suited for
 * showing the top 5 rules by order, while also supporting larger lists for
 * management views.
 *
 * Security and Permissions: This is a public read operation. No authentication
 * is required to list rules belonging to a visible community. Administrative or
 * owner permissions are only required when creating, editing, or reordering
 * rules (handled by separate write endpoints, not this read operation).
 *
 * Database Relationships: Each rule row belongs to exactly one community via
 * community_platform_community_id. The rules are typically rendered in numeric
 * order (order_index ascending). The rule text column (text) is concise (~≤100
 * chars), and timestamps (created_at, updated_at) exist for audit. Soft
 * deletion is supported via deleted_at; the read operation should exclude
 * removed items by default unless explicitly requested via filters.
 *
 * Validation and Business Logic: Requests include pagination parameters (e.g.,
 * cursor and limit), sort options (default order_index ascending for display;
 * created_at for maintenance), and optional text search filtered against the
 * text field. The community must exist and be active (deleted_at null) for
 * results to be returned. The API enforces deterministic ordering and stable
 * cursor windows so that paging avoids duplicates or omissions.
 *
 * Related Operations and Usage: Clients commonly call GET
 * /communities/{communityName} to render community header details and then this
 * endpoint to fetch rule items (top 5 for the box). Owner‑level edits to
 * community metadata use PUT /communities/{communityName}; rule creation or
 * reordering is outside the scope of this read operation.
 *
 * Error Handling: If the community is not found or not visible, return
 * not-found. Transient errors use the standard temporary error message.
 * Pagination cursors that are malformed should return a bad-request response
 * with a clear message.
 *
 * @param props.connection
 * @param props.communityName Immutable community name whose rules will be
 *   listed (normalized to name_key).
 * @param props.body Search and pagination parameters for listing community
 *   rules (cursor, limit, sort, text filter).
 * @path /communityPlatform/communities/:communityName/rules
 * @accessor api.functional.communityPlatform.communities.rules.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Immutable community name whose rules will be listed (normalized to
     * name_key).
     */
    communityName: string &
      tags.MinLength<3> &
      tags.MaxLength<30> &
      tags.Pattern<"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$">;

    /**
     * Search and pagination parameters for listing community rules (cursor,
     * limit, sort, text filter).
     */
    body: ICommunityPlatformCommunityRule.IRequest;
  };
  export type Body = ICommunityPlatformCommunityRule.IRequest;
  export type Response = IPageICommunityPlatformCommunityRule;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/communities/:communityName/rules",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/communities/${encodeURIComponent(props.communityName ?? "null")}/rules`;
  export const random = (): IPageICommunityPlatformCommunityRule =>
    typia.random<IPageICommunityPlatformCommunityRule>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityName")(() => typia.assert(props.communityName));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a community rule (community_platform_community_rules) by ID within a
 * named community.
 *
 * Fetch one rule item that appears under the "Community Rules" section for a
 * given community. The underlying Prisma table
 * community_platform_community_rules stores short ordered rules associated with
 * a community (columns: id, community_platform_community_id, order_index, text,
 * created_at, updated_at, deleted_at). Business rules specify concise text (≈
 * ≤100 chars) and ordered presentation; only the top five by order_index are
 * commonly displayed on the Community Info + Rules box.
 *
 * Security and permissions: This is a read-only operation on public community
 * metadata and is accessible to all users, including unauthenticated visitors.
 * Authoring constraints (only the community owner or siteAdmin may modify
 * rules) do not restrict reads. Implementers should still ensure that if a
 * community or rule has been marked deleted (deleted_at set), the resource is
 * not returned in normal listings and is treated as unavailable.
 *
 * Database relationships: Each rule is tied to a parent community via
 * community_platform_community_rules.community_platform_community_id
 * referencing community_platform_communities.id. The community itself has
 * immutable name and a normalized key (name_key) for case-insensitive
 * uniqueness, as described in the community_platform_communities model. The
 * operation must ensure the requested ruleId belongs to the community
 * identified by communityName before returning it.
 *
 * Validation and expected behavior: The path parameter communityName follows
 * the platform’s naming policy (alphanumeric with hyphen/underscore, length
 * 3–30, immutable post-creation). The ruleId is a UUID. If either the community
 * does not exist, has been removed (deleted_at set), or the rule does not exist
 * within that community (including when deleted_at is set), respond with a
 * not-found outcome per provider conventions. Related operations include: POST
 * to create a rule for a community, PUT to modify an existing rule, and DELETE
 * to mark a rule as deleted while preserving history.
 *
 * @param props.connection
 * @param props.communityName Immutable community name used to resolve the
 *   parent community
 * @param props.ruleId Target rule identifier (UUID) within the specified
 *   community
 * @path /communityPlatform/communities/:communityName/rules/:ruleId
 * @accessor api.functional.communityPlatform.communities.rules.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Immutable community name used to resolve the parent community */
    communityName: string &
      tags.MinLength<3> &
      tags.MaxLength<30> &
      tags.Pattern<"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$">;

    /** Target rule identifier (UUID) within the specified community */
    ruleId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommunityRule;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/communities/:communityName/rules/:ruleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/communities/${encodeURIComponent(props.communityName ?? "null")}/rules/${encodeURIComponent(props.ruleId ?? "null")}`;
  export const random = (): ICommunityPlatformCommunityRule =>
    typia.random<ICommunityPlatformCommunityRule>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityName")(() => typia.assert(props.communityName));
      assert.param("ruleId")(() => typia.assert(props.ruleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
