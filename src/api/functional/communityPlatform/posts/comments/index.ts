import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformComment } from "../../../../structures/ICommunityPlatformComment";
import { IPageICommunityPlatformComment } from "../../../../structures/IPageICommunityPlatformComment";

/**
 * List/search comments for a post from community_platform_comments.
 *
 * Retrieve a paginated list of comments for a given post from the
 * community_platform_comments model. The schema defines key fields including
 * id, community_platform_post_id (required, relates to
 * community_platform_posts), community_platform_user_id (author), optional
 * parent_id for nesting, content (plain text), created_at/updated_at
 * timestamps, and a deleted_at column used to mark removed comments. This
 * operation focuses on reading comments under a single post, with optional
 * filtering to fetch only top-level comments (parent_id = null) or only replies
 * to a particular parent comment.
 *
 * Security and permissions: reading public comments is open to everyone. No
 * authentication is required. Author-guard rules affect edit/delete operations
 * but not this read operation. Comments marked removed (deleted_at not null)
 * must not appear in normal results.
 *
 * Relationships and query constraints: the provided postId must match
 * community_platform_comments.community_platform_post_id. If a parentId filter
 * is provided in the request body, it must reference a comment belonging to the
 * same post. Sorting follows business rules for comments: Newest (created_at
 * descending, tie-break by larger identifier when timestamps match). Pagination
 * returns 20 per page by default, with page and pageSize controls and opaque
 * cursor support if the implementation chooses to offer it.
 *
 * Validation and error behavior: if postId is not a valid UUID, the request is
 * rejected. If parentId is provided but does not belong to the same post,
 * return a validation error. When page parameters are out of bounds or
 * malformed, return a 400 with an explanatory message. This operation pairs
 * with GET /comments/{commentId} for detail and POST /posts/{postId}/comments
 * for creation.
 *
 * @param props.connection
 * @param props.postId Target post’s ID to list comments for
 * @param props.body Search and pagination parameters for listing comments under
 *   a post (filters like parentId, top-level only, sort, pagination)
 * @path /communityPlatform/posts/:postId/comments
 * @accessor api.functional.communityPlatform.posts.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Target post’s ID to list comments for */
    postId: string & tags.Format<"uuid">;

    /**
     * Search and pagination parameters for listing comments under a post
     * (filters like parentId, top-level only, sort, pagination)
     */
    body: ICommunityPlatformComment.IRequest;
  };
  export type Body = ICommunityPlatformComment.IRequest;
  export type Response = IPageICommunityPlatformComment;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): IPageICommunityPlatformComment =>
    typia.random<IPageICommunityPlatformComment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
