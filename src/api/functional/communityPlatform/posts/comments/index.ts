import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformComment } from "../../../../structures/ICommunityPlatformComment";
import { IPageICommunityPlatformComment } from "../../../../structures/IPageICommunityPlatformComment";

/**
 * Paginated Newest-ordered comments for a post from
 * community_platform_comments.
 *
 * Purpose and overview: Retrieve a paginated, sorted collection of comments for
 * a post using the community_platform_comments model (columns include id,
 * community_platform_post_id, community_platform_user_id, parent_id, content,
 * created_at, updated_at, deleted_at). The response focuses on visible comments
 * (where deleted_at is null) and follows Newest ordering semantics.
 *
 * Security and access: Reading comments is public and requires no
 * authentication. Clients may optionally map the current user to per-item vote
 * state using community_platform_comment_votes, but this operation does not
 * require login to view. Content flagged as deleted (deleted_at not null)
 * should be omitted from the listing and from counts presented by clients.
 *
 * Ordering, pagination, and structure: Apply deterministic Newest ordering by
 * created_at DESC with ties broken by id DESC. The request supports
 * cursor-based pagination with a default size of 20. The cursor should encode
 * the last itemâ€™s ordering tuple to ensure stable continuation without
 * duplicates or gaps. Although comments support nesting via parent_id
 * (self-relation), this endpoint returns items for the target post; clients may
 * use parent_id to group replies into threads.
 *
 * Validation and related operations: Validate that the target post exists and
 * is visible; otherwise return a not-found result. Related endpoints include
 * post detail retrieval, comment creation/edit/delete, and vote state toggles.
 * Temporary errors should expose retry guidance without losing client state.
 *
 * @param props.connection
 * @param props.postId Post identifier (UUID) whose comments are requested
 * @param props.body Query parameters for listing comments with Newest ordering
 *   and cursor pagination
 * @path /communityPlatform/posts/:postId/comments
 * @accessor api.functional.communityPlatform.posts.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Post identifier (UUID) whose comments are requested */
    postId: string & tags.Format<"uuid">;

    /**
     * Query parameters for listing comments with Newest ordering and cursor
     * pagination
     */
    body: ICommunityPlatformComment.IRequest;
  };
  export type Body = ICommunityPlatformComment.IRequest;
  export type Response = IPageICommunityPlatformComment;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): IPageICommunityPlatformComment =>
    typia.random<IPageICommunityPlatformComment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
