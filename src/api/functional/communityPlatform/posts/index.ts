import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPost } from "../../../structures/ICommunityPlatformPost";
import { IPageICommunityPlatformPost } from "../../../structures/IPageICommunityPlatformPost";
export * as globalLatest from "./globalLatest/index";
export * as comments from "./comments/index";

/**
 * Search and paginate post summaries from community_platform_posts using
 * deterministic Newest/Top ordering.
 *
 * This operation lists posts from community_platform_posts with advanced
 * search/sort capabilities aligned to the product’s deterministic rules. The
 * posts table stores the core fields (title, body, author_display_name,
 * created_at, updated_at) and references community_platform_communities and
 * community_platform_users via foreign keys. Trigram indexes on title and body
 * support efficient text matching when queries are provided. Sorting by Newest
 * must use the tuple (created_at desc, id desc). Sorting by Top requires
 * computing score as upvotes minus downvotes using
 * community_platform_post_votes and then applying the tie-breakers (created_at
 * desc, id desc) when scores are equal.
 *
 * Security considerations follow the platform’s read-open model: anyone can
 * read public posts without authentication. Implementations may still look up
 * the authenticated user to provide per-user signals like myVote, but
 * authorization is not required for basic listing. The endpoint is read-only
 * and does not modify data in any table. Business logic should exclude posts
 * that are not visible per product policies and maintain stable cursor
 * pagination across repeated requests.
 *
 * The request body ICommunityPlatformPost.IRequest typically includes optional
 * filters such as community name, a free-text query for title/body matching, a
 * sort parameter (newest or top), and pagination properties (cursor, limit with
 * a default of 20). The response IPageICommunityPlatformPost.ISummary returns
 * page-level metadata (e.g., next cursor) and a compact list of post summaries
 * suitable for cards, including fields like community name, title, author
 * label, created timestamp, derived score, and visible comment counts.
 *
 * Error handling covers invalid parameters (e.g., unsupported sort or malformed
 * cursor) and transient read failures. Providers should map short queries to
 * appropriate validation messages where search is enabled and apply
 * tie-breakers exactly as defined to avoid duplicates or gaps between
 * consecutive pages.
 *
 * @param props.connection
 * @param props.body Filtering, search, sorting, and pagination parameters for
 *   post listing.
 * @path /communityPlatform/posts
 * @accessor api.functional.communityPlatform.posts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, search, sorting, and pagination parameters for post
     * listing.
     */
    body: ICommunityPlatformPost.IRequest;
  };
  export type Body = ICommunityPlatformPost.IRequest;
  export type Response = IPageICommunityPlatformPost.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/posts";
  export const random = (): IPageICommunityPlatformPost.ISummary =>
    typia.random<IPageICommunityPlatformPost.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single post (community_platform_posts) by UUID with score and comment
 * count.
 *
 * This operation retrieves one post from community_platform_posts identified by
 * its primary key id. The table defines author and community relationships via
 * foreign keys to community_platform_users and community_platform_communities.
 * Core columns include title, body, optional author_display_name, created_at,
 * and updated_at—used for detail display and deterministic ordering in lists
 * elsewhere.
 *
 * Security model is read-open: all users, including guests, may retrieve public
 * post content. Implementations may optionally tailor fields such as the
 * caller’s current vote state by consulting community_platform_post_votes for
 * the (post, user) pair. The provider computes score as upvotes minus downvotes
 * from community_platform_post_votes and counts visible comments from
 * community_platform_comments for display. If the post is not found or not
 * eligible for display, the provider returns a not-found outcome consistent
 * with platform rules.
 *
 * Error handling includes validation of the postId format (UUID), not-found for
 * missing records, and generic temporary error mapping when underlying reads
 * fail. This endpoint returns a full post representation ICommunityPlatformPost
 * to support Post Detail rendering, including nested objects such as community
 * basics and author label for UI use.
 *
 * @param props.connection
 * @param props.postId Target post identifier (UUID) referencing
 *   community_platform_posts.id.
 * @path /communityPlatform/posts/:postId
 * @accessor api.functional.communityPlatform.posts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Target post identifier (UUID) referencing
     * community_platform_posts.id.
     */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformPost;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): ICommunityPlatformPost =>
    typia.random<ICommunityPlatformPost>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
