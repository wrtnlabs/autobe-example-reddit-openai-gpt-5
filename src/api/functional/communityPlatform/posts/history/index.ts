import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPostSnapshot } from "../../../../structures/ICommunityPlatformPostSnapshot";
import { IPageICommunityPlatformPostSnapshot } from "../../../../structures/IPageICommunityPlatformPostSnapshot";

/**
 * List post snapshots from community_platform_post_snapshots for a post.
 *
 * This operation lists snapshots from community_platform_post_snapshots for the
 * given postId. The schema defines id (UUID), community_platform_post_id
 * (UUID), editor_user_id (UUID, optional), title, body, author_display_name
 * (optional), created_at (snapshot time), updated_at, and deleted_at. Snapshots
 * are append-only records reflecting the post’s mutable fields at edit time,
 * thus serving as an immutable audit trail of content changes. The operation
 * returns snapshots scoped to the target post.
 *
 * Security: reading history is a public capability for public content in this
 * platform. No authentication is required for read, but upstream layers may
 * filter visibility in case of post removal or community policy. The endpoint
 * should never allow creation, modification, or deletion of snapshots, as those
 * are system-generated when post edits occur.
 *
 * Relationships: community_platform_post_snapshots rows reference
 * community_platform_posts (via community_platform_post_id) and optionally
 * community_platform_users as editor_user_id. The list should support
 * pagination and sorting. Reasonable defaults include ordering by created_at
 * descending to show newest edits first, with tie-breaking by identifier when
 * timestamps are equal.
 *
 * Validation and behavior: reject requests for non-existent posts; if the post
 * or its community is unavailable, the list should be empty or handled by
 * business rules. Errors include invalid postId format, missing post, or access
 * constraints imposed by higher layers.
 *
 * @param props.connection
 * @param props.postId Source post’s ID
 * @param props.body Search, filter, sort, and pagination parameters for listing
 *   snapshots
 * @path /communityPlatform/posts/:postId/history
 * @accessor api.functional.communityPlatform.posts.history.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Source post’s ID */
    postId: string & tags.Format<"uuid">;

    /** Search, filter, sort, and pagination parameters for listing snapshots */
    body: ICommunityPlatformPostSnapshot.IRequest;
  };
  export type Body = ICommunityPlatformPostSnapshot.IRequest;
  export type Response = IPageICommunityPlatformPostSnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/posts/:postId/history",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}/history`;
  export const random = (): IPageICommunityPlatformPostSnapshot =>
    typia.random<IPageICommunityPlatformPostSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific post snapshot (community_platform_post_snapshots).
 *
 * This operation retrieves one snapshot record from
 * community_platform_post_snapshots using both the parent postId context and
 * the specific historyId (snapshot id). The Prisma schema documents the
 * snapshot fields: id (UUID), community_platform_post_id (UUID), editor_user_id
 * (UUID, optional), title, body, author_display_name (optional), created_at
 * (snapshot time), updated_at, and deleted_at. The record represents a
 * point-in-time state of a post’s mutable fields and is append-only for audit
 * purposes.
 *
 * Security: reading snapshot history is a public capability for public content;
 * no authentication is required. Access control or filtering for removed
 * content may be applied by upstream business rules. This operation is strictly
 * read-only and never modifies snapshot data.
 *
 * Relationships: each snapshot references community_platform_posts
 * (community_platform_post_id) and optionally community_platform_users
 * (editor_user_id). The controller/provider should verify that the requested
 * snapshot belongs to the specified postId to prevent cross-resource access.
 * Errors include not found for either the post or the history record, invalid
 * identifiers, or visibility constraints.
 *
 * @param props.connection
 * @param props.postId Source post’s ID
 * @param props.historyId Snapshot ID to retrieve
 * @path /communityPlatform/posts/:postId/history/:historyId
 * @accessor api.functional.communityPlatform.posts.history.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Source post’s ID */
    postId: string & tags.Format<"uuid">;

    /** Snapshot ID to retrieve */
    historyId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformPostSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/posts/:postId/history/:historyId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}/history/${encodeURIComponent(props.historyId ?? "null")}`;
  export const random = (): ICommunityPlatformPostSnapshot =>
    typia.random<ICommunityPlatformPostSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("historyId")(() => typia.assert(props.historyId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
