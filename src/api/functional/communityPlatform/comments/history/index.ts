import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommentSnapshot } from "../../../../structures/ICommunityPlatformCommentSnapshot";
import { IPageICommunityPlatformCommentSnapshot } from "../../../../structures/IPageICommunityPlatformCommentSnapshot";

/**
 * List comment history snapshots (community_platform_comment_snapshots) for a
 * comment.
 *
 * Retrieve the version history entries for a single comment identified by
 * {commentId}. The community_platform_comment_snapshots model is documented as
 * historical point-in-time records capturing the content state of
 * community_platform_comments. Records are created whenever content changes to
 * preserve audit trails and enable version review. Each snapshot stores the
 * content at that time, the parent_id at that moment (if any), and the snapshot
 * timestamps.
 *
 * Security and access: This endpoint is read-only and intended for displaying
 * historical context. Implementers should enforce business rules around who can
 * view history consistent with product policy. The operation returns only
 * records that remain in active views (for example, those without a deleted_at
 * value), and it never modifies comment or snapshot data.
 *
 * Database relationships: Each snapshot belongs to exactly one comment via
 * community_platform_comment_id, which must match the {commentId} path
 * parameter. The source comment itself references a post and an author in
 * community_platform_comments. This operation should filter by
 * community_platform_comment_id and order snapshots by created_at descending by
 * default, using canonical tie-breakers when necessary.
 *
 * Validation and business logic: The request body
 * (ICommunityPlatformCommentSnapshot.IRequest) supports pagination (page/limit
 * or cursor), optional filtering by created_at ranges, and sorting (commonly by
 * created_at). Snapshot text is plain text as per the comment rules, and the
 * response should adhere to privacy rules (for example, visibility of removed
 * content) without exposing internal-only data.
 *
 * Related endpoints: Use GET /comments/{commentId}/history/{historyId} to
 * retrieve a single snapshot’s full detail. Clients typically call this listing
 * first, then fetch a selected snapshot by its identifier.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the target comment whose history
 *   is requested
 * @param props.body Search, filter, sort, and pagination parameters for listing
 *   comment snapshots
 * @path /communityPlatform/comments/:commentId/history
 * @accessor api.functional.communityPlatform.comments.history.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target comment whose history is requested */
    commentId: string & tags.Format<"uuid">;

    /**
     * Search, filter, sort, and pagination parameters for listing comment
     * snapshots
     */
    body: ICommunityPlatformCommentSnapshot.IRequest;
  };
  export type Body = ICommunityPlatformCommentSnapshot.IRequest;
  export type Response = IPageICommunityPlatformCommentSnapshot;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/comments/:commentId/history",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/comments/${encodeURIComponent(props.commentId ?? "null")}/history`;
  export const random = (): IPageICommunityPlatformCommentSnapshot =>
    typia.random<IPageICommunityPlatformCommentSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific comment snapshot (community_platform_comment_snapshots) by
 * historyId.
 *
 * Return a single point-in-time snapshot for the comment specified by
 * {commentId}. The community_platform_comment_snapshots schema stores
 * append-only-like records that capture the state of a comment when a change
 * occurred. Each snapshot contains the plain-text content at that moment, the
 * then-current parent_id (if any), and the created_at timestamp for accurate
 * historical ordering.
 *
 * Security and access: This read operation surfaces historical content for
 * audit/version viewing. Implement authorization consistent with product
 * policy. The operation should not include records that are removed from active
 * views (those with a non-null deleted_at), and it performs no data
 * modification.
 *
 * Database relationships and constraints: The snapshot belongs to the comment
 * referred to by the path parameter {commentId} through
 * community_platform_comment_id, and the targeted snapshot is identified by
 * {historyId}. Implementers should verify both IDs and ensure the snapshot’s
 * community_platform_comment_id matches the supplied commentId to avoid
 * cross-resource leakage.
 *
 * Validation and error handling: If the snapshot is not found, or does not
 * belong to the specified comment, return a suitable not-found or authorization
 * error as appropriate. This endpoint complements the listing endpoint (PATCH
 * /comments/{commentId}/history) that supports pagination and sorting.
 *
 * @param props.connection
 * @param props.commentId Identifier of the comment that owns the requested
 *   snapshot
 * @param props.historyId Identifier of the target snapshot within the comment’s
 *   history
 * @path /communityPlatform/comments/:commentId/history/:historyId
 * @accessor api.functional.communityPlatform.comments.history.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the comment that owns the requested snapshot */
    commentId: string & tags.Format<"uuid">;

    /** Identifier of the target snapshot within the comment’s history */
    historyId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommentSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/comments/:commentId/history/:historyId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/comments/${encodeURIComponent(props.commentId ?? "null")}/history/${encodeURIComponent(props.historyId ?? "null")}`;
  export const random = (): ICommunityPlatformCommentSnapshot =>
    typia.random<ICommunityPlatformCommentSnapshot>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("historyId")(() => typia.assert(props.historyId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
