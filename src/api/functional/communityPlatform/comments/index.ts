import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformComment } from "../../../structures/ICommunityPlatformComment";

/**
 * Get one comment (community_platform_comments) by ID.
 *
 * Return detailed information for a specific comment. The
 * community_platform_comments model includes fields: id,
 * community_platform_post_id, community_platform_user_id, optional parent_id
 * for threading, content (plain text), created_at, updated_at, and deleted_at
 * for visibility. The endpoint exposes a single resource to support Post Detail
 * threads, search result navigation, and moderation UIs.
 *
 * Security and visibility: reading comments is public. When deleted_at is set
 * (soft-deleted), the API still returns 200 with the comment resource
 * (including deleted_at) so clients can render a neutral placeholder while
 * preserving thread position per business rules. Ownership and author guard
 * apply to write actions, not reads.
 *
 * Database relationships and behavior: the commentâ€™s parent and post
 * associations allow clients to reconstruct thread context. Indexes on
 * (community_platform_post_id, created_at, id) and (parent_id, created_at, id)
 * support efficient retrieval and deterministic Newest ordering in list
 * endpoints; while this endpoint returns a single item, the same model
 * constraints apply.
 *
 * Error handling: 404 is returned only if the comment does not exist. Transient
 * failures return the standard temporary error copy. This operation is related
 * to POST/PUT/DELETE comment endpoints used to manage lifecycle.
 *
 * @param props.connection
 * @param props.commentId Identifier of the target comment
 *   (community_platform_comments.id)
 * @path /communityPlatform/comments/:commentId
 * @accessor api.functional.communityPlatform.comments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the target comment (community_platform_comments.id) */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformComment;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): ICommunityPlatformComment =>
    typia.random<ICommunityPlatformComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
