import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformUser } from "../../../structures/ICommunityPlatformUser";
export * as profile from "./profile/index";

/**
 * Retrieve a user (community_platform_users) by ID.
 *
 * Fetch the primary user identity referenced throughout the platform. The
 * community_platform_users model contains the unique username, account status,
 * and lifecycle timestamps such as created_at and updated_at, with
 * last_login_at optionally present. This table is the parent for credentials,
 * profile, and sessions, and is referenced by role assignment tables and
 * content ownership relations (posts, comments).
 *
 * Security and visibility: Reading user identity by ID is often public in
 * community contexts; however, implementations must respect privacy constraints
 * regarding which fields are exposed. No modifications are performed by this
 * endpoint. Records with a non-null deleted_at are considered removed from
 * active use and should not be presented in normal responses.
 *
 * Relationships and usage: A user can have an associated profile
 * (community_platform_user_profiles), credentials
 * (community_platform_user_credentials), sessions
 * (community_platform_sessions), and content authored (posts and comments).
 * This endpoint returns just the user entity. Use the profile endpoint to
 * retrieve presentation details like display_name and avatar URI.
 *
 * Error handling: Return not found when the user does not exist or is no longer
 * active for public views. This endpoint is commonly paired with GET
 * /users/{userId}/profile to render full author cards.
 *
 * @param props.connection
 * @param props.userId Identifier of the user to retrieve
 * @path /communityPlatform/users/:userId
 * @accessor api.functional.communityPlatform.users.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the user to retrieve */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformUser;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/users/:userId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): ICommunityPlatformUser =>
    typia.random<ICommunityPlatformUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
