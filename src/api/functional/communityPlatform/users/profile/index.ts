import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformUserProfile } from "../../../../structures/ICommunityPlatformUserProfile";

/**
 * Retrieve a user profile (community_platform_user_profiles) by userId.
 *
 * Get the presentation-layer profile associated with a user. The
 * community_platform_user_profiles model stores fields intended for display
 * rather than authentication: display_name (suggested 0–32 characters),
 * optional bio, avatar_uri, and optional locale and timezone preferences. It
 * references the owning user via community_platform_user_id and is unique per
 * user.
 *
 * Security and privacy: This read operation should expose only public-safe
 * profile information. It performs no changes. Profiles with a non-null
 * deleted_at should not be returned in standard responses. Implementations may
 * localize time-related displays using the user’s timezone value, but raw
 * timestamps are returned as stored.
 *
 * Relationships: The profile is one-to-one with community_platform_users. Other
 * account data such as credentials or sessions are deliberately separated and
 * are not included in this response. Use GET /users/{userId} for identity
 * fields and authorship references, and use content endpoints to fetch authored
 * posts/comments.
 *
 * Error handling: Return not found when no active profile exists for the
 * specified userId. This endpoint complements the user detail endpoint to build
 * author tiles and account pages.
 *
 * @param props.connection
 * @param props.userId Identifier of the user whose profile is requested
 * @path /communityPlatform/users/:userId/profile
 * @accessor api.functional.communityPlatform.users.profile.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Identifier of the user whose profile is requested */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformUserProfile;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/users/:userId/profile",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/users/${encodeURIComponent(props.userId ?? "null")}/profile`;
  export const random = (): ICommunityPlatformUserProfile =>
    typia.random<ICommunityPlatformUserProfile>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
