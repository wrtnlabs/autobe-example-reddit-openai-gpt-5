import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformComment } from "../../../../../structures/ICommunityPlatformComment";

/**
 * Create a comment in community_platform_comments for a specific post.
 *
 * This operation creates a new comment in the community_platform_comments model
 * for the post identified by postId. The model includes fields id (UUID),
 * community_platform_post_id (required), community_platform_user_id (author),
 * optional parent_id for reply threading, content (plain text 2–2,000 chars),
 * created_at/updated_at timestamps, and a deleted_at column used to hide
 * removed comments. The author is the authenticated account; the author display
 * label is handled elsewhere via user profile if needed.
 *
 * Security: creation of comments requires an authenticated role. Use the
 * communityMember role for normal users. The API will reject unauthenticated
 * requests. Ownership and author guards apply to subsequent edit/delete
 * operations (not part of this endpoint).
 *
 * Relationships and validation: the postId path parameter sets
 * community_platform_post_id. If a parentId is provided, it must reference an
 * existing comment belonging to the same post; otherwise, validation fails. The
 * content must be plain text and within the allowed length range. The operation
 * returns the created comment entity.
 *
 * Error handling: invalid UUIDs for postId or parentId, missing/too-short
 * content, or cross-post parent references result in 400 validation errors.
 * Attempts by unauthenticated callers result in 401/403 based on policy.
 *
 * @param props.connection
 * @param props.postId Target post’s ID where the comment will be created
 * @param props.body Comment creation payload including content and optional
 *   parentId
 * @path /communityPlatform/communityMember/posts/:postId/comments
 * @accessor api.functional.communityPlatform.communityMember.posts.comments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Target post’s ID where the comment will be created */
    postId: string & tags.Format<"uuid">;

    /** Comment creation payload including content and optional parentId */
    body: ICommunityPlatformComment.ICreate;
  };
  export type Body = ICommunityPlatformComment.ICreate;
  export type Response = ICommunityPlatformComment;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/communityMember/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/communityMember/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): ICommunityPlatformComment =>
    typia.random<ICommunityPlatformComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
