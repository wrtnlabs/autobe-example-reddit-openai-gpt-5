import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPostVote } from "../../../../../structures/ICommunityPlatformPostVote";

/**
 * Upsert the current user’s vote (community_platform_post_votes) to "up" or
 * "down" for a post.
 *
 * Create or update the authenticated user’s vote for a specific post in
 * community_platform_post_votes. The model defines a unique constraint over
 * (community_platform_post_id, community_platform_user_id) ensuring one vote
 * per user per post, with a state column representing the current vote. Schema
 * guidance recommends lower-case values for parity with comment votes: "up" for
 * upvote and "down" for downvote. The vote record also tracks created_at,
 * updated_at, and an optional deleted_at for retention policies.
 *
 * Security and permissions: Only authenticated users (role: communityMember)
 * may vote, and users cannot vote on their own posts. If a user attempts to
 * vote on their own content, reject with: "You can’t vote on your own
 * posts/comments.". This endpoint sets the vote state to the requested value.
 * To revert to no vote (None), clients should call DELETE
 * /posts/{postId}/votes, which removes the record from active consideration.
 *
 * Business logic and score: Post score is computed as (number of "up") −
 * (number of "down") across active votes. The post entity itself does not
 * persist a score; instead, consumers compute it or consult denormalized views
 * such as mv_community_platform_global_latest_posts, which may lag real time.
 * This endpoint does not modify post content or comments.
 *
 * Error handling and validation: Validate state ∈ {"up","down"}. The target
 * post must exist and not be marked deleted_at. Ownership checks and join
 * membership are not required for voting; membership does not grant moderation
 * rights per product rules.
 *
 * @param props.connection
 * @param props.postId Unique identifier (UUID) of the post to vote on
 * @param props.body Desired vote state for the current user on the target post
 *   ("up" | "down")
 * @path /communityPlatform/communityMember/posts/:postId/votes
 * @accessor api.functional.communityPlatform.communityMember.posts.votes.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier (UUID) of the post to vote on */
    postId: string & tags.Format<"uuid">;

    /**
     * Desired vote state for the current user on the target post ("up" |
     * "down")
     */
    body: ICommunityPlatformPostVote.IUpdate;
  };
  export type Body = ICommunityPlatformPostVote.IUpdate;
  export type Response = ICommunityPlatformPostVote;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/communityMember/posts/:postId/votes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/communityMember/posts/${encodeURIComponent(props.postId ?? "null")}/votes`;
  export const random = (): ICommunityPlatformPostVote =>
    typia.random<ICommunityPlatformPostVote>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove the current user’s active vote from community_platform_post_votes.
 *
 * Remove the authenticated user’s vote on the specified post so that their
 * state becomes "None". The underlying community_platform_post_votes table
 * enforces one record per (post, user) with a state string and timestamps
 * (created_at, updated_at, deleted_at). Clearing the vote should result in no
 * active vote record for this (post, user) pair. Read paths must exclude votes
 * where deleted_at is set.
 *
 * Security and permissions: Only authenticated users may clear their own votes;
 * attempting to clear a vote on a non-existent post should return a not-found
 * error. Users cannot meaningfully "clear" a vote on their own post if no vote
 * exists; in all cases, the outcome should be that no active vote remains for
 * this (post, user) pair.
 *
 * Notes on scoring and views: Removing a vote changes the effective score
 * (upvotes − downvotes) and will be reflected in subsequent queries or
 * materialized views (mv_community_platform_global_latest_posts) after their
 * refresh cycle. This endpoint does not alter the post resource or comments and
 * returns no response body.
 *
 * @param props.connection
 * @param props.postId Unique identifier (UUID) of the post whose vote will be
 *   cleared
 * @path /communityPlatform/communityMember/posts/:postId/votes
 * @accessor api.functional.communityPlatform.communityMember.posts.votes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier (UUID) of the post whose vote will be cleared */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/communityMember/posts/:postId/votes",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/communityMember/posts/${encodeURIComponent(props.postId ?? "null")}/votes`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
