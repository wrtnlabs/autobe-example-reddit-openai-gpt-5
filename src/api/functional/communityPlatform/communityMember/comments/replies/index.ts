import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformComment } from "../../../../../structures/ICommunityPlatformComment";

/**
 * Create a reply comment (community_platform_comments) under a parent comment.
 *
 * Create a new reply to a comment by inserting into the
 * community_platform_comments table. The model defines required fields
 * including community_platform_post_id, community_platform_user_id (author),
 * content (2–2,000 characters, plain text), and lifecycle timestamps
 * (created_at, updated_at), with optional parent_id to enable nesting. For a
 * reply, parent_id must be set to the commentId from the path, and
 * community_platform_post_id should match the parent comment’s post to preserve
 * thread integrity.
 *
 * This operation requires authentication (role "communityMember") and enforces
 * authorship rules. It must validate that the parent comment exists and is not
 * marked removed via deleted_at, and that the content meets length constraints
 * defined in the schema comments. Upon success, the API returns the newly
 * created comment as ICommunityPlatformComment so the client can update the
 * thread optimistically and reconcile with authoritative state.
 *
 * Related operations include listing replies for pagination and visibility, and
 * subsequent edit/delete actions by the reply’s author. Error handling includes
 * invalid parent references, content validation failures, or permission issues
 * for unauthenticated actors.
 *
 * @param props.connection
 * @param props.commentId Parent comment's ID (UUID) to reply to
 * @param props.body Data required to create a reply comment (content and
 *   metadata)
 * @path /communityPlatform/communityMember/comments/:commentId/replies
 * @accessor api.functional.communityPlatform.communityMember.comments.replies.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Parent comment's ID (UUID) to reply to */
    commentId: string & tags.Format<"uuid">;

    /** Data required to create a reply comment (content and metadata) */
    body: ICommunityPlatformComment.ICreate;
  };
  export type Body = ICommunityPlatformComment.ICreate;
  export type Response = ICommunityPlatformComment;

  export const METADATA = {
    method: "POST",
    path: "/communityPlatform/communityMember/comments/:commentId/replies",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/communityMember/comments/${encodeURIComponent(props.commentId ?? "null")}/replies`;
  export const random = (): ICommunityPlatformComment =>
    typia.random<ICommunityPlatformComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
