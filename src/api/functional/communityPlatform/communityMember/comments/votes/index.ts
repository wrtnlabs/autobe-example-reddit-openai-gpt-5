import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommentVote } from "../../../../../structures/ICommunityPlatformCommentVote";

/**
 * Update a communityMember’s vote on a comment in
 * community_platform_comment_votes.
 *
 * This operation updates the per-user voting state on a comment, referencing
 * the community_platform_comment_votes table. According to the Prisma schema,
 * each vote record has fields including id (UUID),
 * community_platform_comment_id (UUID), community_platform_user_id (UUID),
 * state (string), created_at, updated_at, and deleted_at. The application layer
 * uses state values like "Upvote" or "Downvote" to represent the active vote
 * selection. Absence of a record or a record with a deletion timestamp
 * indicates no active vote for a (comment, user) pair.
 *
 * Security and permissions follow the platform’s guardrails: only authenticated
 * users (role communityMember) can vote; users cannot vote on their own
 * comments; and attempts to vote while unauthenticated should be blocked by
 * upper layers. Ownership rules and messages align with the requirements (e.g.,
 * prevent self-votes and show the standard message). The endpoint should ensure
 * there is at most one active vote per (comment, user) tuple in alignment with
 * the @@unique constraint on (community_platform_comment_id,
 * community_platform_user_id).
 *
 * This operation relates to community_platform_comments via
 * community_platform_comment_id and to community_platform_users via
 * community_platform_user_id. It must set or update the vote state to "Upvote"
 * or "Downvote" while maintaining updated_at timestamps. Business validation
 * should enforce the canonical vote state values and ensure state transitions
 * follow the defined behavior (e.g., None→Upvote, Upvote→Downvote). Any
 * conflicting prior records should be brought to a single active (or removed)
 * state to preserve the unique constraint.
 *
 * When implementing, consider idempotency and the voting state machine. If the
 * incoming desired state matches the current active state, the operation should
 * return the current representation without additional side effects. If a
 * different state is supplied, update the record accordingly. If a prior record
 * exists but was marked deleted (via deleted_at), it should be reactivated and
 * updated to the desired state. Errors include invalid commentId, missing
 * comment, invalid state value, or attempts by the author to vote on their own
 * comment.
 *
 * @param props.connection
 * @param props.commentId Target comment’s ID
 * @param props.body Desired vote state for the target comment
 * @path /communityPlatform/communityMember/comments/:commentId/votes
 * @accessor api.functional.communityPlatform.communityMember.comments.votes.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Target comment’s ID */
    commentId: string & tags.Format<"uuid">;

    /** Desired vote state for the target comment */
    body: ICommunityPlatformCommentVote.IUpdate;
  };
  export type Body = ICommunityPlatformCommentVote.IUpdate;
  export type Response = ICommunityPlatformCommentVote;

  export const METADATA = {
    method: "PUT",
    path: "/communityPlatform/communityMember/comments/:commentId/votes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/communityMember/comments/${encodeURIComponent(props.commentId ?? "null")}/votes`;
  export const random = (): ICommunityPlatformCommentVote =>
    typia.random<ICommunityPlatformCommentVote>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove the current communityMember’s vote on a comment
 * (community_platform_comment_votes).
 *
 * This operation clears the current vote for the caller on the target comment,
 * referencing the community_platform_comment_votes table which defines a
 * per-user vote record keyed uniquely by (community_platform_comment_id,
 * community_platform_user_id). The schema includes fields id,
 * community_platform_comment_id, community_platform_user_id, state, created_at,
 * updated_at, and deleted_at. Removing a vote means ensuring there is no active
 * vote record for the (comment, user) combination after the operation
 * completes.
 *
 * Security and permissions follow platform rules: only authenticated users
 * (communityMember) can modify vote state, and users cannot vote on their own
 * comments (attempts should be rejected before reaching this endpoint or
 * handled with appropriate validation messages). The removal action should be
 * idempotent; if no active vote exists for the user on the target comment, the
 * operation completes successfully with no changes.
 *
 * This endpoint relates to community_platform_comments and
 * community_platform_users through the foreign keys in the vote row. On
 * success, the user’s vote state transitions to None for the specified comment.
 * Typical errors include invalid commentId, missing comment, or authorization
 * failures.
 *
 * @param props.connection
 * @param props.commentId Target comment’s ID
 * @path /communityPlatform/communityMember/comments/:commentId/votes
 * @accessor api.functional.communityPlatform.communityMember.comments.votes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Target comment’s ID */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communityPlatform/communityMember/comments/:commentId/votes",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/communityMember/comments/${encodeURIComponent(props.commentId ?? "null")}/votes`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
