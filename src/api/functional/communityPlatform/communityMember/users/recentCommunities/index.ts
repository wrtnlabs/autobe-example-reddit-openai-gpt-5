import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformRecentCommunity } from "../../../../../structures/ICommunityPlatformRecentCommunity";
import { IPageICommunityPlatformRecentCommunity } from "../../../../../structures/IPageICommunityPlatformRecentCommunity";

/**
 * List a user’s recent communities from community_platform_recent_communities.
 *
 * Fetch the per-user Recent Communities list maintained in the
 * community_platform_recent_communities table. Per the Prisma schema, each
 * record references a user (community_platform_user_id) and a community
 * (community_platform_community_id) and stores last_activity_at, created_at,
 * and updated_at timestamps. The application uses last_activity_at to order the
 * top entries for sidebar rendering and quick navigation.
 *
 * Security and permissions: Access requires an authenticated user context
 * because the resource exposes user-specific navigation data. Provider logic
 * should ensure a user can retrieve only their own recent list (path userId
 * must match the authenticated subject), while privileged support views—if
 * any—remain enforced in business logic. No write occurs through this endpoint;
 * it is a read-only retrieval.
 *
 * Entity relationships and behavior: Each record forms a unique mapping of
 * (user, community), ensuring no duplicates in the list. When eligible
 * activities occur (e.g., visit, post, comment, vote, join/leave), the system
 * updates last_activity_at and maintains the most recent communities in order.
 * Records with a non-null deleted_at should be excluded from normal reads.
 *
 * Validation and related operations: The request body can carry pagination and
 * sorting directives (commonly ordering by last_activity_at descending). If the
 * userId path parameter does not correspond to an existing user, return a
 * not-found response. Join/leave and other actions that influence recency are
 * handled elsewhere and update this table implicitly; this endpoint is a view
 * over that store.
 *
 * @param props.connection
 * @param props.userId Target user’s ID whose recent communities are requested
 * @param props.body Search, filtering, sorting, and pagination parameters for
 *   per-user recent communities
 * @path /communityPlatform/communityMember/users/:userId/recentCommunities
 * @accessor api.functional.communityPlatform.communityMember.users.recentCommunities.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Target user’s ID whose recent communities are requested */
    userId: string & tags.Format<"uuid">;

    /**
     * Search, filtering, sorting, and pagination parameters for per-user
     * recent communities
     */
    body: ICommunityPlatformRecentCommunity.IRequest;
  };
  export type Body = ICommunityPlatformRecentCommunity.IRequest;
  export type Response = IPageICommunityPlatformRecentCommunity.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/communityMember/users/:userId/recentCommunities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/communityMember/users/${encodeURIComponent(props.userId ?? "null")}/recentCommunities`;
  export const random = (): IPageICommunityPlatformRecentCommunity.ISummary =>
    typia.random<IPageICommunityPlatformRecentCommunity.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
