import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunity } from "../../../../structures/ICommunityPlatformCommunity";
import { IPageICommunityPlatformCommunity } from "../../../../structures/IPageICommunityPlatformCommunity";

/**
 * Search communities (community_platform_communities) with Name Match or
 * Recently Created sorting.
 *
 * Search sub-communities using the community_platform_communities table, which
 * stores immutable name, name_key (normalized CI uniqueness), category,
 * optional description, optional logo_uri/banner_uri, timestamps (created_at,
 * updated_at, last_active_at), and deleted_at for visibility control. The API
 * excludes records where deleted_at is set. Name-based ranking is performed
 * according to business rules: exact case-insensitive match of name, then
 * starts-with, then token containment, then fuzzy proximity, with tie-breakers
 * on created_at desc then id desc. GIN trigram indexes on name and description
 * support efficient matching as indicated by the schema indices.
 *
 * Security and access: This endpoint is public (no authentication required) and
 * returns only non-deleted communities. Readers may also require per-item flags
 * like isMember for the current user, which can be computed when authentication
 * is present but does not change the public accessibility of the search
 * itself.
 *
 * Database relationships and derived fields: Member count derives from the
 * number of rows in community_platform_community_members referencing the target
 * community with deleted_at null. Rules can be shown from
 * community_platform_community_rules (top 5 by order_index) when the client
 * chooses to display them in detail views. Sorting options include nameMatch
 * (ranking as above) and recentlyCreated which orders by created_at desc and
 * then id desc. Reserved name handling and name immutability are enforced at
 * the application layer; uniqueness is maintained by name_key at the database
 * level.
 *
 * Validation and business logic: The request validates that the query is at
 * least 2 characters after normalization (trim, case-insensitive,
 * diacritics-insensitive, hyphen/underscore as separators). Pagination uses a
 * 20-item page size with an opaque cursor derived from the active sort’s
 * ordering tuple to maintain deterministic continuation. Deleted communities
 * (deleted_at not null) are excluded, and deletion cascades remove dependent
 * entities from visibility (posts and memberships) due to onDelete: Cascade on
 * relations.
 *
 * Related operations: Often used with Explore pages or Community detail
 * retrieval by name. Error handling includes 400 for too-short queries (“Please
 * enter at least 2 characters.”) and 5xx for transient failures (“A temporary
 * error occurred. Please try again in a moment.”).
 *
 * @param props.connection
 * @param props.body Community search parameters: normalized query, sort
 *   (nameMatch|recentlyCreated), optional category filter, and cursor
 *   pagination.
 * @path /communityPlatform/search/communities
 * @accessor api.functional.communityPlatform.search.communities.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Community search parameters: normalized query, sort
     * (nameMatch|recentlyCreated), optional category filter, and cursor
     * pagination.
     */
    body: ICommunityPlatformCommunity.IRequest;
  };
  export type Body = ICommunityPlatformCommunity.IRequest;
  export type Response = IPageICommunityPlatformCommunity.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/search/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/search/communities";
  export const random = (): IPageICommunityPlatformCommunity.ISummary =>
    typia.random<IPageICommunityPlatformCommunity.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
