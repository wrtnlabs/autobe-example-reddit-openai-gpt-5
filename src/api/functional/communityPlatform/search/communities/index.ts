import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunity } from "../../../../structures/ICommunityPlatformCommunity";
import { IPageICommunityPlatformCommunity } from "../../../../structures/IPageICommunityPlatformCommunity";

/**
 * Search communities by name with pagination and sorting
 * (community_platform_communities).
 *
 * This operation searches the community_platform_communities table. Communities
 * include immutable unique name, optional description, optional logo/banner
 * URIs, category reference (community_platform_categories), last_active_at,
 * disabled_at, and timestamps. Logical deletion is tracked by deleted_at and
 * such rows must be excluded from normal search results. The endpoint should
 * also hide communities with non-null disabled_at from promotion surfaces per
 * business rules.
 *
 * Ranking and sorting: Provide two primary modes. Name Match (default) orders
 * by similarity to the query against the name field, breaking ties by more
 * recent created_at and then larger id. Recently Created orders strictly by
 * created_at desc with a deterministic tiebreaker by id. Page size is typically
 * 20 with load-more. Category facets are supported by joining
 * community_platform_categories where useful for filters; categories carry
 * fields such as code, name, active, and display_order.
 *
 * Validation and business logic: Enforce minimum query length of 2 characters.
 * Accept optional filters such as category, active category enforcement, and
 * disabled status exclusion in accordance with platform policy. The response
 * should include essential summary fields such as community name (/c/{name}),
 * description snippet, category label, and member count computed from
 * community_platform_community_memberships if included by the request DTO.
 *
 * Related endpoints: Use community detail retrieval and feed endpoints for
 * deeper browsing. Search is publicly accessible and read-only, intended for
 * exploration and discovery.
 *
 * @param props.connection
 * @param props.body Search query, sorting (Name Match/Recently Created),
 *   filters, and pagination.
 * @path /communityPlatform/search/communities
 * @accessor api.functional.communityPlatform.search.communities.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search query, sorting (Name Match/Recently Created), filters, and
     * pagination.
     */
    body: ICommunityPlatformCommunity.IRequest;
  };
  export type Body = ICommunityPlatformCommunity.IRequest;
  export type Response = IPageICommunityPlatformCommunity.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/search/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/search/communities";
  export const random = (): IPageICommunityPlatformCommunity.ISummary =>
    typia.random<IPageICommunityPlatformCommunity.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
