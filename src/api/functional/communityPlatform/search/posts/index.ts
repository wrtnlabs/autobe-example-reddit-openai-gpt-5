import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPost } from "../../../../structures/ICommunityPlatformPost";
import { IPageICommunityPlatformPost } from "../../../../structures/IPageICommunityPlatformPost";

/**
 * Search posts by title/body with pagination and sorting
 * (community_platform_posts).
 *
 * This operation provides a search surface over community_platform_posts.
 * According to the schema, posts contain title (5–120 chars), body (10–10,000
 * chars), optional author_display_name, and timestamps (created_at/updated_at),
 * with a logical deletion timestamp deleted_at. The endpoint should match words
 * against title and body and exclude posts where deleted_at is not null. When
 * applicable, posts associated to communities with a non-null disabled_at
 * should be hidden from promotion surfaces; search implementations commonly
 * exclude such content.
 *
 * Sorting and pagination: The default sort is Newest, ordering by created_at
 * desc and using a deterministic tiebreaker by id when timestamps match.
 * Optionally support a Top sort that orders by computed score (upvotes −
 * downvotes via community_platform_post_votes), then by more recent created_at,
 * and then by larger id for ties. Page size is typically 20 with load-more
 * behavior; clients provide pagination cursors or page/index as defined by the
 * request DTO.
 *
 * Validation and business rules: Enforce minimum query length of 2 characters;
 * shorter queries should return a validation-style outcome per product copy
 * guidelines. Filtering can include community scoping, author scoping, date
 * ranges, and score thresholds if present in the request DTO. Results return
 * lightweight post summaries optimized for list display (community name, title,
 * author display name, relative time, comment count, score) while the
 * authoritative data remains in the posts and related tables.
 *
 * Related endpoints: Use community feeds or home feeds for non-search listing,
 * and use post detail retrieval (not defined here) to fetch the full post.
 * Error handling follows standard patterns and the search should be publicly
 * accessible for unauthenticated users.
 *
 * @param props.connection
 * @param props.body Search query, sorting (Newest/Top), and pagination settings
 *   for posts.
 * @path /communityPlatform/search/posts
 * @accessor api.functional.communityPlatform.search.posts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search query, sorting (Newest/Top), and pagination settings for
     * posts.
     */
    body: ICommunityPlatformPost.IRequest;
  };
  export type Body = ICommunityPlatformPost.IRequest;
  export type Response = IPageICommunityPlatformPost.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/search/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/search/posts";
  export const random = (): IPageICommunityPlatformPost.ISummary =>
    typia.random<IPageICommunityPlatformPost.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
