import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformComment } from "../../../../structures/ICommunityPlatformComment";
import { IPageICommunityPlatformComment } from "../../../../structures/IPageICommunityPlatformComment";

/**
 * Search comments (community_platform_comments) ordered by Newest with cursor
 * pagination.
 *
 * Search comment content across the community platform using the
 * community_platform_comments table. The schema defines id (UUID), content
 * (plain text), optional parent_id for nesting, created_at/updated_at
 * timestamps, and deleted_at to implement soft deletion. This endpoint filters
 * out comments where deleted_at is set and can optionally include author
 * display information and parent post context for result rendering. Efficient
 * text search is supported via a GIN trigram index on content, and Newest
 * ordering uses the (created_at, id) tuple indices present on post and parent
 * scopes.
 *
 * Security and access: Public endpoint; no authentication is required to read
 * comment search results. It returns only non-deleted comments and avoids
 * exposing restricted data. Rate limits and abuse-prevention measures may be
 * applied at the platform layer.
 *
 * Database relationships and ordering: Comments belong to posts
 * (community_platform_posts) and users (community_platform_users); replies are
 * represented via self-referencing parent_id with onDelete: Cascade. Ordering
 * is Newest only: order by created_at desc and then id desc for deterministic
 * tie-breaks. Scores for comments may be computed from
 * community_platform_comment_votes by aggregating value where deleted_at is
 * null; however, search ordering does not use score—only Newest is supported
 * for this endpoint.
 *
 * Validation and business logic: The request enforces a minimum query length of
 * 2 characters after normalization (trim/diacritics-insensitive;
 * hyphen/underscore treated as separators). Pagination uses a default page size
 * of 20 with an opaque cursor derived from (created_at desc, id desc). Deleted
 * comments and comments whose parent post has been removed (via cascade) are
 * excluded from results. Error handling follows platform standards: 400 for
 * queries shorter than 2 characters with the copy “Please enter at least 2
 * characters.” and 5xx for transient failures with the copy “A temporary error
 * occurred. Please try again in a moment.”
 *
 * Related operations: Clients often follow up by fetching the associated post
 * detail and locating the comment within the thread, or by loading the Post
 * Detail comments endpoint using Newest ordering and per-thread pagination.
 *
 * @param props.connection
 * @param props.body Comment search parameters with normalized query (≥2 chars)
 *   and cursor pagination (newest order).
 * @path /communityPlatform/search/comments
 * @accessor api.functional.communityPlatform.search.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Comment search parameters with normalized query (≥2 chars) and cursor
     * pagination (newest order).
     */
    body: ICommunityPlatformComment.IRequest;
  };
  export type Body = ICommunityPlatformComment.IRequest;
  export type Response = IPageICommunityPlatformComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/search/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/search/comments";
  export const random = (): IPageICommunityPlatformComment.ISummary =>
    typia.random<IPageICommunityPlatformComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
