import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformAdminAction } from "../../../../structures/ICommunityPlatformAdminAction";
import { IPageICommunityPlatformAdminAction } from "../../../../structures/IPageICommunityPlatformAdminAction";

/**
 * List administrative actions from community_platform_admin_actions.
 *
 * List administrative action records from community_platform_admin_actions. The
 * schema captures actor_user_id, optional target identifiers
 * (target_community_id, target_post_id, target_comment_id), a canonical action
 * string (e.g., "disable_community", "delete_post", "remove_comment"), and
 * optional reason, ip, and user_agent metadata. Time-based filtering and
 * indices on action/targets support efficient queries.
 *
 * Security and permissions: Only administrators may access this endpoint;
 * enforce role checks so non-administrative callers are denied. The operation
 * is read-only and is intended for audit and compliance oversight.
 *
 * Entity relationships and behavior: Each record links to an admin user
 * (community_platform_users.id) and may reference a community, post, or
 * comment. Providers may enrich summaries with actor usernames or resource
 * labels while respecting privacy constraints. Records where deleted_at is set
 * should be excluded from standard reads.
 *
 * Validation and related operations: The request body may include pagination
 * controls, sort options, action filters, actor filters, and date ranges.
 * Typical ordering is created_at descending. Use GET
 * /adminActions/{adminActionId} to retrieve an individual snapshot when
 * detailed review is required.
 *
 * @param props.connection
 * @param props.body Search criteria, filters, and pagination settings for
 *   administrative actions
 * @path /communityPlatform/systemAdmin/adminActions
 * @accessor api.functional.communityPlatform.systemAdmin.adminActions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria, filters, and pagination settings for administrative
     * actions
     */
    body: ICommunityPlatformAdminAction.IRequest;
  };
  export type Body = ICommunityPlatformAdminAction.IRequest;
  export type Response = IPageICommunityPlatformAdminAction.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/systemAdmin/adminActions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/systemAdmin/adminActions";
  export const random = (): IPageICommunityPlatformAdminAction.ISummary =>
    typia.random<IPageICommunityPlatformAdminAction.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific administrative action (community_platform_admin_actions) by
 * ID.
 *
 * Fetch one administrative action record by ID from
 * community_platform_admin_actions. Fields include actor_user_id (admin who
 * performed the action), optional target_community_id, target_post_id,
 * target_comment_id, canonical action string, optional reason text, ip,
 * user_agent, and created_at/updated_at timestamps. The record is an immutable
 * snapshot designed for audit, investigation, and compliance.
 *
 * Security and permissions: Administrator-only read operation. Provider logic
 * must ensure only authorized callers can retrieve these records; non-admin
 * requests should be denied.
 *
 * Validation and related operations: If the provided adminActionId does not
 * correspond to an existing record, return a not-found response. For listing
 * and filtering needs, use PATCH /adminActions.
 *
 * @param props.connection
 * @param props.adminActionId Unique administrative action ID to retrieve
 * @path /communityPlatform/systemAdmin/adminActions/:adminActionId
 * @accessor api.functional.communityPlatform.systemAdmin.adminActions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique administrative action ID to retrieve */
    adminActionId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformAdminAction;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/systemAdmin/adminActions/:adminActionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/systemAdmin/adminActions/${encodeURIComponent(props.adminActionId ?? "null")}`;
  export const random = (): ICommunityPlatformAdminAction =>
    typia.random<ICommunityPlatformAdminAction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminActionId")(() => typia.assert(props.adminActionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
