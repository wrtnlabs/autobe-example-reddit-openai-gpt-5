import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { IPageICommunityPlatformGlobalLatestPost } from "../../../structures/IPageICommunityPlatformGlobalLatestPost";

/**
 * Get Global Latest posts from mv_community_platform_global_latest_posts.
 *
 * Retrieve the Global Latest list from
 * mv_community_platform_global_latest_posts. The Prisma schema describes this
 * view as denormalizing display-critical fields and storing created_at for
 * ordering along with refreshed_at for cache freshness. Each row references the
 * authoritative post (community_platform_posts.id), its community
 * (community_platform_communities.id), and the author
 * (community_platform_users.id).
 *
 * Security and permissions: This is a public discovery endpoint intended for
 * the right sidebar. It returns only display-oriented, recent content; no
 * authentication is required.
 *
 * Behavior and errors: The response returns a container with up to 10 items,
 * ordered by created_at (newest first) consistent with the platformâ€™s Newest
 * definition and tie-breakers. If the view has no rows (e.g., empty system),
 * the endpoint returns an empty list without error.
 *
 * @param props.connection
 * @path /communityPlatform/globalLatestPosts
 * @accessor api.functional.communityPlatform.globalLatestPosts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = IPageICommunityPlatformGlobalLatestPost.ISummary;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/globalLatestPosts",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/globalLatestPosts";
  export const random = (): IPageICommunityPlatformGlobalLatestPost.ISummary =>
    typia.random<IPageICommunityPlatformGlobalLatestPost.ISummary>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
