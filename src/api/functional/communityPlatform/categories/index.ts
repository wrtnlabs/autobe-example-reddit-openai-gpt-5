import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCategory } from "../../../structures/ICommunityPlatformCategory";
import { IPageICommunityPlatformCategory } from "../../../structures/IPageICommunityPlatformCategory";

/**
 * Search and paginate categories from Prisma table
 * community_platform_categories.
 *
 * This operation queries the community_platform_categories table, which is the
 * canonical list of community categories used for Explore and filtering across
 * the platform. According to the schema comments, it maintains a unique code
 * (slug-like), a unique name for display, an optional description, a
 * UI-oriented display_order, an active flag, and lifecycle timestamps
 * (created_at, updated_at). The results are intended for list/grid surfaces and
 * administrative pickers.
 *
 * Security-wise, this is a read-only discovery endpoint and should be publicly
 * accessible. Authorization can remain open while the service ensures that only
 * records appropriate for public consumption are returned. Business logic
 * should exclude categories where deleted_at is not null and may also
 * optionally exclude inactive categories unless explicitly requested via
 * filters.
 *
 * From a data modeling standpoint, communities (community_platform_communities)
 * reference categories through community_platform_category_id. The uniqueness
 * constraints on code and name (both unique) enable deterministic linking and
 * avoid ambiguous labels. Client queries commonly search by partial code/name
 * and filter by active to power user-facing category chips and explore
 * filters.
 *
 * Validation and business logic considerations: the request body supports
 * pagination parameters, search terms for code/name, and sorting on
 * display_order (typical default ascending for chip presentation), name, or
 * created_at. Filters should be sanitized, and unknown sort keys rejected with
 * a clear error, while respecting the schemaâ€™s indices (e.g., active,
 * display_order; created_at) for performance.
 *
 * Related operations include GET /categories/{categoryId} for a single category
 * detail. Expected behavior includes deterministic ordering (stable within the
 * same response) and excluding records marked deleted via the deleted_at
 * column. Error handling should return meaningful messages for invalid sort
 * fields or malformed pagination inputs while preserving public read
 * semantics.
 *
 * @param props.connection
 * @param props.body Search, filter, sort, and pagination parameters for
 *   categories
 * @path /communityPlatform/categories
 * @accessor api.functional.communityPlatform.categories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search, filter, sort, and pagination parameters for categories */
    body: ICommunityPlatformCategory.IRequest;
  };
  export type Body = ICommunityPlatformCategory.IRequest;
  export type Response = IPageICommunityPlatformCategory.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/categories";
  export const random = (): IPageICommunityPlatformCategory.ISummary =>
    typia.random<IPageICommunityPlatformCategory.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single category (community_platform_categories) by ID.
 *
 * This operation retrieves one record from community_platform_categories using
 * the categoryId path parameter (UUID). As described in the schema, each
 * category carries a unique business code (code), a unique display name (name),
 * optional description, UI display_order, a Boolean active state, and lifecycle
 * timestamps (created_at, updated_at). Communities reference categories by id,
 * so this endpoint is often used to hydrate configuration screens and
 * contextual sidebars.
 *
 * Security considerations: this is a read-only public endpoint intended for
 * discovery and reference. Implementations should omit records where deleted_at
 * is not null. If the requested id does not correspond to an available record,
 * a not-found response should be produced.
 *
 * The underlying relationships include community_platform_communities
 * referencing the category; however, this endpoint returns only the category
 * entity. Validation ensures the identifier format is correct and that the
 * record exists and is eligible for return. Error handling should differentiate
 * invalid identifiers from valid-but-missing records, and avoid leaking
 * internal details.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the category (UUID)
 * @path /communityPlatform/categories/:categoryId
 * @accessor api.functional.communityPlatform.categories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the category (UUID) */
    categoryId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCategory;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): ICommunityPlatformCategory =>
    typia.random<ICommunityPlatformCategory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
