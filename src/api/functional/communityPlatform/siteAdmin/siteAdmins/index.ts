import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformSiteAdmin } from "../../../../structures/ICommunityPlatformSiteAdmin";
import { IPageICommunityPlatformSiteAdmin } from "../../../../structures/IPageICommunityPlatformSiteAdmin";

/**
 * List/search site administrator assignments (table:
 * community_platform_siteadmins).
 *
 * Retrieve a paginated list of site administrator assignments from the
 * community_platform_siteadmins table. Per Prisma schema comments, this model
 * grants administrative privileges to a community_platform_users account and
 * records audit timestamps: id (PK), community_platform_user_id (FK),
 * granted_at, optional revoked_at, created_at, updated_at, and deleted_at
 * (nullable). A unique constraint on community_platform_user_id ensures a
 * single assignment record per user (revocation tracked by updating
 * revoked_at).
 *
 * Security and authorization: Only privileged administrators should access this
 * listing. The endpoint requires siteAdmin role. By default, return only
 * currently visible rows (e.g., where deleted_at is null). Clients may filter
 * by active assignments (revoked_at is null) or include historical records by
 * specifying filters defined in the request DTO.
 *
 * Sorting and pagination: The default sort is granted_at descending, with a
 * deterministic tie-breaker on id descending. Cursor-based pagination uses the
 * last item’s (granted_at, id) tuple to continue the sequence without overlap
 * or omission, aligned with platform-wide pagination rules.
 *
 * Related operations: Use GET
 * /communityPlatform/siteAdmin/siteAdmins/{siteAdminId} when a single
 * assignment’s detail is needed. Role-granting and revocation actions are
 * outside the scope of this read API and are handled by separate administrative
 * workflows.
 *
 * Error handling: Invalid filters return 400. Authentication/authorization
 * failures return 401/403. Transient backend conditions return a recoverable
 * error message.
 *
 * @param props.connection
 * @param props.body Search criteria, sorting, and pagination for site admin
 *   assignments.
 * @path /communityPlatform/siteAdmin/siteAdmins
 * @accessor api.functional.communityPlatform.siteAdmin.siteAdmins.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria, sorting, and pagination for site admin assignments. */
    body: ICommunityPlatformSiteAdmin.IRequest;
  };
  export type Body = ICommunityPlatformSiteAdmin.IRequest;
  export type Response = IPageICommunityPlatformSiteAdmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/siteAdmin/siteAdmins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/siteAdmin/siteAdmins";
  export const random = (): IPageICommunityPlatformSiteAdmin.ISummary =>
    typia.random<IPageICommunityPlatformSiteAdmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a site administrator assignment by id (table:
 * community_platform_siteadmins).
 *
 * Fetch one site administrator assignment by id from
 * community_platform_siteadmins. The Prisma schema defines: id (PK),
 * community_platform_user_id (FK to community_platform_users), granted_at (when
 * admin privileges were granted), optional revoked_at (revocation time),
 * created_at/updated_at for audit, and a nullable deleted_at flag used to hide
 * removed records. The FK relation cascade behavior ensures referential
 * integrity with the owning user.
 *
 * Security: Access requires siteAdmin privileges. Records with deleted_at set
 * are typically hidden; this endpoint is read-only and does not alter
 * privileges.
 *
 * Behavior and errors: Return 404 if the id is not found or is hidden by
 * policy. Return 400 for invalid UUID formats. Return 401/403 for
 * authentication/authorization failures. Temporary failures return a
 * recoverable error response.
 *
 * @param props.connection
 * @param props.siteAdminId Target site administrator assignment’s UUID.
 * @path /communityPlatform/siteAdmin/siteAdmins/:siteAdminId
 * @accessor api.functional.communityPlatform.siteAdmin.siteAdmins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target site administrator assignment’s UUID. */
    siteAdminId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformSiteAdmin;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/siteAdmin/siteAdmins/:siteAdminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/siteAdmin/siteAdmins/${encodeURIComponent(props.siteAdminId ?? "null")}`;
  export const random = (): ICommunityPlatformSiteAdmin =>
    typia.random<ICommunityPlatformSiteAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("siteAdminId")(() => typia.assert(props.siteAdminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
