import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformUserRestriction } from "../../../../structures/ICommunityPlatformUserRestriction";
import { IPageICommunityPlatformUserRestriction } from "../../../../structures/IPageICommunityPlatformUserRestriction";

/**
 * Search user restriction assignments (community_platform_guestvisitors).
 *
 * This administrative operation returns a filtered, paginated set of user
 * restriction records sourced from community_platform_guestvisitors. Each
 * record links to a target user via community_platform_user_id and captures
 * enforcement state including restriction_type (business allowed values include
 * “read_only” and “suspended”), optional restricted_until (expiry), optional
 * restriction_reason, assigned_at when the restriction was applied, and
 * revoked_at when lifted. Standard audit fields include created_at and
 * updated_at, while deleted_at may be used for retention without immediate
 * physical removal.
 *
 * Security and permissions: access is limited to site administrators. The
 * provider MUST validate the caller’s administrative role (related to
 * community_platform_siteadmins). Non-admin callers must receive a 403 or 401
 * according to authentication/authorization status, using standardized copies.
 *
 * Request and response structure: use the request body to supply filters such
 * as by restriction_type, active-only (revoked_at is null), time windows using
 * assigned_at or restricted_until, and pagination inputs (cursor, limit).
 * Sorting commonly defaults to Newest by created_at (desc, then id desc). The
 * response returns a page object containing data[] and pagination info for
 * continuation.
 *
 * Related operations: use GET /userRestrictions/{restrictionId} to retrieve a
 * single record by ID when deeper inspection is required. Creation or updates
 * of restriction states should be handled by dedicated admin workflows and are
 * not part of this read/search endpoint.
 *
 * @param props.connection
 * @param props.body Search criteria, filters, sorting, and pagination
 *   parameters for user restrictions.
 * @path /communityPlatform/siteAdmin/userRestrictions
 * @accessor api.functional.communityPlatform.siteAdmin.userRestrictions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria, filters, sorting, and pagination parameters for user
     * restrictions.
     */
    body: ICommunityPlatformUserRestriction.IRequest;
  };
  export type Body = ICommunityPlatformUserRestriction.IRequest;
  export type Response = IPageICommunityPlatformUserRestriction;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/siteAdmin/userRestrictions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/siteAdmin/userRestrictions";
  export const random = (): IPageICommunityPlatformUserRestriction =>
    typia.random<IPageICommunityPlatformUserRestriction>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific user restriction (community_platform_guestvisitors).
 *
 * Get detailed information for a specific restriction record stored in
 * community_platform_guestvisitors. The record includes id (UUID),
 * community_platform_user_id (the affected account), restriction_type (values
 * such as “read_only” or “suspended”), restricted_until (optional),
 * restriction_reason (optional), assigned_at (start), and revoked_at
 * (optional). Standard audit fields created_at and updated_at are present, and
 * deleted_at may be used for retention without immediate physical removal.
 *
 * Security and permissions: this detail retrieval is restricted to site
 * administrators due to the sensitive nature of account-level restrictions.
 * Authentication failures should return 401 with the standard message, while
 * authorization failures should return 403. The operation is read-only and does
 * not modify any records.
 *
 * Error handling: if the provided restrictionId does not correspond to an
 * existing record, return an appropriate not-found response. This endpoint
 * complements PATCH /userRestrictions, which provides search capabilities
 * across many records.
 *
 * @param props.connection
 * @param props.restrictionId Target restriction’s UUID.
 * @path /communityPlatform/siteAdmin/userRestrictions/:restrictionId
 * @accessor api.functional.communityPlatform.siteAdmin.userRestrictions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Target restriction’s UUID. */
    restrictionId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformUserRestriction;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/siteAdmin/userRestrictions/:restrictionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/siteAdmin/userRestrictions/${encodeURIComponent(props.restrictionId ?? "null")}`;
  export const random = (): ICommunityPlatformUserRestriction =>
    typia.random<ICommunityPlatformUserRestriction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("restrictionId")(() => typia.assert(props.restrictionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
