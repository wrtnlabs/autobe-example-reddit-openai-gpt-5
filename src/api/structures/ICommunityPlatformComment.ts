import { tags } from "typia";

import { IECommunityPlatformVoteState } from "./IECommunityPlatformVoteState";
import { ICommunityPlatformUser } from "./ICommunityPlatformUser";
import { IEVoteState } from "./IEVoteState";
import { ICommunityPlatformPost } from "./ICommunityPlatformPost";
import { ICommunityPlatformCommunity } from "./ICommunityPlatformCommunity";

/**
 * Comment entity returned from read operations.
 *
 * This type represents a threaded comment stored in the Prisma model Comments:
 * community_platform_comments. It includes foreign keys to the parent post and
 * author account, hierarchical linkage through an optional parent_id for
 * replies, and standard audit timestamps (created_at/updated_at). A nullable
 * deleted_at implements soft deletion while preserving thread continuity.
 *
 * Response payloads may include derived fields such as score (aggregated from
 * community_platform_comment_votes) and myVote (the caller’s per-item vote),
 * which are not persisted in the comments table but computed at runtime.
 * Security note: no sensitive authentication fields are present in this DTO.
 * Passwords, token hashes, or normalized identity columns are never exposed.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformComment = {
  /**
   * Unique identifier of the comment.
   *
   * Prisma source: community_platform_comments.id (UUID primary key).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the post this comment belongs to.
   *
   * Prisma source: community_platform_comments.community_platform_post_id (FK
   * → posts.id).
   */
  postId: string & tags.Format<"uuid">;

  /**
   * Identifier of the user who authored this comment.
   *
   * Prisma source: community_platform_comments.community_platform_user_id (FK
   * → users.id).
   */
  authorId: string & tags.Format<"uuid">;

  /**
   * Identifier of the parent comment when this is a reply; null for root
   * comments.
   *
   * Prisma source: community_platform_comments.parent_id (nullable FK to
   * comments.id).
   */
  parentId?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Plain-text body of the comment. Line breaks are allowed; executable code
   * is prohibited by business rules.
   *
   * Prisma source: community_platform_comments.content. Creation/update
   * validations require length 2–2,000 characters, but response payloads may
   * include placeholder text for soft-deleted comments.
   */
  content: string;

  /**
   * Timestamp when the comment was created (ISO 8601, UTC).
   *
   * Prisma source: community_platform_comments.created_at. Used for Newest
   * sorting and relative time displays.
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Timestamp when the comment was last modified (ISO 8601, UTC).
   *
   * Prisma source: community_platform_comments.updated_at. Reflects edits
   * after creation.
   */
  updatedAt: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp (ISO 8601, UTC). When present (non-null), the
   * comment is considered deleted and its body should be hidden in public
   * views while preserving thread position.
   *
   * Prisma source: community_platform_comments.deleted_at.
   */
  deletedAt?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Computed score of the comment defined as upvotes minus downvotes.
   *
   * Derived at query time from community_platform_comment_votes (sum of value
   * where value ∈ {-1,1} and deleted_at is null). Not persisted in comments
   * table.
   */
  score?: (number & tags.Type<"int32">) | undefined;

  /**
   * The caller’s current vote on this comment. One of NONE, UPVOTE, or
   * DOWNVOTE. Included when an authenticated context is available; omitted
   * otherwise.
   *
   * Derived from community_platform_comment_votes for the (comment, user)
   * pair.
   */
  myVote?: IECommunityPlatformVoteState | undefined;

  /**
   * Minimal author information for display (id and displayName).
   *
   * Author account source: community_platform_users with optional
   * display_name used as the friendly label.
   */
  author?: ICommunityPlatformUser.ISummary | undefined;
};
export namespace ICommunityPlatformComment {
  /**
   * Request DTO for listing or searching comments with cursor-based
   * pagination.
   *
   * Backed by Comments.community_platform_comments and related indices.
   * Supports Newest ordering semantics across both post-scoped listings and
   * global search. The same DTO is reused across endpoints; some properties
   * (e.g., q) apply only to search scenarios.
   */
  export type IRequest = {
    /**
     * Opaque cursor token representing the boundary of the previous page
     * according to the active ordering tuple (Newest uses created_at DESC,
     * id DESC).
     */
    cursor?: string | undefined;

    /**
     * Maximum number of items to return (cursor-based pagination).
     *
     * Default is 20 for comments pages per business rules.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Optional normalized search query used by global comment search (≥ 2
     * characters after normalization).
     *
     * When used for listing comments under a single post, this field is
     * typically omitted.
     */
    q?: (string & tags.MinLength<2>) | undefined;
  };

  /**
   * Create DTO for a new comment under a post (and optionally as a reply).
   *
   * Corresponds to Prisma model Comments.community_platform_comments.
   * Requires authentication at the service layer; the author and post
   * associations are derived from path/auth context and are not accepted in
   * the payload.
   */
  export type ICreate = {
    /**
     * Plain-text comment content with line breaks allowed; executable code
     * is prohibited.
     *
     * Maps to Comments.community_platform_comments.content with business
     * constraints 2–2,000 characters.
     */
    content: string & tags.MinLength<2> & tags.MaxLength<2000>;

    /**
     * Optional parent comment identifier for creating a nested reply (must
     * belong to the same post).
     *
     * Backed by Comments.community_platform_comments.parent_id. Nesting
     * depth must not exceed 8 levels including the root; enforcement occurs
     * in service logic.
     */
    parentId?: (string & tags.Format<"uuid">) | null | undefined;
  };

  /**
   * Comment update payload.
   *
   * This DTO is used to edit an existing record in Prisma model
   * community_platform_comments. Only the content field is editable;
   * immutable associations (post, author, and parent) cannot be changed via
   * this operation. All fields are optional (Partial pattern); when provided,
   * content must satisfy the 2–2,000 character constraint.
   */
  export type IUpdate = {
    /**
     * New plain-text content for the comment. Line breaks allowed;
     * executable content prohibited.
     *
     * Validation aligns with business rules: length 2–2,000 characters.
     */
    content?: (string & tags.MinLength<2> & tags.MaxLength<2000>) | undefined;
  };

  /**
   * Comment summary DTO for list/search views.
   *
   * Maps to Comments.community_platform_comments and includes only safe,
   * public‑facing fields with computed aggregates (score, myVote) and
   * truncated content (excerpt). Large bodies are intentionally excluded from
   * summaries to meet performance and security guidance. Timestamps are
   * ISO‑8601 in UTC, and relationships are expressed via lightweight
   * reference DTOs.
   */
  export type ISummary = {
    /**
     * Primary identifier of the comment
     * (Comments.community_platform_comments.id).
     *
     * UUID generated at creation; participates in deterministic Newest
     * tie‑breakers together with createdAt.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Foreign key to the parent post
     * (Comments.community_platform_comments.community_platform_post_id →
     * Posts.community_platform_posts.id).
     */
    postId: string & tags.Format<"uuid">;

    /**
     * Optional parent comment ID for replies
     * (Comments.community_platform_comments.parent_id). Null for root
     * comments (depth 1).
     */
    parentId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Truncated plain‑text snippet derived from content for summary
     * displays (not persisted).
     *
     * Computed from Comments.community_platform_comments.content by the
     * provider; removes markup and limits to ~2 lines (~≤200 chars). Large
     * bodies are intentionally excluded from summaries.
     */
    excerpt?: (string & tags.MinLength<0> & tags.MaxLength<200>) | undefined;

    /**
     * Minimal author profile derived from Actors.community_platform_users.
     *
     * Security: never include password_hash or normalized keys. This
     * summary is safe for public responses.
     */
    author: ICommunityPlatformUser.ISummary;

    /**
     * Creation timestamp (Comments.community_platform_comments.created_at).
     * ISO‑8601 UTC. Used for Newest ordering and relative time.
     */
    createdAt: string & tags.Format<"date-time">;

    /**
     * Last modification timestamp
     * (Comments.community_platform_comments.updated_at). ISO‑8601 UTC.
     */
    updatedAt?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Computed score = upvotes − downvotes for this comment.
     *
     * Aggregated from Comments.community_platform_comment_votes where value
     * ∈ {1, −1} and deleted_at is null; not stored on the comment row.
     */
    score: number & tags.Type<"int32">;

    /**
     * Caller’s current vote on this comment. Null/omitted for
     * unauthenticated callers.
     *
     * Values are IEVoteState (UPVOTE, DOWNVOTE, NONE).
     */
    myVote?: IEVoteState | null | undefined;

    /**
     * Lightweight reference to the parent post for snippet contexts.
     *
     * Backed by Posts.community_platform_posts; includes essential card
     * fields only.
     */
    post?: ICommunityPlatformPost.IReference | undefined;

    /**
     * Lightweight reference to the community that the parent post belongs
     * to.
     *
     * Backed by Communities.community_platform_communities; name is
     * immutable and used for routing.
     */
    community?: ICommunityPlatformCommunity.IReference | undefined;
  };
}
