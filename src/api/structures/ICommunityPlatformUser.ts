import { tags } from "typia";

import { IECommunityPlatformUserSortBy } from "./IECommunityPlatformUserSortBy";
import { IEOrderDirection } from "./IEOrderDirection";

/**
 * User account entity for public/admin reads mapped from Prisma table
 * Actors.community_platform_users.
 *
 * This DTO intentionally excludes sensitive/internal columns such as
 * password_hash, email_normalized, username_normalized, and deleted_at. It
 * exposes only business-safe, public-facing properties and audit timestamps.
 * The descriptions below reference the original Prisma schema comments for each
 * column.
 *
 * Source table summary (Prisma): id (UUID PK), email, email_normalized (CI
 * uniqueness), username, username_normalized (CI uniqueness), password_hash
 * (secret), display_name?, last_login_at?, created_at, updated_at,
 * deleted_at?.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformUser = {
  /**
   * Primary key of community_platform_users.
   *
   * Prisma: id String @id @db.Uuid
   */
  id: string & tags.Format<"uuid">;

  /**
   * Human-readable email address stored in community_platform_users.email.
   *
   * Case-insensitive uniqueness is enforced at the database level by
   * email_normalized, which is not exposed.
   */
  email: string & tags.Format<"email">;

  /**
   * Preferred handle shown in UIs from community_platform_users.username.
   *
   * Case-insensitive uniqueness is enforced by username_normalized
   * internally; not exposed here.
   */
  username: string;

  /**
   * Optional display name (community_platform_users.display_name).
   *
   * May be null when the user has not set a display name.
   */
  displayName?: string | null | undefined;

  /**
   * Creation timestamp (community_platform_users.created_at).
   *
   * ISO-8601 in UTC as per API conventions.
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Last update timestamp (community_platform_users.updated_at).
   *
   * ISO-8601 in UTC as per API conventions.
   */
  updatedAt: string & tags.Format<"date-time">;

  /**
   * Most recent successful login timestamp
   * (community_platform_users.last_login_at).
   *
   * Optional and may be null. ISO-8601 in UTC.
   */
  lastLoginAt?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformUser {
  /**
   * User summary (public-facing fields only) derived from
   * Actors.community_platform_users.
   *
   * This compact view is suitable for embedding in authorization responses
   * and list views. It intentionally excludes sensitive columns
   * (password_hash) and internal normalized keys (email_normalized,
   * username_normalized) as well as soft-delete markers. All timestamps are
   * ISO-8601 UTC.
   */
  export type ISummary = {
    /**
     * Primary key of the user.
     *
     * Prisma: community_platform_users.id (UUID).
     */
    id: string & tags.Format<"uuid">;

    /**
     * Human-readable handle.
     *
     * Prisma: community_platform_users.username (case-insensitive
     * uniqueness enforced via username_normalized, which is not exposed).
     */
    username: string;

    /**
     * User’s email address in human-readable form.
     *
     * Prisma: community_platform_users.email (case-insensitive uniqueness
     * enforced via email_normalized, which is not exposed).
     */
    email: string;

    /**
     * Optional display name shown in posts/comments.
     *
     * Prisma: community_platform_users.display_name (nullable).
     */
    display_name?: string | null | undefined;

    /**
     * Timestamp of the most recent successful login, when present.
     *
     * Prisma: community_platform_users.last_login_at (nullable
     * timestamptz). ISO-8601 (UTC).
     */
    last_login_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * User creation timestamp for audit and ordering.
     *
     * Prisma: community_platform_users.created_at (timestamptz). ISO-8601
     * (UTC).
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last update timestamp for audit.
     *
     * Prisma: community_platform_users.updated_at (timestamptz). ISO-8601
     * (UTC).
     */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Administrative search/filter/sort request for listing user accounts
   * sourced from community_platform_users.
   *
   * Supports case-insensitive text matching on username/display_name (q),
   * exact/CI filters for email/username, role flags (isMember, isSiteAdmin),
   * optional inclusion of soft-deleted rows, date range filters for
   * created_at and last_login_at, and cursor-based pagination with
   * deterministic ordering.
   *
   * Prisma references: community_platform_users (id, email, email_normalized,
   * username, username_normalized, display_name, last_login_at, created_at,
   * updated_at, deleted_at), community_platform_registeredmembers,
   * community_platform_siteadmins.
   */
  export type IRequest = {
    /**
     * Free-text search over username/display_name (case-insensitive,
     * diacritics-insensitive).
     *
     * Prisma mapping: community_platform_users.username and display_name
     * (both trigram-indexed).
     */
    q?: (string & tags.MinLength<1> & tags.MaxLength<256>) | undefined;

    /**
     * Exact-match or case-insensitive email filter using the human-readable
     * email field.
     *
     * Note: CI uniqueness is enforced via email_normalized; providers may
     * normalize this filter internally.
     */
    email?: (string & tags.Format<"email">) | undefined;

    /**
     * Exact-match or case-insensitive username filter using the
     * human-readable username field.
     *
     * Note: CI uniqueness is enforced via username_normalized; providers
     * may normalize this filter internally.
     */
    username?: (string & tags.MinLength<1> & tags.MaxLength<64>) | undefined;

    /**
     * Filter by registered-member role assignment existence.
     *
     * True → has a row in community_platform_registeredmembers (deleted_at
     * is null unless explicitly included).
     */
    isMember?: boolean | undefined;

    /**
     * Filter by site-admin grant existence.
     *
     * True → has a row in community_platform_siteadmins where revoked_at is
     * null (unless explicitly included).
     */
    isSiteAdmin?: boolean | undefined;

    /**
     * Include soft-deleted accounts (users.deleted_at not null) in results
     * when true. Default is to exclude.
     */
    includeDeleted?: boolean | undefined;

    /** Lower bound (inclusive) for users.created_at. */
    createdFrom?: (string & tags.Format<"date-time">) | undefined;

    /** Upper bound (inclusive) for users.created_at. */
    createdTo?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Lower bound (inclusive) for users.last_login_at (nullable column).
     * Records with null can be handled per provider policy.
     */
    lastLoginFrom?: (string & tags.Format<"date-time">) | undefined;

    /** Upper bound (inclusive) for users.last_login_at (nullable column). */
    lastLoginTo?: (string & tags.Format<"date-time">) | undefined;

    /** Sort key to apply to the listing. */
    sortBy?: IECommunityPlatformUserSortBy | undefined;

    /** Sort direction to apply with sortBy. */
    order?: IEOrderDirection | undefined;

    /**
     * Opaque cursor encoding the active sort’s boundary tuple (e.g.,
     * createdAt+id for Newest). Used for deterministic continuation without
     * duplicates.
     */
    cursor?: string | undefined;

    /**
     * Maximum number of records to return per page. Defaults to 20; capped
     * at 100.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;
  };

  /**
   * Profile update request for a user account based on
   * community_platform_users.
   *
   * This DTO permits changing only non-sensitive, user-editable fields. It
   * must NOT accept password_hash, id, created_at, updated_at, or deleted_at.
   * Uniqueness for email/username must be enforced against the normalized
   * columns (email_normalized, username_normalized) at the application
   * layer.
   *
   * Typical usage: PUT /communityPlatform/registeredMember/users/{userId}.
   */
  export type IUpdate = {
    /**
     * New human-readable email (community_platform_users.email).
     *
     * Application must also update email_normalized consistently and
     * enforce CI uniqueness.
     */
    email?: (string & tags.Format<"email">) | undefined;

    /**
     * New preferred handle (community_platform_users.username).
     *
     * Application must also update username_normalized consistently and
     * enforce CI uniqueness.
     */
    username?: (string & tags.MinLength<3> & tags.MaxLength<30>) | undefined;

    /**
     * Optional display title (community_platform_users.display_name).
     *
     * Provide null to clear the display name.
     */
    displayName?: (string & tags.MaxLength<64>) | null | undefined;
  };

  /**
   * Concise author label used on posts/comments. Contains only public-facing
   * identity needed for display and ownership checks.
   *
   * Sensitive fields like email, username_normalized, email_normalized, and
   * password_hash are intentionally omitted.
   */
  export type IAuthorLabel = {
    /**
     * Author’s user ID.
     *
     * Maps to Prisma "community_platform_users.id".
     */
    id: string & tags.Format<"uuid">;

    /**
     * Optional author display name label. When null/empty, clients render a
     * default such as "Anonymous".
     *
     * Maps to Prisma "community_platform_users.display_name" for accounts,
     * or to the post’s own author_display_name when applicable depending on
     * provider composition.
     */
    displayName?:
      | (string & tags.MinLength<0> & tags.MaxLength<255>)
      | null
      | undefined;
  };
}
