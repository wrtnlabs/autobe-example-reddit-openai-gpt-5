import { tags } from "typia";

import { IECommunityPlatformCommunityRuleOrderBy } from "./IECommunityPlatformCommunityRuleOrderBy";
import { IESortDirection } from "./IESortDirection";

/**
 * Community Rule entity representing an ordered, owner-authored guideline
 * belonging to a specific community.
 *
 * Based on Prisma model Communities → community_platform_community_rules. Each
 * record stores a stable order_index and short text (1–200 characters) and
 * belongs to a parent community via community_platform_community_id. Rules are
 * displayed in deterministic order for public presentation.
 *
 * Security and ownership: Only the community owner may create, edit, or remove
 * rules (enforced by provider logic). The parent association is controlled by
 * server routing; clients must not alter it.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunityRule = {
  /**
   * Primary key.
   *
   * Prisma column: community_platform_community_rules.id (UUID). This
   * identifier is generated by the system and must not be supplied by
   * clients.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Parent community identifier.
   *
   * Prisma FK column:
   * community_platform_community_rules.community_platform_community_id →
   * community_platform_communities.id. This association is enforced by
   * server-side routing and ownership checks; clients do not change this
   * linkage in update flows.
   */
  community_platform_community_id: string & tags.Format<"uuid">;

  /**
   * Display order index unique within a community.
   *
   * Prisma column: community_platform_community_rules.order_index (Int). The
   * application preserves deterministic ordering. Minimum 0 (implementations
   * may treat values as 0-based or 1-based per schema comments).
   */
  order_index: number & tags.Type<"int32"> & tags.Minimum<0>;

  /**
   * Rule text between 1 and 200 characters.
   *
   * Prisma column: community_platform_community_rules.text (String). Stored
   * as-is; UI may truncate for display while preserving full text.
   */
  text: string & tags.MinLength<1> & tags.MaxLength<200>;

  /**
   * Creation timestamp (UTC).
   *
   * Prisma column: community_platform_community_rules.created_at
   * (Timestamptz).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp (UTC).
   *
   * Prisma column: community_platform_community_rules.updated_at
   * (Timestamptz).
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformCommunityRule {
  /**
   * Creation payload for a Community Rule.
   *
   * Security: Do not accept parent or actor identifiers in the body. The
   * parent community comes from the path parameter; authorship/ownership is
   * validated from authentication context. System-managed fields (id,
   * created_at, updated_at, deleted_at) are excluded from client input.
   */
  export type ICreate = {
    /**
     * Display order index unique within the community.
     *
     * Required for creation. The application enforces uniqueness per
     * community.
     */
    order_index: number & tags.Type<"int32"> & tags.Minimum<0>;

    /**
     * Rule text between 1 and 200 characters.
     *
     * Plain text only; UI may truncate for display but stored text remains
     * intact.
     */
    text: string & tags.MinLength<1> & tags.MaxLength<200>;
  };

  /**
   * Update payload for a Community Rule.
   *
   * All fields are optional (Partial<T>) and only editable properties are
   * present. Immutable/ownership fields (id, community_platform_community_id,
   * created_at, updated_at) are excluded. Security: Do not accept actor IDs;
   * parent community comes from path and server context.
   */
  export type IUpdate = {
    /**
     * Updated display order index unique within the community.
     *
     * Optional. Must remain unique per community.
     */
    order_index?:
      | (number & tags.Type<"int32"> & tags.Minimum<0>)
      | null
      | undefined;

    /**
     * Updated rule text between 1 and 200 characters.
     *
     * Optional. Plain text only; UI may truncate visually.
     */
    text?:
      | (string & tags.MinLength<1> & tags.MaxLength<200>)
      | null
      | undefined;
  };

  /**
   * Request parameters for listing/searching community rules of a specific
   * community.
   *
   * Pagination and sorting fields align with platform list conventions. The
   * parent community is provided by the path parameter and must not be
   * included here. Records with deleted_at not null are excluded by default
   * business rules.
   */
  export type IRequest = {
    /**
     * Page number (uint32 semantics). Optional. When null or omitted,
     * server uses default paging.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Page size/limit (uint32 semantics). Optional. Default: 20 when null
     * or omitted.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Sort key for listing rule items. Defaults to order_index when
     * omitted.
     */
    orderBy?: IECommunityPlatformCommunityRuleOrderBy | undefined;

    /**
     * Sort direction for ordering results. Defaults depend on orderBy (asc
     * for order_index; desc for created_at/updated_at).
     */
    direction?: IESortDirection | undefined;

    /**
     * Optional free-text search over rule text. Minimum length 2 is
     * required to execute search per platform standards.
     */
    search?: (string & tags.MinLength<2>) | null | undefined;
  };

  /**
   * Allowed sort keys for Community Rule listings.
   *
   * - Order_index: Deterministic display order within a community
   * - Created_at: Creation time (Newest semantics)
   * - Updated_at: Last modified time
   */
  export type IEOrderBy = "order_index" | "created_at" | "updated_at" | "";
}
