import { tags } from "typia";

import { IECommunityPlatformCommentVoteState } from "./IECommunityPlatformCommentVoteState";

/**
 * Comment vote entity suitable for response payloads.
 *
 * Exposes identifiers, vote state, and lifecycle timestamps as described by
 * Prisma community_platform_comment_votes. Contains no sensitive credential or
 * token fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommentVote = {
  /**
   * Primary key of the vote record.
   *
   * Prisma: community_platform_comment_votes.id
   */
  id: string & tags.Format<"uuid">;

  /**
   * Target comment identifier.
   *
   * Prisma: community_platform_comment_votes.community_platform_comment_id →
   * community_platform_comments.id
   */
  community_platform_comment_id: string & tags.Format<"uuid">;

  /**
   * Voter user identifier (author of the vote).
   *
   * Prisma: community_platform_comment_votes.community_platform_user_id →
   * community_platform_users.id
   */
  community_platform_user_id: string & tags.Format<"uuid">;

  /**
   * Current vote state for this (comment, user) pair.
   *
   * Prisma: community_platform_comment_votes.state
   */
  state: IECommunityPlatformCommentVoteState;

  /**
   * Creation timestamp (UTC).
   *
   * Prisma: community_platform_comment_votes.created_at
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp (UTC).
   *
   * Prisma: community_platform_comment_votes.updated_at
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp. Null when active.
   *
   * Prisma: community_platform_comment_votes.deleted_at
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformCommentVote {
  /**
   * Request payload to set the caller's vote state on a comment.
   *
   * Maps to Prisma `community_platform_comment_votes` where one active row
   * per (comment, user) reflects the current `state`. Security: actor is
   * inferred from authentication; do not accept user IDs in requests.
   */
  export type IUpdate = {
    /**
     * Desired vote state to apply for the current user on the target
     * comment.
     *
     * Accepted values are strictly "Upvote" or "Downvote" as per Prisma
     * `community_platform_comment_votes.state`.
     */
    state: IECommunityPlatformCommentVoteState;
  };
}
