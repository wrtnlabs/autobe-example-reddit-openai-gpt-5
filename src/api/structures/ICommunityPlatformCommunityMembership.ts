import { tags } from "typia";

/**
 * Community membership record linking a user to a community.
 *
 * Based on Prisma table community_platform_community_memberships. Tracks join
 * time (created_at), last update, and optional leave time (deleted_at). Used
 * for rosters, personalization (Home feed inclusion), and join/leave history.
 * Ownership is server-controlled; clients never provide actor IDs in request
 * bodies.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunityMembership = {
  /**
   * Primary key.
   *
   * Prisma: community_platform_community_memberships.id
   */
  id: string & tags.Format<"uuid">;

  /**
   * Joined community identifier.
   *
   * Prisma:
   * community_platform_community_memberships.community_platform_community_id
   */
  community_platform_community_id: string & tags.Format<"uuid">;

  /**
   * Member user identifier.
   *
   * Prisma:
   * community_platform_community_memberships.community_platform_user_id
   */
  community_platform_user_id: string & tags.Format<"uuid">;

  /**
   * Membership creation timestamp (join time).
   *
   * Prisma: created_at
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp for this membership row.
   *
   * Prisma: updated_at
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp (leave time). Null when active.
   *
   * Prisma: deleted_at
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformCommunityMembership {
  /**
   * Creation body for joining a community.
   *
   * Security: The server infers the acting user from authentication context
   * and the target community from the path parameter. Clients must not send
   * actor IDs, record IDs, or timestamps.
   */
  export type ICreate = {};

  /**
   * Request parameters for listing memberships of a community (Prisma:
   * community_platform_community_memberships).
   *
   * Security: Does not accept actor IDs directly. Ownership/privilege is
   * enforced by route scoping and auth, not by body fields.
   */
  export type IRequest = {
    /** Page number (1-based). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Items per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Include logically ended memberships (deleted_at not null). Prisma:
     * community_platform_community_memberships.deleted_at.
     */
    include_ended?: boolean | null | undefined;

    /**
     * Filter memberships created at or after this timestamp. Prisma:
     * community_platform_community_memberships.created_at.
     */
    created_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter memberships created at or before this timestamp. Prisma:
     * community_platform_community_memberships.created_at.
     */
    created_to?: (string & tags.Format<"date-time">) | null | undefined;

    /** Sort key for roster listings. */
    sort_by?: "created_at" | "updated_at" | null | undefined;

    /** Sort direction; ascending or descending. */
    sort_dir?: "asc" | "desc" | null | undefined;
  };

  /**
   * Community Membership Summary (community_platform_community_memberships).
   *
   * Provides roster-ready identifiers and lifecycle timestamps for membership
   * records, aligned with the Prisma junction table. Designed for list and
   * admin views that focus on membership state without embedding large
   * user/community payloads.
   */
  export type ISummary = {
    /**
     * Primary key of the membership row
     * (community_platform_community_memberships.id).
     *
     * Each row represents a join relationship between a user and a
     * community.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Parent community ID
     * (community_platform_community_memberships.community_platform_community_id).
     *
     * References community_platform_communities.id.
     */
    community_platform_community_id: string & tags.Format<"uuid">;

    /**
     * Member user ID
     * (community_platform_community_memberships.community_platform_user_id).
     *
     * References community_platform_users.id.
     */
    community_platform_user_id: string & tags.Format<"uuid">;

    /**
     * Membership creation timestamp (join time)
     * (community_platform_community_memberships.created_at).
     *
     * ISO 8601 date-time string.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last update timestamp for the membership row
     * (community_platform_community_memberships.updated_at).
     *
     * Used for auditing and historical analysis.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft deletion timestamp (leave time)
     * (community_platform_community_memberships.deleted_at).
     *
     * Null indicates an active membership; non-null indicates the
     * membership has ended.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
