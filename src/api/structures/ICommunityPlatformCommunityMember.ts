import { tags } from "typia";

import { ICommunityPlatformCommunity } from "./ICommunityPlatformCommunity";

/**
 * Membership snapshot for a user’s relation to a community.
 *
 * This DTO merges multiple Prisma sources for presentation: the community
 * entity from "community_platform_communities" and the membership state from
 * "community_platform_community_members". It never exposes internal foreign
 * keys directly; the authenticated user identity is implied by context.
 *
 * Security: No ownership-changing fields are present. This DTO intentionally
 * omits sensitive account information and any internal flags. Member counts are
 * read-only computed values.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunityMember = {
  /**
   * Community reference wrapped in a minimal, safe-to-expose view. Mapped
   * from Prisma model "community_platform_communities" using the immutable
   * name and optional branding fields.
   */
  community: ICommunityPlatformCommunity.IBasic;

  /**
   * Whether the authenticated user is currently a member of the community.
   *
   * This flag reflects presence (deleted_at is null) of an active membership
   * row in Prisma model "community_platform_community_members" for (user,
   * community).
   */
  joined: boolean;

  /**
   * Number of active members in the community.
   *
   * Computed as the count of rows in "community_platform_community_members"
   * for the community where deleted_at is null. Used to update UI immediately
   * after join/leave.
   *
   * Type note: integer with non-negative domain.
   */
  memberCount: number & tags.Type<"int32"> & tags.Minimum<0>;

  /**
   * Timestamp when the current active membership row was created (ISO-8601 in
   * UTC) or null when not joined.
   *
   * Maps to "community_platform_community_members.created_at" for the current
   * user’s active record. Exposed for relative time rendering in clients.
   */
  joinedAt?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformCommunityMember {
  /**
   * List container of active community memberships for a user.
   *
   * Sourced from Memberships.community_platform_community_members (created_at
   * as joinedAt) joined to Communities.community_platform_communities (name,
   * category, branding) for display. Excludes soft-deleted memberships and
   * soft-deleted communities.
   */
  export type IList = {
    /**
     * Active memberships (deleted_at is null) for the specified user, each
     * paired with community summary details and the joined timestamp.
     */
    data: ICommunityPlatformCommunityMember[];
  };

  /**
   * Request payload to set the authenticated user’s membership state for a
   * community.
   *
   * This DTO is used by membership toggling operations that manipulate the
   * Prisma table "community_platform_community_members". It expresses the
   * final desired state only (join=true or join=false) and does not carry
   * user IDs because the actor is resolved from authentication context.
   *
   * Security and integrity: The actor identity comes from the authenticated
   * session, never from the request body. Idempotent semantics are required:
   * repeated requests yielding the same final state must not create
   * duplicates.
   */
  export type IUpdate = {
    /**
     * Desired final membership state for the authenticated user with
     * respect to the target community.
     *
     * True means the caller intends to be a member (Join). false means the
     * caller intends not to be a member (Leave).
     *
     * Business rules: This request triggers idempotent membership upsert or
     * removal in the Prisma model "community_platform_community_members".
     * The server will update recency in
     * "community_platform_recent_communities" accordingly.
     */
    join: boolean;
  };
}
