import { tags } from "typia";

import { IEUserRestrictionType } from "./IEUserRestrictionType";
import { IEUserRestrictionSortBy } from "./IEUserRestrictionSortBy";
import { IEOrderDirection } from "./IEOrderDirection";

/**
 * User restriction assignment entity mapped from Prisma table
 * Actors.community_platform_guestvisitors.
 *
 * This DTO represents account-level enforcement states (e.g., read_only,
 * suspended) and includes audit timestamps. It excludes soft-deletion internals
 * from public contracts by omitting deleted_at. Use this model in admin reads
 * and detail views; creation/update flows are separate.
 *
 * Source table summary (Prisma): id (UUID PK), community_platform_user_id (FK →
 * users.id), restriction_type (String), restricted_until (DateTime?),
 * restriction_reason (String?), assigned_at (DateTime), revoked_at (DateTime?),
 * created_at (DateTime), updated_at (DateTime), deleted_at (DateTime?).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformUserRestriction = {
  /**
   * Primary key of the restriction record
   * (community_platform_guestvisitors.id).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Affected user’s ID
   * (community_platform_guestvisitors.community_platform_user_id).
   */
  userId: string & tags.Format<"uuid">;

  /**
   * Type of restriction (community_platform_guestvisitors.restriction_type).
   *
   * Known values: read_only, suspended.
   */
  restrictionType: IEUserRestrictionType;

  /**
   * Optional expiry timestamp for the restriction
   * (community_platform_guestvisitors.restricted_until). ISO-8601 UTC.
   */
  restrictedUntil?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Optional human-readable reason or policy reference
   * (community_platform_guestvisitors.restriction_reason).
   *
   * Truncated or summarized for UI as needed.
   */
  restrictionReason?: (string & tags.MaxLength<500>) | null | undefined;

  /**
   * Time when the restriction was assigned
   * (community_platform_guestvisitors.assigned_at). ISO-8601 UTC.
   */
  assignedAt: string & tags.Format<"date-time">;

  /**
   * Timestamp when the restriction was revoked
   * (community_platform_guestvisitors.revoked_at). Null means currently
   * active. ISO-8601 UTC.
   */
  revokedAt?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Record creation timestamp (community_platform_guestvisitors.created_at).
   * ISO-8601 UTC.
   */
  createdAt: string & tags.Format<"date-time">;

  /**
   * Record last update timestamp
   * (community_platform_guestvisitors.updated_at). ISO-8601 UTC.
   */
  updatedAt: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformUserRestriction {
  /**
   * Administrative search/filter request for user restriction assignments
   * sourced from Prisma table Actors.community_platform_guestvisitors.
   *
   * This request supports filtering by type, activity/visibility windows, and
   * deterministic ordering with cursor-based pagination. Records where
   * revoked_at is null are considered active by convention. Cursor should be
   * an opaque token derived from the active sort’s tuple (e.g., created_at
   * desc, id desc).
   */
  export type IRequest = {
    /**
     * Opaque pagination cursor derived from the active sort’s key tuple.
     *
     * Use null when starting from the first page.
     */
    cursor?: string | null | undefined;

    /**
     * Maximum number of records to return. Defaults to 20.
     *
     * Validated server-side within [1, 100].
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;

    /**
     * If true, return only currently active restrictions (revoked_at is
     * null).
     *
     * Default behavior is provider-defined; this flag forces active-only
     * filtering when true.
     */
    activeOnly?: boolean | undefined;

    /**
     * Filter by restriction type (guestvisitors.restriction_type). Known
     * values include read_only and suspended.
     */
    restrictionType?: IEUserRestrictionType | null | undefined;

    /**
     * Lower bound (inclusive) for assignment time window
     * (guestvisitors.assigned_at). ISO-8601 UTC.
     */
    assignedFrom?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Upper bound (inclusive) for assignment time window
     * (guestvisitors.assigned_at). ISO-8601 UTC.
     */
    assignedTo?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Lower bound (inclusive) for restricted_until window
     * (guestvisitors.restricted_until). ISO-8601 UTC.
     */
    restrictedUntilFrom?:
      | (string & tags.Format<"date-time">)
      | null
      | undefined;

    /**
     * Upper bound (inclusive) for restricted_until window
     * (guestvisitors.restricted_until). ISO-8601 UTC.
     */
    restrictedUntilTo?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filter by the target user’s ID
     * (guestvisitors.community_platform_user_id).
     */
    userId?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Sort selector. Defaults to createdAt when unspecified.
     *
     * Maps to underlying Prisma timestamps.
     */
    sortBy?: IEUserRestrictionSortBy | null | undefined;

    /** Sort direction. Defaults to desc for Newest-like ordering. */
    order?: IEOrderDirection | null | undefined;
  };
}
