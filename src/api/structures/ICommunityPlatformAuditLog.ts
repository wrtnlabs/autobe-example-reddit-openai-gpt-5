import { tags } from "typia";

/**
 * Administrative audit trail entry reflecting significant user/system events.
 *
 * This schema represents the community_platform_audit_logs table from the
 * Audits namespace. It captures actor identity references, optional resource
 * targets, event classification, success flag, request metadata (IP and user
 * agent), and lifecycle timestamps. As noted in the Prisma comments, records
 * are append-only snapshots for investigations and compliance.
 *
 * Relationships include optional links to users, sessions, guest visitors,
 * communities, posts, comments, and memberships via nullable UUIDs. Items with
 * deleted_at should be considered logically removed from active views.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformAuditLog = {
  /**
   * Primary key of the audit record.
   *
   * Maps to community_platform_audit_logs.id (UUID).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Authenticated actor who triggered the event, when applicable.
   *
   * Prisma: community_platform_audit_logs.actor_user_id (nullable UUID).
   */
  actor_user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Correlated application session for the event, if tracked.
   *
   * Prisma: community_platform_audit_logs.session_id (nullable UUID).
   */
  session_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Guest visitor identity for unauthenticated events.
   *
   * Prisma: community_platform_audit_logs.guestvisitor_id (nullable UUID).
   */
  guestvisitor_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Related community for the event, if applicable.
   *
   * Prisma: community_platform_audit_logs.community_id (nullable UUID).
   */
  community_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Related post for the event, if applicable.
   *
   * Prisma: community_platform_audit_logs.post_id (nullable UUID).
   */
  post_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Related comment for the event, if applicable.
   *
   * Prisma: community_platform_audit_logs.comment_id (nullable UUID).
   */
  comment_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Related community membership (join/leave) for the event, if applicable.
   *
   * Prisma: community_platform_audit_logs.membership_id (nullable UUID).
   */
  membership_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Canonical event type key (e.g., "join_community", "leave_community",
   * "post_created", "comment_deleted", "vote_toggled", "login", "logout").
   *
   * Prisma: community_platform_audit_logs.event_type.
   */
  event_type: string;

  /**
   * Outcome of the attempted event. true for success, false for failure.
   *
   * Prisma: community_platform_audit_logs.success.
   */
  success: boolean;

  /**
   * Optional free-text details providing context such as validation messages
   * or policy notes.
   *
   * Prisma: community_platform_audit_logs.details (nullable).
   */
  details?: string | null | undefined;

  /**
   * Observed IP address for the actor’s session/request, recorded for
   * security and forensics.
   *
   * Prisma: community_platform_audit_logs.ip (nullable).
   */
  ip?: string | null | undefined;

  /**
   * Observed user-agent string for the client at event time.
   *
   * Prisma: community_platform_audit_logs.user_agent (nullable).
   */
  user_agent?: string | null | undefined;

  /**
   * Creation timestamp when the audit log entry was recorded (UTC).
   *
   * Prisma: community_platform_audit_logs.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Administrative timestamp for the record (typically equal to created_at in
   * append-only usage).
   *
   * Prisma: community_platform_audit_logs.updated_at.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp when this entry was logically removed from active
   * views.
   *
   * Prisma: community_platform_audit_logs.deleted_at (nullable).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformAuditLog {
  /**
   * Search, filter, and pagination request for administrative audit logs.
   *
   * This request type targets the community_platform_audit_logs table and
   * complies with security policy by avoiding actor identity IDs in the
   * request body. Use me_only to scope to the authenticated actor and
   * actor_username for administrative queries. Resource-scoped filters
   * (session_id, community_id, post_id, comment_id, membership_id) remain
   * available for investigative use-cases. Pagination and sorting enable
   * efficient list views for audit and compliance workflows.
   *
   * Security note: access to this search is typically restricted to system
   * administrators as described by business requirements. This request does
   * not modify any data.
   */
  export type IRequest = {
    /**
     * Page number for pagination.
     *
     * Default behavior targets standard page-based navigation (>= 1).
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of records per page.
     *
     * Business defaults typically use 20–100 depending on UI needs.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Filter results to the authenticated actor only (no direct actor IDs
     * in the request).
     *
     * Security policy: replaces disallowed actor_user_id filter; actor
     * identity is taken from authentication context.
     */
    me_only?: boolean | undefined;

    /**
     * Optional filter by actor’s username for administrative queries
     * without using direct user_id values.
     *
     * Joins to community_platform_users.username when supported by provider
     * logic; avoids passing actor IDs in the request body.
     */
    actor_username?: string | undefined;

    /**
     * Filter by correlated session id.
     *
     * References community_platform_audit_logs.session_id.
     */
    session_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter by target community id.
     *
     * References community_platform_audit_logs.community_id.
     */
    community_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter by target post id.
     *
     * References community_platform_audit_logs.post_id.
     */
    post_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter by target comment id.
     *
     * References community_platform_audit_logs.comment_id.
     */
    comment_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter by related membership id.
     *
     * References community_platform_audit_logs.membership_id.
     */
    membership_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter by a list of canonical event_type keys (e.g.,
     * ["login","logout","post_created"]).
     *
     * References community_platform_audit_logs.event_type.
     */
    event_types?: string[] | undefined;

    /**
     * Filter by success outcome (true/false).
     *
     * References community_platform_audit_logs.success.
     */
    success?: boolean | undefined;

    /**
     * Lower bound of created_at time range (inclusive) in ISO 8601.
     *
     * References community_platform_audit_logs.created_at.
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper bound of created_at time range (inclusive) in ISO 8601.
     *
     * References community_platform_audit_logs.created_at.
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Primary sort key for results. Defaults commonly to created_at.
     *
     * Supported fields reflect indexed columns and common investigative
     * needs.
     */
    order_by?:
      | "created_at"
      | "event_type"
      | "success"
      | "actor_username"
      | undefined;

    /**
     * Sort direction for the given order_by key. Defaults to desc when
     * order_by is created_at.
     */
    direction?: "asc" | "desc" | undefined;
  };

  /**
   * Audit log summary for investigative list views.
   *
   * Derived from Prisma model community_platform_audit_logs. Captures the
   * event type, outcome, and lightweight relational pointers without heavy
   * details, ip, or user-agent for list performance.
   *
   * Security: Intended for administrator-only audit tooling; no credential or
   * token data is exposed.
   */
  export type ISummary = {
    /**
     * Primary key of the audit log entry.
     *
     * Maps to Prisma column community_platform_audit_logs.id (UUID).
     */
    id: string & tags.Format<"uuid">;

    /**
     * Canonical event type key (e.g., "join_community", "post_created",
     * "vote_toggled", "login").
     *
     * Maps to Prisma column community_platform_audit_logs.event_type.
     */
    event_type: string;

    /**
     * Outcome indicator: true if the event succeeded; false if it failed.
     *
     * Maps to Prisma column community_platform_audit_logs.success.
     */
    success: boolean;

    /**
     * Optional authenticated actor user id.
     *
     * Maps to Prisma column community_platform_audit_logs.actor_user_id
     * (nullable UUID).
     */
    actor_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional session id for correlation.
     *
     * Maps to Prisma column community_platform_audit_logs.session_id
     * (nullable UUID).
     */
    session_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional guest visitor id when the actor was unauthenticated.
     *
     * Maps to Prisma column community_platform_audit_logs.guestvisitor_id
     * (nullable UUID).
     */
    guestvisitor_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional related community id.
     *
     * Maps to Prisma column community_platform_audit_logs.community_id
     * (nullable UUID).
     */
    community_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional related post id.
     *
     * Maps to Prisma column community_platform_audit_logs.post_id (nullable
     * UUID).
     */
    post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional related comment id.
     *
     * Maps to Prisma column community_platform_audit_logs.comment_id
     * (nullable UUID).
     */
    comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional related membership id for join/leave events.
     *
     * Maps to Prisma column community_platform_audit_logs.membership_id
     * (nullable UUID).
     */
    membership_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Timestamp when the audit entry was recorded (UTC).
     *
     * Maps to Prisma column community_platform_audit_logs.created_at
     * (timestamptz).
     */
    created_at: string & tags.Format<"date-time">;
  };
}
