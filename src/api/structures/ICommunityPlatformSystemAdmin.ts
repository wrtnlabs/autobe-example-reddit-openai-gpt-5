import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * System administrator identity surface derived from Prisma:
 *
 * - Base user fields come from community_platform_users (Actors namespace): id
 *   (UUID), username (unique), status, last_login_at.
 * - Administrative role is tracked separately in community_platform_systemadmins;
 *   this type focuses on the user identity commonly embedded in admin
 *   authorization responses and admin-facing UIs.
 *
 * Security Note: This type never contains secrets (no password hashes, tokens,
 * or sensitive keys).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformSystemAdmin = {
  /**
   * Primary key of the administrator’s user record.
   *
   * Maps to Prisma table community_platform_users.id in the Actors namespace.
   * This identifier is used across relations (sessions, credentials, role
   * assignments) and appears in audit trails. Always a UUID string.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique username of the administrator account.
   *
   * Corresponds to community_platform_users.username. Enforced unique by
   * Prisma (@@unique). Used for login alternative to email and for
   * administrative display contexts.
   */
  username: string & tags.MinLength<3> & tags.MaxLength<64>;

  /**
   * Lifecycle status label for the user account.
   *
   * Backed by community_platform_users.status. Typical values include
   * business-defined states such as "active" or "disabled" and are enforced
   * by provider logic during authentication and authorization checks.
   */
  status: string;

  /**
   * Timestamp of the last successful login for this account if recorded.
   *
   * Reflects community_platform_users.last_login_at. Providers update this
   * field on successful login. Null when no successful login has been
   * recorded.
   */
  last_login_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformSystemAdmin {
  /**
   * Create payload for provisioning a new platform administrator.
   *
   * This DTO maps to multiple Prisma models atomically:
   *
   * - Community_platform_users: inserts backbone user with username/status.
   * - Community_platform_user_credentials: persists email/email_normalized and
   *   password_hash.
   * - Community_platform_systemadmins: records the role grant (granted_at,
   *   optional granted_by_user_id).
   * - Community_platform_sessions: creates initial refresh-token session
   *   (refresh_token_hash, issued_at, expires_at, user_agent, ip).
   *
   * Security Principles:
   *
   * - Do NOT accept actor IDs (e.g., user_id, granted_by_user_id) from clients;
   *   these are derived from authenticated context or system policy.
   * - Do NOT accept system-generated fields (id, created_at, updated_at,
   *   deleted_at, granted_at).
   */
  export type ICreate = {
    /**
     * Desired unique username for the new administrator.
     *
     * Backed by community_platform_users.username. Must be unique
     * platform-wide.
     */
    username: string & tags.MinLength<3> & tags.MaxLength<64>;

    /**
     * Login email for the administrator account.
     *
     * Stored in community_platform_user_credentials.email (and
     * email_normalized for case-insensitive uniqueness). Uniqueness is
     * enforced in Prisma.
     */
    email: string &
      tags.MinLength<3> &
      tags.MaxLength<320> &
      tags.Format<"email">;

    /**
     * Plain secret to be hashed server-side and stored as
     * community_platform_user_credentials.password_hash.
     *
     * Security: Never log or echo this value. Clients submit plaintext;
     * servers persist only strong password hashes.
     */
    password: string & tags.MinLength<8> & tags.MaxLength<1024>;

    /**
     * Optional client user-agent string to associate with the initial
     * session record.
     *
     * When provided, it can be persisted in
     * community_platform_sessions.user_agent for audit and security
     * analytics.
     */
    user_agent?: (string & tags.MaxLength<1000>) | null | undefined;

    /**
     * Optional client IP address to associate with the initial session
     * record.
     *
     * When provided, it can be persisted in community_platform_sessions.ip
     * for audit and security analytics.
     */
    ip?: (string & tags.MaxLength<255>) | null | undefined;
  };

  /**
   * Login payload for authenticating a system administrator.
   *
   * Validation and lookup flow:
   *
   * - Identify the account using either email (matched against
   *   email_normalized) or username (community_platform_users.username).
   * - Verify the submitted password against
   *   community_platform_user_credentials.password_hash.
   * - On success, update last_login_at in both
   *   community_platform_user_credentials and community_platform_users, and
   *   create a session in community_platform_sessions (refresh_token_hash,
   *   issued_at, expires_at).
   *
   * Security:
   *
   * - Requires exactly one identifier (email or username) together with
   *   password.
   * - Never accept actor IDs from the client. Never expose password_hash or
   *   session hashes.
   */
  export type ILogin = any | any;

  /**
   * Refresh token exchange payload for administrators.
   *
   * Validation:
   *
   * - The supplied token is validated against
   *   community_platform_sessions.refresh_token_hash.
   * - Session must be active (revoked_at is null) and within validity window
   *   (expires_at in the future).
   *
   * No actor IDs are accepted from clients; the session determines the
   * subject.
   */
  export type IRefresh = {
    /**
     * Opaque refresh token presented by the client for renewal.
     *
     * Server-side logic hashes this value and matches against
     * community_platform_sessions.refresh_token_hash with checks on
     * revoked_at and expires_at.
     */
    refresh_token: string & tags.MinLength<20> & tags.MaxLength<4000>;

    /**
     * Optional client user-agent used for anomaly detection and session
     * correlation (community_platform_sessions.user_agent).
     */
    user_agent?: (string & tags.MaxLength<1000>) | null | undefined;

    /**
     * Optional client IP address used for anomaly detection and session
     * correlation (community_platform_sessions.ip).
     */
    ip?: (string & tags.MaxLength<255>) | null | undefined;
  };

  /**
   * Authorization response for administrator authentication flows.
   *
   * Returned by join/login/refresh endpoints for systemAdmin role. Conforms
   * to platform-wide IAuthorized conventions:
   *
   * - Includes subject id (UUID) and a standard IAuthorizationToken structure
   *   for access/refresh lifecycle.
   * - May include an "admin" object representing the administrator’s
   *   profile/identity mapped from community_platform_users.
   *
   * Security: Never include password_hash, refresh_token_hash, or other
   * secrets. Tokens are returned only via the nested IAuthorizationToken
   * reference.
   */
  export type IAuthorized = {
    /**
     * Identifier of the authenticated administrator user.
     *
     * Maps to community_platform_users.id and is the subject for subsequent
     * role/ownership checks.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Unique username of the administrator account.
     *
     * Corresponds to community_platform_users.username. Enforced unique by
     * Prisma (@@unique). Used for login alternative to email and for
     * administrative display contexts.
     */
    username: string & tags.MinLength<3> & tags.MaxLength<64>;

    /**
     * Lifecycle status label for the user account.
     *
     * Backed by community_platform_users.status. Typical values include
     * business-defined states such as "active" or "disabled" and are
     * enforced by provider logic during authentication and authorization
     * checks.
     */
    status: string;

    /**
     * Timestamp of the last successful login for this account if recorded.
     *
     * Reflects community_platform_users.last_login_at. Providers update
     * this field on successful login. Null when no successful login has
     * been recorded.
     */
    last_login_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /**
     * Optional administrator entity snapshot to help clients hydrate UI
     * state immediately after authentication.
     *
     * Derived primarily from community_platform_users. May be omitted to
     * minimize payload size.
     */
    admin?: ICommunityPlatformSystemAdmin | undefined;
  };

  /**
   * Result of current-session sign-out for a system administrator.\n\nThis
   * response confirms revocation of the caller's active session in the Prisma
   * model `community_platform_sessions` by setting `revoked_at`. The provider
   * identifies the session from the authenticated context and applies logical
   * revocation.\n\nSecurity and data notes: This DTO contains no password or
   * token values. It reflects the lifecycle change recorded in
   * `community_platform_sessions` (fields like `refresh_token_hash`,
   * `revoked_at`, `updated_at`). The `session_id` may be included or withheld
   * depending on provider policy; when omitted, use `null`.
   */
  export type ISignOut = {
    /**
     * Operation result flag. True when the current session has been revoked
     * successfully.
     */
    ok: boolean;

    /**
     * ISO 8601 timestamp in UTC (e.g., 2025-09-23T17:31:42.818Z) when the
     * current session was revoked in
     * `community_platform_sessions.revoked_at`.
     */
    revoked_at: string & tags.Format<"date-time">;

    /**
     * Optional identifier of the revoked session (UUID). Providers may
     * choose not to expose internal session identifiers; in that case this
     * value can be null.
     */
    session_id?: (string & tags.Format<"uuid">) | null | undefined;

    /** Optional human-readable message confirming the sign-out operation. */
    message?: string | undefined;
  };

  /**
   * Result of bulk sign-out (all sessions) for a system
   * administrator.\n\nThis response summarizes a mass revocation across all
   * active rows in Prisma `community_platform_sessions` for the authenticated
   * admin (`revoked_at` set on each matching row).\n\nSecurity and data
   * notes: No password or token secrets are exposed. Counts are derived from
   * affected session rows and do not require schema changes in the database.
   */
  export type ISignOutAll = {
    /**
     * Operation result flag. True when the revoke-all action completed
     * successfully.
     */
    ok: boolean;

    /**
     * Number of sessions that were revoked for the authenticated
     * administrator.
     */
    count: number & tags.Type<"int32"> & tags.Minimum<0>;

    /** ISO 8601 timestamp in UTC when the bulk revocation occurred. */
    revoked_at: string & tags.Format<"date-time">;

    /** Optional human-readable message summarizing the outcome. */
    message?: string | undefined;
  };
}
