import { tags } from "typia";

import { IClientContext } from "./IClientContext";
import { IAuthorizationToken } from "./IAuthorizationToken";
import { ICommunityPlatformUser } from "./ICommunityPlatformUser";
import { IECommunityPlatformRegisteredMemberSort } from "./IECommunityPlatformRegisteredMemberSort";
import { IEOrderDirection } from "./IEOrderDirection";

/**
 * Registered Member assignment entity (response DTO).
 *
 * Represents a single row from Prisma table
 * community_platform_registeredmembers, recording that a
 * community_platform_users account has member capabilities. Includes all
 * non-sensitive columns required for business logic and audit.
 *
 * Security note: This response DTO does not include credentials or secrets; it
 * only surfaces role-assignment metadata.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformRegisteredMember = {
  /**
   * Primary key of the registered member assignment.
   *
   * Prisma reference: community_platform_registeredmembers.id — “Primary
   * Key.”
   */
  id: string & tags.Format<"uuid">;

  /**
   * The owning account’s UUID in community_platform_users.
   *
   * Prisma reference:
   * community_platform_registeredmembers.community_platform_user_id — “Member
   * account's {@link community_platform_users.id}.”
   */
  community_platform_user_id: string & tags.Format<"uuid">;

  /**
   * Timestamp when the user became a registered member.
   *
   * Prisma reference: community_platform_registeredmembers.registered_at.
   */
  registered_at: string & tags.Format<"date-time">;

  /**
   * Record creation timestamp for audit/ordering.
   *
   * Prisma reference: community_platform_registeredmembers.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp for audit.
   *
   * Prisma reference: community_platform_registeredmembers.updated_at.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp indicating a deactivated or hidden assignment.
   * Null when active.
   *
   * Prisma reference: community_platform_registeredmembers.deleted_at — “Soft
   * delete timestamp for the membership record (e.g., deactivated
   * membership).”
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformRegisteredMember {
  /**
   * Member registration payload.
   *
   * Prisma mappings:
   *
   * - Community_platform_users: email, email_normalized (derived), username,
   *   username_normalized (derived), password_hash (derived), display_name,
   *   last_login_at (set on issuance), created_at, updated_at.
   * - Community_platform_registeredmembers: community_platform_user_id with
   *   registered_at, created_at, updated_at.
   * - Community_platform_sessions: initial long-lived session associated to the
   *   new member.
   *
   * Security and validation:
   *
   * - Excludes identity fields (id, timestamps) and system-managed values.
   * - Password is accepted only in plaintext for hashing server-side; never
   *   returned in responses.
   */
  export type IJoin = {
    /**
     * User email mapped to community_platform_users.email. Backend derives
     * and enforces CI uniqueness via email_normalized.
     */
    email: string & tags.Format<"email">;

    /**
     * Preferred handle mapped to community_platform_users.username. Backend
     * derives and enforces CI uniqueness via username_normalized.
     */
    username: string;

    /**
     * Plaintext password to be hashed into
     * community_platform_users.password_hash by the server.
     *
     * Security: Never store or echo plaintext.
     */
    password: string;

    /**
     * Optional display label mapped to
     * community_platform_users.display_name.
     */
    displayName?: string | null | undefined;

    /**
     * Optional client/session hints used to populate fields in
     * community_platform_sessions.
     */
    client?: IClientContext | undefined;
  };

  /**
   * Registered member login request body.
   *
   * Maps to authentication against Actors.community_platform_users using
   * normalized identity columns (email_normalized or username_normalized) and
   * password_hash as described in the Prisma schema comments. On success, a
   * session row is created in Sessions.community_platform_sessions.
   *
   * Security: accepts only plaintext password for verification; never returns
   * or stores password or password hashes.
   */
  export type ILogin = {
    /**
     * Login identifier.
     *
     * Human-entered value that identifies the account to authenticate.
     * Application resolves this against
     * community_platform_users.email_normalized or username_normalized
     * derived from the user-facing email/username columns.
     *
     * Security note: plaintext passwords must never be stored; only
     * password_hash exists in Prisma.
     */
    identifier: string;

    /**
     * Plain text password for verification only.
     *
     * Compared against community_platform_users.password_hash on the
     * server. Never persisted as plaintext; the database stores only a
     * strong hash.
     */
    password: string;
  };

  /**
   * Registered member session refresh request body.
   *
   * Renews an existing session from Sessions.community_platform_sessions by
   * validating the presented context (cookie/header or this DTO). Does not
   * modify role-assignment tables. See Prisma schema:
   * community_platform_sessions.hashed_token, expires_at, last_seen_at.
   */
  export type IRefresh = {
    /**
     * Optional session identifier (Sessions.community_platform_sessions.id)
     * to explicitly target a session for renewal.
     *
     * If omitted, providers commonly infer the session from HTTP-only
     * cookies.
     */
    sessionId?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional opaque refresh or renewal token when not conveyed via
     * cookie.
     *
     * Servers MUST avoid storing plaintext tokens; only a hash is stored in
     * Sessions.community_platform_sessions.hashed_token.
     */
    refreshToken?: string | undefined;
  };

  /**
   * Logout request metadata (optional).
   *
   * Used when revoking the current session for an authenticated registered
   * member. Carries client hints that can be stored alongside
   * community_platform_sessions for auditability.
   *
   * No identity fields are accepted—the acting user is taken from the
   * authenticated session context.
   */
  export type ILogoutRequest = {
    /**
     * Optional client user agent hint recorded for audit in
     * Sessions.community_platform_sessions.user_agent.
     */
    userAgent?: string | undefined;

    /**
     * Optional client platform descriptor recorded in
     * Sessions.community_platform_sessions.client_platform.
     */
    clientPlatform?: string | undefined;

    /**
     * Optional device descriptor recorded in
     * Sessions.community_platform_sessions.client_device.
     */
    clientDevice?: string | undefined;
  };

  /**
   * Authorization response for a registered member after successful
   * join/login/refresh.
   *
   * This DTO follows the platform standard requiring the authenticated entity
   * id and an authorization token. An optional user summary may be included
   * for convenience. No internal foreign keys or system-managed timestamps
   * are exposed here. References:
   *
   * - Actors.community_platform_users (profile identity fields)
   * - Sessions.community_platform_sessions (session lifecycle; stores only
   *   hashed_token)
   *
   * Security:
   *
   * - Never returns password_hash, email_normalized, or username_normalized.
   * - Adheres to least-privilege by limiting fields to those necessary for
   *   client authorization flows.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated registered member.
     *
     * Prisma source: community_platform_users.id (UUID). Used by clients as
     * the principal identifier for subsequent requests.
     */
    id: string & tags.Format<"uuid">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /**
     * Optional lightweight profile snapshot for immediate UI use.
     *
     * Derived from Actors.community_platform_users and intentionally
     * excludes sensitive fields (e.g., password_hash, normalized keys).
     */
    user?: ICommunityPlatformUser.ISummary | undefined;
  };

  /**
   * Bulk logout result summary for a registered member.
   *
   * Represents the effect of setting revoked_at across all active rows in
   * Sessions.community_platform_sessions for the caller’s
   * community_platform_user_id. Contains no sensitive fields and is suitable
   * for security/account-management UIs.
   */
  export type ILogoutAllResult = {
    /**
     * Number of sessions that were newly marked revoked
     * (Sessions.community_platform_sessions.revoked_at set) for the
     * authenticated user during this operation.
     *
     * Includes only sessions affected by this request; previously revoked
     * or expired sessions are not counted here.
     */
    revoked_count: number & tags.Type<"int32"> & tags.Minimum<0>;

    /**
     * Optional informational note (e.g., that some sessions were already
     * revoked or expired and thus not counted).
     */
    message?: string | undefined;
  };

  /**
   * Result payload for revoking the current session of a registered member.
   *
   * This DTO reports the effect of updating a single row in
   * Sessions.community_platform_sessions for the authenticated user
   * (community_platform_user_id). It never exposes credential material (e.g.,
   * users.password_hash or sessions.hashed_token). The operation is
   * idempotent; repeated calls may return status already_revoked.
   *
   * All timestamps use ISO‑8601 in UTC as per platform conventions.
   */
  export type ILogoutResult = {
    /**
     * Identifier of the session in Sessions.community_platform_sessions
     * that represents the caller's current authenticated session.
     *
     * Maps to Sessions.community_platform_sessions.id.
     */
    session_id: string & tags.Format<"uuid">;

    /**
     * Outcome of the single‑session logout operation.
     *
     * - Revoked: the provider set
     *   Sessions.community_platform_sessions.revoked_at to a non‑null
     *   timestamp for this session.
     * - Already_revoked: the session was already inactive (revoked or
     *   expired), and the provider treated the request idempotently.
     */
    status: "revoked" | "already_revoked";

    /**
     * Timestamp when the session became revoked (UTC, ISO 8601). Null when
     * status is already_revoked and the record already had a non‑null
     * revoked_at prior to this request.
     *
     * Reflects Sessions.community_platform_sessions.revoked_at.
     */
    revoked_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional human‑readable note about the result.
     *
     * Intended for client logs and troubleshooting; not a replacement for
     * status or HTTP codes.
     */
    message?: string | undefined;
  };

  /**
   * Per‑session revocation result for a registered member managing device
   * sessions.
   *
   * Reflects business logic applied to Sessions.community_platform_sessions
   * with ownership enforced via community_platform_user_id and without
   * exposing hashed_token. Aligns with long‑lived session behavior and Prisma
   * audit fields (created_at, last_seen_at, expires_at, revoked_at).
   */
  export type ISessionRevocationResult = {
    /**
     * Target session identifier in Sessions.community_platform_sessions.
     *
     * Used to correlate the result with the requested resource.
     */
    session_id: string & tags.Format<"uuid">;

    /**
     * Outcome of the targeted revocation attempt.
     *
     * - Revoked: the session has just been marked revoked (revoked_at set).
     * - Already_revoked: the session was already inactive (revoked or
     *   expired); request handled idempotently.
     * - Not_found: no visible session matched the provided ID for this user.
     * - Forbidden: the session exists but does not belong to the caller
     *   (ownership enforcement).
     *
     * Providers may choose to map not_found/forbidden to HTTP status codes
     * instead of returning this payload in those cases.
     */
    status: "revoked" | "already_revoked" | "not_found" | "forbidden";

    /**
     * UTC timestamp when the session became revoked (if applicable). Null
     * for statuses already_revoked (no change), not_found, or forbidden.
     */
    revoked_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional explanatory note suitable for logs or UI hints. Avoids
     * leaking internal details or sensitive data.
     */
    message?: string | undefined;
  };

  /**
   * Request payload to rotate credentials for a registered member by updating
   * Users.community_platform_users.password_hash.
   *
   * This DTO carries plaintext inputs solely for verification and hashing on
   * the server. It intentionally omits any actor identifiers because
   * authentication context provides community_platform_user_id. The design
   * aligns with Prisma models: Users.community_platform_users (password_hash,
   * updated_at) and Sessions.community_platform_sessions (optional session
   * revocation via revoked_at). Plain passwords are never persisted.
   */
  export type IUpdatePassword = {
    /**
     * The caller’s current password in plaintext for verification.
     *
     * Back‑end verifies against
     * Users.community_platform_users.password_hash. Plaintext is never
     * stored; only a derived hash is compared server‑side.
     */
    current_password: string & tags.MinLength<1>;

    /**
     * The desired new password in plaintext.
     *
     * The provider hashes and persists it into
     * Users.community_platform_users.password_hash. Keep validation
     * lightweight per business rules; the server may enforce additional
     * policies.
     */
    new_password: string & tags.MinLength<1>;

    /**
     * Optional hint asking the provider to revoke all other active sessions
     * after changing the password.
     *
     * If true, the service may set revoked_at on other rows in
     * Sessions.community_platform_sessions for the same
     * community_platform_user_id.
     *
     * Default: false.
     */
    revoke_other_sessions?: boolean | undefined;
  };

  /**
   * Result payload for rotating a registered member’s password.
   *
   * This response confirms whether the server updated
   * Users.community_platform_users.password_hash and may include a refreshed
   * authorization token when the provider rotates credentials. It never
   * exposes plaintext or hashed passwords and includes no actor identifiers.
   * Aligns with the updatePassword operation semantics.
   */
  export type IUpdatePasswordResult = {
    /**
     * Indicates whether the password was successfully updated for the
     * authenticated account.
     *
     * On success, the server has written a new value to
     * Actors.community_platform_users.password_hash and refreshed
     * updated_at per Prisma schema.
     */
    updated: boolean;

    /**
     * Optional refreshed authorization token returned when the provider
     * rotates session credentials as part of the password change policy.
     *
     * Structure is defined by the platform-wide IAuthorizationToken schema.
     * If rotation is not performed, this property may be omitted.
     */
    token?: IAuthorizationToken | undefined;

    /**
     * Optional human-readable note describing the outcome (e.g., policy
     * actions like revoking other sessions). Intended for client logs; not
     * a replacement for status or HTTP codes.
     */
    message?: string | undefined;
  };

  /**
   * Request DTO for listing/searching Registered Member assignments from
   * Prisma table community_platform_registeredmembers.
   *
   * This model represents role assignments granting member capabilities to
   * accounts. It supports filters, deterministic sorting, and cursor-based
   * pagination. Properties map to the underlying Prisma columns or to
   * read‑model controls (sort_by, order, cursor, limit).
   *
   * Prisma table reference: community_platform_registeredmembers — “Role
   * assignment table marking a community_platform_users account as an active
   * registered member with write capabilities (post, comment, vote,
   * join/leave).”
   */
  export type IRequest = {
    /**
     * Filter by the target account’s community_platform_users.id (UUID).
     *
     * Prisma reference:
     * community_platform_registeredmembers.community_platform_user_id —
     * “Member account's {@link community_platform_users.id}.”
     */
    community_platform_user_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * When true, return only visible (non-deactivated) assignment rows
     * (deleted_at is null). When false, include historical/deactivated rows
     * as well.
     *
     * Prisma reference: community_platform_registeredmembers.deleted_at —
     * “Soft delete timestamp for the membership record.”
     */
    active_only?: boolean | undefined;

    /**
     * Lower bound filter for the assignment time (inclusive).
     *
     * Prisma reference: community_platform_registeredmembers.registered_at
     * — “Time when the user became a registered member.”
     */
    registered_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Upper bound filter for the assignment time (inclusive).
     *
     * Prisma reference: community_platform_registeredmembers.registered_at.
     */
    registered_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Lower bound filter for record creation time (inclusive).
     *
     * Prisma reference: community_platform_registeredmembers.created_at.
     */
    created_at_from?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Upper bound filter for record creation time (inclusive).
     *
     * Prisma reference: community_platform_registeredmembers.created_at.
     */
    created_at_to?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Primary sort key to apply for deterministic ordering. Default uses
     * created_at desc with id desc as tie-breaker.
     *
     * Business rule: Sorting follows platform deterministic rules with
     * stable cursor continuation.
     */
    sort_by?: IECommunityPlatformRegisteredMemberSort | null | undefined;

    /**
     * Sort direction for the chosen sort_by key. Default desc for
     * Newest-style listings.
     */
    order?: IEOrderDirection | null | undefined;

    /**
     * Opaque cursor encoding the last item’s ordering tuple for
     * deterministic continuation (e.g., created_at + id or registered_at +
     * id).
     */
    cursor?: string | null | undefined;

    /** Maximum number of records to return. Defaults to 20 when unspecified. */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;
  };

  /**
   * Summary of a Registered Member role assignment.
   *
   * Backed by Actors.community_platform_registeredmembers. Designed for
   * management grids and list views; excludes any sensitive user credential
   * data.
   */
  export type ISummary = {
    /**
     * Primary key of the membership assignment.
     *
     * Prisma: Actors.community_platform_registeredmembers.id.
     */
    id: string & tags.Format<"uuid">;

    /**
     * User account identifier holding this member capability.
     *
     * Prisma:
     * Actors.community_platform_registeredmembers.community_platform_user_id
     * → community_platform_users.id.
     */
    userId: string & tags.Format<"uuid">;

    /**
     * Timestamp when the user became a registered member.
     *
     * Prisma: Actors.community_platform_registeredmembers.registered_at.
     */
    registeredAt: string & tags.Format<"date-time">;

    /**
     * Creation timestamp of this assignment record.
     *
     * Prisma: Actors.community_platform_registeredmembers.created_at.
     */
    createdAt: string & tags.Format<"date-time">;

    /**
     * Last update timestamp of this assignment record.
     *
     * Prisma: Actors.community_platform_registeredmembers.updated_at.
     */
    updatedAt: string & tags.Format<"date-time">;

    /**
     * Soft deletion timestamp if the assignment has been deactivated; null
     * when active.
     *
     * Prisma: Actors.community_platform_registeredmembers.deleted_at.
     */
    deletedAt?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Convenience flag indicating visibility/activeness of the assignment.
     *
     * Computed as deleted_at IS NULL.
     */
    isActive: boolean;
  };
}
