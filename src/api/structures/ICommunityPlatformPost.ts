import { tags } from "typia";

/**
 * Post entity representing text-only content in a community.
 *
 * Maps to Prisma model community_platform_posts. Exposes public-safe properties
 * and lifecycle timestamps. Voting and comments are separate entities.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformPost = {
  /**
   * Primary key of the post.
   *
   * Prisma: community_platform_posts.id (UUID). System-generated and
   * immutable.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Parent community identifier.
   *
   * Prisma: community_platform_posts.community_platform_community_id (UUID).
   */
  community_platform_community_id: string & tags.Format<"uuid">;

  /**
   * Author account identifier (nullable for anonymization).
   *
   * Prisma: community_platform_posts.author_user_id (UUID, nullable).
   */
  author_user_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Post title (5–120 chars).
   *
   * Prisma: community_platform_posts.title.
   */
  title: string & tags.MinLength<5> & tags.MaxLength<120>;

  /**
   * Post body (plain text, 10–10,000 chars).
   *
   * Prisma: community_platform_posts.body.
   */
  body: string & tags.MinLength<10> & tags.MaxLength<10000>;

  /**
   * Optional author display name (0–32 chars).
   *
   * Prisma: community_platform_posts.author_display_name (nullable).
   */
  author_display_name?:
    | (string & tags.MinLength<0> & tags.MaxLength<32>)
    | null
    | undefined;

  /**
   * Creation timestamp (UTC, ISO 8601).
   *
   * Prisma: community_platform_posts.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp (UTC, ISO 8601).
   *
   * Prisma: community_platform_posts.updated_at.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp (nullable).
   *
   * Prisma: community_platform_posts.deleted_at.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformPost {
  /**
   * List/search request for posts with canonical sorting and filters.
   *
   * Prisma reference: community_platform_posts (title/body trigram indexes),
   * community_platform_post_votes (score for Top sorting). Security: no actor
   * IDs allowed in request; use my_posts_only to scope results to the
   * caller.
   */
  export type IRequest = {
    /** Page number to request (page-based pagination). */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Maximum number of records per page. Typical default is 20 for feeds
     * and searches.
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Free-text query matching words in post title and body. Business rule:
     * when provided, require length ≥ 2 characters.
     */
    search?: string | null | undefined;

    /**
     * Sort mode.
     *
     * - Newest: order by created_at DESC with stable tie-breaker by larger
     *   identifier
     * - Top: order by score (up − down) DESC; ties by newer created_at, then
     *   larger identifier
     */
    sort?: "newest" | "top" | undefined;

    /** Optional community scope filter (community_platform_communities.id). */
    community_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter: include posts created on/after this timestamp (UTC, ISO
     * 8601).
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter: include posts created on/before this timestamp (UTC, ISO
     * 8601).
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * When true, return only posts authored by the authenticated caller
     * without accepting an explicit author ID (prevents actor ID
     * injection).
     */
    my_posts_only?: boolean | undefined;

    /**
     * When true (default in most reads), exclude posts from communities
     * with disabled_at set.
     */
    exclude_disabled_communities?: boolean | undefined;
  };

  /**
   * Create request for community_platform_posts.
   *
   * Security: author is inferred from authentication; do not accept user IDs.
   */
  export type ICreate = {
    /**
     * Target community ID (UUID). Required for global composer; ignored for
     * community-scoped routes where path provides the community.
     */
    community_platform_community_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** Title for the new post (5–120 chars). */
    title: string & tags.MinLength<5> & tags.MaxLength<120>;

    /** Body content (plain text, 10–10,000 chars). */
    body: string & tags.MinLength<10> & tags.MaxLength<10000>;

    /** Optional author display name (0–32 chars). */
    author_display_name?:
      | (string & tags.MinLength<0> & tags.MaxLength<32>)
      | null
      | undefined;
  };

  /**
   * Update request for mutable post fields.
   *
   * Immutable: community_platform_community_id, author_user_id, system
   * timestamps.
   */
  export type IUpdate = {
    /** Updated title (5–120 chars). */
    title?: (string & tags.MinLength<5> & tags.MaxLength<120>) | undefined;

    /** Updated body (plain text, 10–10,000 chars). */
    body?: (string & tags.MinLength<10> & tags.MaxLength<10000>) | undefined;

    /** Updated author display name (0–32 chars; null/empty implies default). */
    author_display_name?:
      | (string & tags.MinLength<0> & tags.MaxLength<32>)
      | null
      | undefined;
  };

  /**
   * Post Summary (community_platform_posts).
   *
   * Compact list/feed representation with essential fields. Includes derived
   * counters (score, comment_count) and optional denormalized display helpers
   * (community_name). Sensitive fields are excluded by design, and
   * ownership/author-only fields are represented by identifiers or
   * presentation-safe values only.
   */
  export type ISummary = {
    /**
     * Primary key of the post (community_platform_posts.id).
     *
     * Prisma type: String @db.Uuid.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Owning community ID
     * (community_platform_posts.community_platform_community_id).
     *
     * References community_platform_communities.id.
     */
    community_platform_community_id: string & tags.Format<"uuid">;

    /**
     * Immutable community name (/c/{name}) derived from the related
     * community record.
     *
     * This is a denormalized display field for convenience in list cards;
     * it is not persisted on the post row.
     */
    community_name?: string | undefined;

    /**
     * Author user ID (community_platform_posts.author_user_id), nullable
     * for anonymization on account deletion.
     *
     * When null, display fallback like "Anonymous" is recommended.
     */
    author_user_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Post title (community_platform_posts.title).
     *
     * Business constraints (application-level): length 5–120 characters.
     */
    title: string;

    /**
     * Optional presentation-only display name provided by the author
     * (community_platform_posts.author_display_name).
     *
     * When null or empty, clients may display a default such as
     * "Anonymous".
     */
    author_display_name?: string | null | undefined;

    /**
     * Post creation timestamp (community_platform_posts.created_at) in ISO
     * 8601 format.
     *
     * Used for Newest sorting and tie-breakers.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Derived score: upvotes − downvotes computed from
     * community_platform_post_votes.
     *
     * Not stored on the post row; calculated by queries or materialized
     * views.
     */
    score: number & tags.Type<"int32">;

    /**
     * Derived total number of comments for the post.
     *
     * Not stored on the post row; computed via queries or materialized
     * views.
     */
    comment_count: number & tags.Type<"int32">;
  };
}
