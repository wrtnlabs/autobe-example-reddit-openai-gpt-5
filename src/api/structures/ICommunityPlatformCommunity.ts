import { tags } from "typia";

/**
 * Community entity mapped to Prisma model community_platform_communities.
 *
 * Represents a public sub-community (for example, /c/ai). Fields mirror the
 * database columns to ensure implementation compatibility. The name is
 * immutable after creation (enforced by application logic). Ownership is
 * tracked by community_platform_user_id (the creator/owner). Categorization
 * uses community_platform_category_id referencing
 * community_platform_categories. See Prisma comments for details: immutable
 * unique name, optional description/logo/banner, activity timestamp,
 * administrative disablement via disabled_at, and lifecycle timestamps
 * including soft deletion via deleted_at.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunity = {
  /**
   * Primary key of the community entity (UUID). Matches
   * community_platform_communities.id in Prisma.
   *
   * This value is system-generated and immutable.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Owner account's community_platform_users.id.
   *
   * Derived from authentication context at creation; never client-supplied in
   * requests.
   */
  community_platform_user_id: string & tags.Format<"uuid">;

  /**
   * Assigned category's community_platform_categories.id.
   *
   * Used to classify the community for Explore and filtering. Must reference
   * an existing active category.
   */
  community_platform_category_id: string & tags.Format<"uuid">;

  /**
   * Unique immutable community identifier (3–32 chars). Allowed characters:
   * letters, digits, hyphen (-), underscore (_). Must start with a letter and
   * end with an alphanumeric character.
   *
   * Prisma column: community_platform_communities.name with @@unique([name])
   * and business immutability enforced at the application layer.
   */
  name: string &
    tags.MinLength<3> &
    tags.MaxLength<32> &
    tags.Pattern<"^[A-Za-z][A-Za-z0-9_-]{1,30}[A-Za-z0-9]$">;

  /**
   * Optional human-readable description for the community.
   *
   * Prisma column: community_platform_communities.description (nullable).
   */
  description?: string | null | undefined;

  /**
   * Optional logo image URI for the community.
   *
   * Prisma column: community_platform_communities.logo (VARCHAR(80000),
   * nullable).
   */
  logo?:
    | (string & tags.MaxLength<80000> & tags.Format<"uri">)
    | null
    | undefined;

  /**
   * Optional banner image URI for the community.
   *
   * Prisma column: community_platform_communities.banner (VARCHAR(80000),
   * nullable).
   */
  banner?:
    | (string & tags.MaxLength<80000> & tags.Format<"uri">)
    | null
    | undefined;

  /**
   * Timestamp of the most recent activity related to the community
   * (post/comment/join/leave).
   *
   * Prisma column: community_platform_communities.last_active_at. Used for
   * display and sorting in explore views.
   */
  last_active_at: string & tags.Format<"date-time">;

  /**
   * Administrative disablement timestamp. When set, new posts/comments are
   * blocked and the community is hidden from promotion surfaces.
   *
   * Prisma column: community_platform_communities.disabled_at (nullable).
   */
  disabled_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Creation timestamp.
   *
   * Prisma column: community_platform_communities.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp.
   *
   * Prisma column: community_platform_communities.updated_at.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp. When non-null, the record is considered removed
   * from active views.
   *
   * Prisma column: community_platform_communities.deleted_at (nullable).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformCommunity {
  /**
   * Request parameters for listing/searching communities (Prisma:
   * community_platform_communities) with pagination and safe filters.
   *
   * Does not accept actor IDs; ownership checks occur at authorization level,
   * not in request body.
   */
  export type IRequest = {
    /** Page number (1-based). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Items per page. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Search by community name/description (Prisma:
     * community_platform_communities.name, description). Minimum 2
     * characters.
     */
    query?: (string & tags.MinLength<2>) | null | undefined;

    /**
     * Filter by category ID (UUID). Prisma:
     * community_platform_communities.community_platform_category_id.
     */
    community_platform_category_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /**
     * Filter by business category code (Prisma:
     * community_platform_categories.code associated to the community via
     * FK).
     */
    category_code?: string | null | undefined;

    /**
     * Whether to include communities with disabled_at not null
     * (administrative views). Prisma:
     * community_platform_communities.disabled_at.
     */
    include_disabled?: boolean | null | undefined;

    /**
     * Sort key for discovery/explore: created_at (Newest), last_active_at
     * (activity), or name (alphabetical).
     */
    sort_by?: "created_at" | "last_active_at" | "name" | null | undefined;

    /** Sort direction; ascending or descending. */
    sort_dir?: "asc" | "desc" | null | undefined;
  };

  /**
   * Creation request for a community (Prisma:
   * community_platform_communities).
   *
   * The server infers ownership (community_platform_user_id) from the
   * authenticated subject. The name is immutable after creation. Category
   * must reference an existing community_platform_categories row. Optional
   * presentation fields (description, logo, banner) may be supplied. System
   * timestamps (created_at, updated_at, last_active_at) are server-managed
   * and not accepted in this request.
   */
  export type ICreate = {
    /**
     * Unique immutable community identifier (3–32 chars). Allowed
     * characters: letters, digits, hyphen (-), underscore (_). Must start
     * with a letter and end with an alphanumeric character. Maps to
     * community_platform_communities.name.
     */
    name: string &
      tags.MinLength<3> &
      tags.MaxLength<32> &
      tags.Pattern<"^[A-Za-z][A-Za-z0-9_-]{1,30}[A-Za-z0-9]$">;

    /**
     * Assigned category's id (community_platform_categories.id). Must
     * reference an existing, active category.
     */
    community_platform_category_id: string & tags.Format<"uuid">;

    /**
     * Optional description for the community. Maps to
     * community_platform_communities.description (nullable).
     */
    description?: string | null | undefined;

    /**
     * Optional logo image URI. Maps to community_platform_communities.logo
     * (VARCHAR(80000)).
     */
    logo?:
      | (string & tags.MaxLength<80000> & tags.Format<"uri">)
      | null
      | undefined;

    /**
     * Optional banner image URI. Maps to
     * community_platform_communities.banner (VARCHAR(80000)).
     */
    banner?:
      | (string & tags.MaxLength<80000> & tags.Format<"uri">)
      | null
      | undefined;
  };

  /**
   * Update request for community metadata (Prisma:
   * community_platform_communities).
   *
   * Only metadata fields are editable by the community owner. The name is
   * immutable and deliberately excluded from this request. Ownership and
   * server-maintained timestamps are not accepted here. Category reassignment
   * is allowed if the target category exists and is active.
   */
  export type IUpdate = {
    /** Optional category reassignment to community_platform_categories.id. */
    community_platform_category_id?:
      | (string & tags.Format<"uuid">)
      | null
      | undefined;

    /** Optional updated description. */
    description?: string | null | undefined;

    /** Optional updated logo image URI. */
    logo?:
      | (string & tags.MaxLength<80000> & tags.Format<"uri">)
      | null
      | undefined;

    /** Optional updated banner image URI. */
    banner?:
      | (string & tags.MaxLength<80000> & tags.Format<"uri">)
      | null
      | undefined;
  };

  /**
   * Community summary for list and reference surfaces.
   *
   * Derived from Prisma model community_platform_communities. Includes
   * immutable name, category linkage, and key timestamps suitable for compact
   * cards. Excludes large text and banners for performance.
   *
   * Security: Contains only public-safe fields and no sensitive credentials.
   */
  export type ISummary = {
    /**
     * Primary key of the community.
     *
     * Maps to Prisma column community_platform_communities.id (UUID).
     */
    id: string & tags.Format<"uuid">;

    /**
     * Immutable unique name (slug) of the community.
     *
     * Maps to Prisma column community_platform_communities.name. Business
     * rule: immutable after creation; case-insensitive uniqueness
     * service-wide.
     */
    name: string;

    /**
     * Foreign key referencing the assigned category.
     *
     * Maps to Prisma column
     * community_platform_communities.community_platform_category_id
     * (UUID).
     */
    community_platform_category_id: string & tags.Format<"uuid">;

    /**
     * Optional logo image URI for the community.
     *
     * Maps to Prisma column community_platform_communities.logo (nullable
     * string).
     */
    logo?: (string & tags.Format<"uri">) | null | undefined;

    /**
     * Creation timestamp of the community (UTC).
     *
     * Maps to Prisma column community_platform_communities.created_at
     * (timestamptz).
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of the most recent activity relevant to the community
     * (UTC).
     *
     * Maps to Prisma column community_platform_communities.last_active_at
     * (timestamptz). Used for explore sorting.
     */
    last_active_at: string & tags.Format<"date-time">;
  };
}
