import { tags } from "typia";

/**
 * Generic placeholder entity type used by generic page schemas.
 *
 * This definition exists solely to satisfy $ref dependencies introduced by
 * generic container types (e.g., IPageI). It has no fixed properties and should
 * not be used for concrete DTO design.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type I = {};
export namespace I {
  /**
   * Generic pagination information placeholder.
   *
   * This schema mirrors the standard pagination structure to maintain
   * compatibility where generic references were used. Prefer
   * IPage.IPagination for concrete APIs.
   */
  export type IPagination = {
    /**
     * Current page number.
     *
     * Unsigned integer semantics (0-based or 1-based depending on caller
     * context).
     */
    current: number & tags.Type<"int32"> & tags.Minimum<0>;

    /**
     * Limitation of records per page.
     *
     * Unsigned integer semantics; providers commonly default this value
     * when omitted.
     */
    limit: number & tags.Type<"int32"> & tags.Minimum<0>;

    /** Total records in the dataset matching the query. */
    records: number & tags.Type<"int32"> & tags.Minimum<0>;

    /** Total pages (ceil(records / limit)). */
    pages: number & tags.Type<"int32"> & tags.Minimum<0>;
  };

  /**
   * Generic page request placeholder carrying optional page and limit
   * controls.
   *
   * Prefer concrete request types (e.g., IPage.IRequest or entity-specific
   * IRequest variants) for real endpoints.
   */
  export type IRequest = {
    /**
     * Optional page number for pagination.
     *
     * Use explicit null to indicate the default.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;

    /**
     * Optional limit (max items per page).
     *
     * Use explicit null to indicate the default.
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<0>) | null | undefined;
  };
}
