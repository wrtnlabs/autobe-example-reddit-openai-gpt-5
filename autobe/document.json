{"operations":[{"specification":"Define a public registration endpoint for anonymous visitors to obtain initial JWT credentials for guarded flows. This operation persists or reuses a record in the Prisma table community_platform_guestvisitors using provided client hints (device_fingerprint, user_agent, ip) and sets first_seen_at/last_seen_at accordingly. It returns an authorization payload for the guest role that the client will use for subsequent guarded attempts (e.g., resume-after-login). No traditional credentials are involved because guests do not have entries in community_platform_user_credentials or community_platform_sessions. Audit linkage is possible via community_platform_audit_logs.guestvisitor_id for observability.","authorizationType":"join","description":"Purpose and functionality: This endpoint creates or reuses an anonymous visitor identity based on client hints and issues initial JWT tokens for the guest role. It is backed by the Prisma model community_platform_guestvisitors which captures device_fingerprint, user_agent, ip, and tracks first_seen_at and last_seen_at timestamps for the same visitor. Unlike member or admin flows, there is no lookup in community_platform_user_credentials and no community_platform_sessions row, because the visitor is not an authenticated user account.\n\nImplementation details: On request, the provider will either create a new row in community_platform_guestvisitors (initializing first_seen_at and last_seen_at) or update last_seen_at when correlating by device_fingerprint and/or other hints. The endpoint returns access/refresh tokens encapsulated in the ICommunityPlatformGuestVisitor.IAuthorized DTO with expiry metadata. The returned tokens enable guarded actions to trigger the “Please sign in to continue.” prompt logic and smooth resume as specified in business requirements.\n\nRole-specific integration and business context: The role is a guest (non-authenticated), mapped to the guestVisitor capability in the PRD. Guests can browse public content and search but cannot create posts, comments, vote, or join/leave. This endpoint exists to start a resumable session context for guarded flows without elevating to a member account.\n\nSecurity considerations: Since no password or email exists for guests, identity correlation uses community_platform_guestvisitors.device_fingerprint, user_agent, and ip where available. Tokens should be short-lived and scoped for read-only operations plus guarded-flow resumption, and the service should update community_platform_guestvisitors.last_seen_at each use to support abuse detection and analytics via community_platform_audit_logs.guestvisitor_id.\n\nRelated operations and workflow: Use this join endpoint first for brand-new visitors. Later, call /auth/guestVisitor/refresh to rotate tokens using a valid refresh token. Member/admin authentication flows are intentionally not exposed here because those map to community_platform_users plus community_platform_user_credentials and community_platform_sessions, which do not apply to guests.\n\nError handling: Return standard authentication errors for malformed payloads or server-side failures. If client hints are missing, still create a minimal community_platform_guestvisitors row and proceed. Do not reference soft deletion semantics in this operation; the guest record lifecycle is independent of token lifetime.","summary":"Register or correlate an anonymous visitor and issue initial guest JWT using community_platform_guestvisitors.","parameters":[],"requestBody":{"description":"Client-provided hints for correlating/creating an anonymous visitor (e.g., device fingerprint) and optional context.","typeName":"ICommunityPlatformGuestVisitorJoin.ICreate"},"responseBody":{"description":"Authorized guest payload including access/refresh tokens and visitor context.","typeName":"ICommunityPlatformGuestVisitor.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/guestVisitor/join","method":"post"},{"specification":"Define a token rotation endpoint for anonymous visitors. Given a valid guest refresh token, issue new access/refresh tokens and update the associated visitor’s last_seen_at in the Prisma table community_platform_guestvisitors. This endpoint does not use community_platform_sessions since that table belongs to authenticated users; instead, it maintains the lightweight guest identity created by /auth/guestVisitor/join. Audit trails may attach via community_platform_audit_logs.guestvisitor_id.","authorizationType":"refresh","description":"Purpose and functionality: This endpoint renews guest access by accepting a valid refresh token and returning a fresh ICommunityPlatformGuestVisitor.IAuthorized payload. The underlying visitor identity is represented by community_platform_guestvisitors with fields such as device_fingerprint, user_agent, ip, first_seen_at, and last_seen_at.\n\nImplementation details: On successful refresh, the provider should validate the presented guest refresh token, rotate tokens, and update community_platform_guestvisitors.last_seen_at to the current time. Because guests are not real accounts in community_platform_users and do not have community_platform_user_credentials, no password checks or email verification occurs here, and community_platform_sessions is not used for guest flows.\n\nRole-specific integration and business context: Guests can continue browsing and be seamlessly prompted to sign in when attempting guarded actions. The refresh process aligns with generous session expectations and smooth re-login behavior outlined in the PRD while remaining distinct from member/admin session renewal.\n\nSecurity considerations: Enforce refresh token validation and expiry, and scope issued access tokens appropriately for guest capabilities. Track ip and user_agent where available to support anomaly detection and correlate with the community_platform_guestvisitors record for analytics, and optionally emit community_platform_audit_logs entries linked via guestvisitor_id for observability.\n\nRelated operations and workflow: Initial token issuance occurs at /auth/guestVisitor/join. If the refresh token is invalid, expired, or revoked, the client should call /auth/guestVisitor/join to obtain a new token set. This endpoint is intentionally separate from member/admin /auth/{role}/refresh flows that rely on community_platform_sessions.\n\nError handling: Return appropriate authentication errors for invalid/expired refresh tokens. Do not mention or rely on soft-deletion behavior; token rotation is independent from any archival settings on guest data.","summary":"Refresh guest JWT tokens linked to community_platform_guestvisitors without using user sessions.","parameters":[],"requestBody":{"description":"Refresh request containing the current guest refresh token and optional client context.","typeName":"ICommunityPlatformGuestVisitorRefresh.IRequest"},"responseBody":{"description":"Authorized guest payload with rotated access/refresh tokens and metadata.","typeName":"ICommunityPlatformGuestVisitor.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/guestVisitor/refresh","method":"post"},{"specification":"Create a registration (join) endpoint for communityMember accounts. This operation will create a new user backbone record in community_platform_users, the credential row in community_platform_user_credentials (storing email/email_normalized and password_hash), assign the member role via community_platform_communitymembers, and establish an initial session in community_platform_sessions for refresh token management. It will return JWTs and the authorized user payload typed as ICommunityPlatformCommunityMember.IAuthorized.","authorizationType":"join","description":"This endpoint registers a new community member by creating records across the Actors schema. It first inserts a backbone identity into community_platform_users (fields: id, username, status, created_at, updated_at), ensuring username uniqueness per @@unique([username]). It then persists credentials in community_platform_user_credentials using email and email_normalized, with the password stored as password_hash and timestamps managed in created_at/updated_at. If verification policies apply, email_verified_at remains null until separately verified; this field is referenced for later flows but not required here.\n\nAfter successfully creating user and credential records, the operation assigns the role in community_platform_communitymembers by inserting a row with community_platform_user_id, status (e.g., active), and since_at, aligning with the role taxonomy for authenticated users. This assignment enables permission checks that differentiate communityMember from other roles such as systemAdmin.\n\nTo enable session continuity and refresh-token rotation, the endpoint creates a session in community_platform_sessions with refresh_token_hash, issued_at, expires_at, optional user_agent and ip, and revoked_at initially null. The session record is used for token renewal and sign-out behaviors. Unique constraint @@unique([refresh_token_hash]) ensures token uniqueness.\n\nSecurity considerations include hashing user passwords into community_platform_user_credentials.password_hash and never storing plaintext. The flow respects indexes and uniqueness on community_platform_user_credentials.email and community_platform_user_credentials.email_normalized to enforce email uniqueness. The response returns an access token and a refresh token (backed by community_platform_sessions) within ICommunityPlatformCommunityMember.IAuthorized.\n\nRelated operations: POST /auth/communityMember/login authenticates existing accounts using community_platform_user_credentials; POST /auth/communityMember/refresh uses community_platform_sessions to renew tokens. These operations together complete the authentication lifecycle for communityMember.","summary":"Register a communityMember using community_platform_users, community_platform_user_credentials, community_platform_communitymembers, and community_platform_sessions.","parameters":[],"requestBody":{"description":"Registration payload including username, email, and password.","typeName":"ICommunityPlatformCommunityMember.ICreate"},"responseBody":{"description":"Authorized user and token bundle for the newly joined communityMember.","typeName":"ICommunityPlatformCommunityMember.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/communityMember/join","method":"post"},{"specification":"Create a login endpoint for communityMember accounts. It verifies credentials from community_platform_user_credentials (email/email_normalized or username cross-lookup via community_platform_users), compares password_hash, updates last_login_at in both community_platform_users and community_platform_user_credentials, and issues a new session in community_platform_sessions (refresh_token_hash, issued_at, expires_at). Returns ICommunityPlatformCommunityMember.IAuthorized with JWTs.","authorizationType":"login","description":"This endpoint authenticates a community member by validating user credentials stored in community_platform_user_credentials. The request identifies the account using either email (matched against email_normalized) or username via community_platform_users.username and then retrieves the associated community_platform_user_credentials.password_hash for secure comparison. On success, the system updates last_login_at in both community_platform_user_credentials and community_platform_users to reflect the successful authentication event.\n\nA new session row is created in community_platform_sessions containing refresh_token_hash (hashed), issued_at, expires_at, and optional user_agent/ip context for audit. The session’s revoked_at remains null to indicate an active session. Uniqueness on refresh_token_hash prevents duplication and facilitates revocation and rotation.\n\nThe operation is aligned with the role assignment in community_platform_communitymembers, which marks that the authenticated user is a member (status and since_at maintained there). While this endpoint does not modify community_platform_communitymembers, its presence is implied for permission checks in subsequent guarded actions.\n\nSecurity considerations include strict use of password_hash and never storing plaintext passwords. On successful authentication, an access token and a refresh token are issued, and the response conforms to ICommunityPlatformCommunityMember.IAuthorized. The access token is short-lived; the refresh token corresponds to the community_platform_sessions row.\n\nRelated operations: POST /auth/communityMember/join creates the underlying records for new users, and POST /auth/communityMember/refresh renews tokens using existing community_platform_sessions entries. POST /auth/communityMember/logout and POST /auth/communityMember/logoutAll manage session revocation via the same table.","summary":"Authenticate a communityMember using community_platform_user_credentials and issue a session in community_platform_sessions.","parameters":[],"requestBody":{"description":"Login payload with identifier (email or username) and password.","typeName":"ICommunityPlatformCommunityMember.ILogin"},"responseBody":{"description":"Authorized user and token bundle for the authenticated communityMember.","typeName":"ICommunityPlatformCommunityMember.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/communityMember/login","method":"post"},{"specification":"Create a token refresh endpoint for communityMember accounts. It validates an existing session in community_platform_sessions by matching refresh_token_hash, ensuring revoked_at is null and expires_at is in the future, then rotates/updates the session and returns new JWTs typed as ICommunityPlatformCommunityMember.IAuthorized.","authorizationType":"refresh","description":"This endpoint renews access tokens for a community member using the persisted session in community_platform_sessions. The provided refresh token is hashed and matched against refresh_token_hash with checks that revoked_at is null and expires_at has not passed. On success, the server may rotate the refresh token by updating the associated session’s refresh_token_hash and updated_at while preserving issued_at/expires_at semantics according to policy.\n\nBecause community_platform_sessions links to community_platform_users via community_platform_user_id, the refreshed authorization reflects the same member identity. This process does not modify community_platform_communitymembers; it relies on that table’s presence for permission checks elsewhere.\n\nSecurity considerations include rejecting tokens for sessions where revoked_at is set or expires_at has elapsed. The response returns a new access token and, if rotated, a new refresh token, within ICommunityPlatformCommunityMember.IAuthorized. No profile fields are returned from community_platform_user_profiles here; the focus is strictly on session renewal and JWT issuance.\n\nRelated operations: POST /auth/communityMember/login establishes the session; POST /auth/communityMember/logout and POST /auth/communityMember/logoutAll revoke sessions by setting revoked_at; POST /auth/communityMember/join is used to provision initial accounts and sessions.","summary":"Refresh tokens for communityMember by validating community_platform_sessions.","parameters":[],"requestBody":{"description":"Refresh token payload.","typeName":"ICommunityPlatformCommunityMember.IRefresh"},"responseBody":{"description":"Authorized token bundle after successful session validation.","typeName":"ICommunityPlatformCommunityMember.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/communityMember/refresh","method":"post"},{"specification":"Create a logout endpoint for communityMember to revoke the current session. It sets revoked_at in community_platform_sessions for the authenticated user’s active session, preventing further use of its refresh_token_hash. No response body is returned.","authorizationType":null,"description":"This endpoint revokes the current authenticated session by updating the corresponding row in community_platform_sessions: setting revoked_at (and updated_at) to mark the refresh token unusable. The session row is linked to the actor via community_platform_user_id and may record user_agent/ip as originally issued. After revocation, subsequent token refresh attempts using the same refresh_token_hash must fail.\n\nSecurity considerations: Only the authenticated community member may revoke their own active session. This does not impact other active sessions for the same user. The operation intentionally returns no body; clients should clear local credentials upon success.\n\nRelated operations: POST /auth/communityMember/logoutAll revokes all sessions for the user by setting revoked_at on each matching row; POST /auth/communityMember/refresh validates non-revoked sessions (revoked_at null) prior to issuing new tokens.","summary":"Revoke current communityMember session using community_platform_sessions.revoked_at.","parameters":[],"requestBody":null,"responseBody":null,"authorizationRole":"communityMember","name":"logout","path":"/auth/communityMember/logout","method":"post"},{"specification":"Create a logoutAll endpoint for communityMember to revoke all sessions owned by the authenticated user. It updates all matching rows in community_platform_sessions (by community_platform_user_id) to set revoked_at, effectively invalidating every refresh token for that user. No response body is returned.","authorizationType":null,"description":"This endpoint signs the user out from all devices by setting revoked_at across all rows in community_platform_sessions for the authenticated user (identified via community_platform_user_id). After completion, no prior refresh_token_hash remains valid for token renewal.\n\nSecurity considerations: The action affects every active session for the user account, ensuring a complete sign-out. Clients should clear local tokens. New sessions may be established later via POST /auth/communityMember/login.\n\nRelated operations: POST /auth/communityMember/logout revokes only the current session; POST /auth/communityMember/refresh continues to work only for sessions where revoked_at remains null and expires_at is valid.","summary":"Revoke all communityMember sessions by updating community_platform_sessions.revoked_at for the user.","parameters":[],"requestBody":null,"responseBody":null,"authorizationRole":"communityMember","name":"logoutAll","path":"/auth/communityMember/logoutAll","method":"post"},{"specification":"Create a password update endpoint for authenticated communityMember users. It verifies the current password against community_platform_user_credentials.password_hash, then updates password_hash and password_updated_at. Optionally, providers may revoke other sessions by updating community_platform_sessions.revoked_at according to policy. Returns no body.","authorizationType":null,"description":"This endpoint allows an authenticated community member to change their password. It reads the stored hash from community_platform_user_credentials.password_hash for the account (linked through community_platform_user_id) and validates the provided current password. On success, it sets a new password_hash and updates password_updated_at to reflect the rotation time. Timestamps created_at and updated_at on the credential record are maintained by standard persistence behavior.\n\nThe operation is security-sensitive and may be paired with session hygiene: implementers may optionally revoke existing sessions in community_platform_sessions by setting revoked_at on other rows to reduce risk. This is not mandatory in the schema but is a common policy aligned with the available fields (refresh_token_hash, revoked_at, expires_at).\n\nThis endpoint does not alter role assignments in community_platform_communitymembers; it strictly manages credentials. It also does not require or modify email_verified_at in community_platform_user_credentials. The operation returns no body; success indicates the password is updated.\n\nRelated operations: POST /auth/communityMember/login authenticates using the updated password; POST /auth/communityMember/logout and POST /auth/communityMember/logoutAll manage sessions using community_platform_sessions.","summary":"Change password for communityMember by updating community_platform_user_credentials.password_hash and password_updated_at.","parameters":[],"requestBody":{"description":"Password change payload with current and new password.","typeName":"ICommunityPlatformCommunityMember.IUpdate"},"responseBody":null,"authorizationRole":"communityMember","name":"updatePassword","path":"/auth/communityMember/password","method":"put"},{"specification":"Create a new admin account and initial session for platform administrators. This operation provisions a base user in community_platform_users, binds secure credentials in community_platform_user_credentials (email, password_hash, email_normalized, email_verified_at), assigns elevated privileges by inserting a row into community_platform_systemadmins, and finally issues a session in community_platform_sessions by storing a refresh_token_hash with issued_at/expires_at and optional user-agent/ip. The endpoint returns JWTs and subject information encapsulated by the ICommunityPlatformSystemAdmin.IAuthorized DTO.\n\nPrimary tables involved:\n- community_platform_users (user identity, username/status/last_login_at)\n- community_platform_user_credentials (email/password_hash lifecycle)\n- community_platform_systemadmins (role assignment with granted_at/granted_by_user_id optional)\n- community_platform_sessions (refresh_token_hash, issued_at, expires_at, revoked_at)\n\nThe creation flow validates uniqueness on username and credentials (email, email_normalized), and normalizes email. It sets lifecycle timestamps (created_at/updated_at) and role timestamps (granted_at). The response includes signed access/refresh tokens backed by the session row. Audit trails may record a \"join\" or \"login\" event in community_platform_audit_logs referencing session_id and actor_user_id where appropriate.\n\nThis specification mirrors Prisma schema comments: credentials are one-to-one with users; administrators are tracked distinctly via community_platform_systemadmins; sessions store only token hashes; email verification is optional at join time but supported later via email_verified_at.","authorizationType":"join","description":"Purpose and function: Registers a new platform administrator by creating identity in community_platform_users, secure credentials in community_platform_user_credentials, a role assignment in community_platform_systemadmins, and an initial session in community_platform_sessions. It returns signed tokens (access and refresh) in ICommunityPlatformSystemAdmin.IAuthorized so the new admin can immediately access admin-restricted features.\n\nImplementation details: The service validates uniqueness on community_platform_users.username and community_platform_user_credentials.email/email_normalized, persists password_hash (never plaintext), initializes status, and records lifecycle timestamps (created_at/updated_at). The admin role is established by inserting into community_platform_systemadmins with granted_at and optional granted_by_user_id when created by an existing admin. A refresh session is inserted into community_platform_sessions including refresh_token_hash, issued_at, expires_at, optional user_agent and ip. The response includes JWTs corresponding to the newly created session.\n\nRole-specific integration: This endpoint specifically provisions the \"systemAdmin\" capability tracked by community_platform_systemadmins, enabling elevated policy enforcement separate from standard community members. Ownership/authorship semantics remain unchanged; administrators do not gain authorship over other users’ content per business rules.\n\nSecurity considerations: Passwords are accepted only to compute password_hash stored in community_platform_user_credentials. Email normalization populates email_normalized to enforce case-insensitive uniqueness. The session layer stores refresh_token_hash only, never the raw token, and uses issued_at/expires_at for lifecycle. last_login_at may be updated on both users and credentials records after successful issuance.\n\nRelated operations: After registration, administrators can authenticate again via POST /auth/systemAdmin/login, renew tokens via POST /auth/systemAdmin/refresh, change password via PUT /auth/systemAdmin/password, and manage sessions via POST /auth/systemAdmin/logout or /auth/systemAdmin/logoutAll.","summary":"Register a new admin by creating community_platform_users, community_platform_user_credentials, community_platform_systemadmins, and a session in community_platform_sessions.","parameters":[],"requestBody":{"description":"Registration payload for creating an admin account and initial session.","typeName":"ICommunityPlatformSystemAdmin.ICreate"},"responseBody":{"description":"Authorized admin session with access/refresh tokens and subject info.","typeName":"ICommunityPlatformSystemAdmin.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/systemAdmin/join","method":"post"},{"specification":"Authenticate an existing admin using credentials and establish a new session record. This operation looks up community_platform_user_credentials by email/email_normalized, verifies password_hash, verifies that the corresponding user exists in community_platform_users and holds an active admin role in community_platform_systemadmins (revocation determined by revoked_at if used), then issues a new entry in community_platform_sessions with refresh_token_hash, issued_at, expires_at, and optional user_agent/ip. It updates last_login_at in both community_platform_users and community_platform_user_credentials as appropriate and returns tokens encapsulated by ICommunityPlatformSystemAdmin.IAuthorized.\n\nPrimary tables involved:\n- community_platform_user_credentials (email/email_normalized, password_hash, last_login_at)\n- community_platform_users (status, last_login_at)\n- community_platform_systemadmins (role presence and timestamps)\n- community_platform_sessions (refresh_token_hash lifecycle)\n\nThis mirrors schema comments: credentials are 1:1 with users; admin assignment is distinct; sessions store only token hashes. Audit logging to community_platform_audit_logs may record a \"login\" event referencing session_id and actor_user_id.","authorizationType":"login","description":"Purpose and function: Authenticates a platform administrator by validating community_platform_user_credentials (email/email_normalized against password_hash), confirming the user identity in community_platform_users, and the admin role assignment in community_platform_systemadmins. On success, it creates a new community_platform_sessions row and returns JWTs in ICommunityPlatformSystemAdmin.IAuthorized.\n\nImplementation details: The service normalizes the email for lookup, verifies the password against password_hash, checks user status, confirms the admin role via community_platform_systemadmins, and writes a session with refresh_token_hash, issued_at, expires_at, and optional user_agent/ip. It updates last_login_at on both users and credentials.\n\nRole-specific integration: Only accounts with an active presence in community_platform_systemadmins are considered systemAdmin and will receive admin-scoped JWT claims. This preserves strong separation between standard members and admins.\n\nSecurity considerations: Only token hashes are persisted in community_platform_sessions, never raw tokens; access tokens are short-lived while refresh tokens align with expires_at. The endpoint may throttle by ip/user_agent from the request.\n\nRelated operations: Use POST /auth/systemAdmin/refresh to renew tokens, PUT /auth/systemAdmin/password to rotate password_hash and invalidate old sessions per policy, and POST /auth/systemAdmin/logout or /auth/systemAdmin/logoutAll to revoke sessions.","summary":"Authenticate an admin via community_platform_user_credentials and issue a session in community_platform_sessions.","parameters":[],"requestBody":{"description":"Admin login credentials.","typeName":"ICommunityPlatformSystemAdmin.ILogin"},"responseBody":{"description":"Authorized admin session with access/refresh tokens and subject info.","typeName":"ICommunityPlatformSystemAdmin.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/systemAdmin/login","method":"post"},{"specification":"Refresh an admin’s JWTs using a valid refresh token, rotating or issuing a new community_platform_sessions record as needed. The operation locates an active session by refresh_token_hash, verifies expires_at and revoked_at, and returns renewed tokens represented by ICommunityPlatformSystemAdmin.IAuthorized. It may update updated_at and optionally rotate refresh_token_hash per security policy. Related user and credential records (community_platform_users, community_platform_user_credentials) are not modified except for optional last_login_at updates.\n\nPrimary tables involved:\n- community_platform_sessions (refresh_token_hash, issued_at, expires_at, revoked_at)\n- community_platform_users (indirect reference via session.user)\n- community_platform_systemadmins (role confirmation)\n\nAudit logging to community_platform_audit_logs can record a \"refresh\" event linked to session_id.","authorizationType":"refresh","description":"Purpose and function: Exchanges a valid refresh token for new JWTs for an existing system administrator. It validates the underlying community_platform_sessions row using refresh_token_hash and lifecycle fields (issued_at, expires_at, revoked_at) and returns new tokens in ICommunityPlatformSystemAdmin.IAuthorized.\n\nImplementation details: The service validates session currency and optionally rotates refresh_token_hash and expires_at to extend the session, persisting changes to updated_at. It confirms the user is still an admin via community_platform_systemadmins.\n\nRole-specific integration: Ensures the caller maintains systemAdmin status at refresh time; if the role was revoked (e.g., revoked_at set in community_platform_systemadmins), refresh is denied.\n\nSecurity considerations: Only a hash of the refresh token is stored; renewal should be refused if the session has revoked_at or has passed expires_at. IP and user_agent may be compared to the stored values.\n\nRelated operations: For explicit termination, use POST /auth/systemAdmin/logout (current session) or POST /auth/systemAdmin/logoutAll (all sessions). For password rotations, use PUT /auth/systemAdmin/password to update password_hash and manage session revocation per policy.","summary":"Refresh admin tokens by validating community_platform_sessions and confirming community_platform_systemadmins role.","parameters":[],"requestBody":{"description":"Refresh token exchange payload.","typeName":"ICommunityPlatformSystemAdmin.IRefresh"},"responseBody":{"description":"Authorized admin session with renewed access/refresh tokens.","typeName":"ICommunityPlatformSystemAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/systemAdmin/refresh","method":"post"},{"specification":"Sign out the current admin by revoking the active session. This operation locates the caller’s current community_platform_sessions row (e.g., by session_id in auth context or matching refresh_token_hash) and sets revoked_at along with updated_at. It ensures that subsequent refresh attempts fail for this session. No user or credential data is modified. Returns a simple confirmation DTO.\n\nPrimary tables involved:\n- community_platform_sessions (revoked_at lifecycle)\n\nOptional audit: Writes a \"logout\" event to community_platform_audit_logs with actor_user_id and session_id.","authorizationType":null,"description":"Purpose and function: Terminates the caller’s current session by updating revoked_at in community_platform_sessions so the refresh token can no longer be used.\n\nImplementation details: The provider identifies the active session tied to the authenticated admin and sets revoked_at. updated_at is also modified.\n\nRole-specific integration: Requires an authenticated systemAdmin context to revoke only their own session.\n\nSecurity considerations: Only the session row is changed; no credentials or other sessions are affected. This conforms to session revocation semantics captured in the schema.\n\nRelated operations: Use POST /auth/systemAdmin/logoutAll to revoke all sessions for the admin, POST /auth/systemAdmin/refresh to renew an unrevoked session, and PUT /auth/systemAdmin/password to rotate password_hash if needed.","summary":"Revoke the current admin session by setting revoked_at in community_platform_sessions.","parameters":[],"requestBody":null,"responseBody":{"description":"Result of current-session sign-out operation.","typeName":"ICommunityPlatformSystemAdmin.ISignOut"},"authorizationRole":"systemAdmin","name":"signOut","path":"/auth/systemAdmin/logout","method":"post"},{"specification":"Sign out the admin from all devices by revoking all active sessions. This operation finds all non-revoked community_platform_sessions for the authenticated admin (by community_platform_user_id where revoked_at is null and expires_at is in the future) and sets revoked_at on each. It does not alter user credentials. Returns a confirmation DTO.\n\nPrimary tables involved:\n- community_platform_sessions (bulk revocation via revoked_at)\n\nOptional audit: Records a \"logout_all\" event in community_platform_audit_logs with actor_user_id.","authorizationType":null,"description":"Purpose and function: Revokes every active session belonging to the authenticated system administrator by setting revoked_at across all corresponding community_platform_sessions records.\n\nImplementation details: The provider queries all active sessions for community_platform_user_id and marks them revoked atomically or idempotently. updated_at is adjusted accordingly.\n\nRole-specific integration: Only the authenticated systemAdmin can revoke their own sessions en masse.\n\nSecurity considerations: After completion, no refresh token for the admin remains valid. Access tokens expire naturally according to their TTL.\n\nRelated operations: Use POST /auth/systemAdmin/logout for current session only, and PUT /auth/systemAdmin/password to rotate password_hash which often implies revoking other sessions as well.","summary":"Revoke all admin sessions by updating revoked_at across community_platform_sessions for the user.","parameters":[],"requestBody":null,"responseBody":{"description":"Result of bulk sign-out operation.","typeName":"ICommunityPlatformSystemAdmin.ISignOutAll"},"authorizationRole":"systemAdmin","name":"signOutAll","path":"/auth/systemAdmin/logoutAll","method":"post"},{"specification":"Change the admin’s password and optionally rotate sessions. This operation verifies the current password using community_platform_user_credentials.password_hash, updates password_hash, sets password_updated_at, and may update last_login_at for the credentials record. Depending on policy, it can also revoke existing community_platform_sessions (set revoked_at) except the current one or issue a fresh session. The endpoint can return renewed tokens in ICommunityPlatformSystemAdmin.IAuthorized when rotation is requested.\n\nPrimary tables involved:\n- community_platform_user_credentials (password_hash, password_updated_at, last_login_at)\n- community_platform_sessions (revocation and/or re-issuance semantics)\n\nOptional audit: \"password_changed\" event in community_platform_audit_logs.","authorizationType":null,"description":"Purpose and function: Allows an authenticated systemAdmin to change their password by validating the current secret against password_hash in community_platform_user_credentials and persisting a new password_hash along with password_updated_at.\n\nImplementation details: After verifying the current password, the service writes the new password_hash and sets password_updated_at. Depending on security policy, it may revoke other community_platform_sessions (revoked_at) and either keep or replace the current session. If rotation is requested, the endpoint can respond with updated tokens to avoid forcing a disruptive re-login.\n\nRole-specific integration: Requires an authenticated systemAdmin and affects only the caller’s credentials; it does not modify other users.\n\nSecurity considerations: Plaintext passwords are never stored; only password_hash is updated. Session revocation behavior is aligned with the sessions schema fields revoked_at/expires_at.\n\nRelated operations: If the user needs to terminate active devices, they can call POST /auth/systemAdmin/logoutAll. If they lost access tokens but have a refresh token, they should use POST /auth/systemAdmin/refresh.","summary":"Update password_hash/password_updated_at in community_platform_user_credentials; optionally rotate community_platform_sessions.","parameters":[],"requestBody":{"description":"Current and new password along with optional flags for session rotation.","typeName":"ICommunityPlatformSystemAdminPassword.IUpdate"},"responseBody":{"description":"Updated authorization context, typically returning renewed tokens after password change.","typeName":"ICommunityPlatformSystemAdmin.IAuthorized"},"authorizationRole":"systemAdmin","name":"changePassword","path":"/auth/systemAdmin/password","method":"put"},{"specification":"Send an email verification message for the authenticated admin’s email. This operation reads community_platform_user_credentials.email/email_normalized and, if not yet verified (email_verified_at is null), triggers delivery of a verification link/token through the platform’s messaging pipeline. It records an audit event but does not modify the database immediately beyond updated_at on related services if used. It returns a simple acknowledgment DTO.\n\nPrimary tables involved:\n- community_platform_user_credentials (email, email_normalized, email_verified_at)\n\nOptional audit: \"email_verification_sent\" event to community_platform_audit_logs.","authorizationType":null,"description":"Purpose and function: Initiates email verification for the authenticated systemAdmin by sending a verification link to the address stored in community_platform_user_credentials.email when email_verified_at is null.\n\nImplementation details: The provider checks email_verified_at and reads email/email_normalized. It dispatches a verification message out of band and returns an acknowledgment. No structural changes to credentials occur yet.\n\nRole-specific integration: Requires the caller to be an authenticated systemAdmin; this action affects only their own credentials record.\n\nSecurity considerations: The endpoint does not disclose whether an email is already verified beyond the authenticated context and avoids leaking information publicly. Any token associated with verification is handled by the messaging layer; only email_verified_at is ultimately updated by the confirmation endpoint.\n\nRelated operations: Use POST /auth/systemAdmin/email/verify to confirm the token and set email_verified_at.","summary":"Trigger verification email based on community_platform_user_credentials.email when email_verified_at is null.","parameters":[],"requestBody":null,"responseBody":{"description":"Acknowledgment of verification email dispatch.","typeName":"ICommunityPlatformSystemAdminEmailVerify.ISent"},"authorizationRole":"systemAdmin","name":"sendEmailVerification","path":"/auth/systemAdmin/email/verify/send","method":"post"},{"specification":"Confirm an admin’s email verification token. This public endpoint accepts a verification token and, upon validation, sets email_verified_at on the corresponding community_platform_user_credentials row. It does not alter password_hash or sessions but may optionally sign the user in by returning ICommunityPlatformSystemAdmin.IAuthorized depending on product policy; here we return a simple confirmation DTO to keep concerns separate from login.\n\nPrimary tables involved:\n- community_platform_user_credentials (email_verified_at)\n\nOptional audit: \"email_verified\" event to community_platform_audit_logs.","authorizationType":null,"description":"Purpose and function: Marks the admin’s email as verified by setting email_verified_at on community_platform_user_credentials after validating the provided verification token.\n\nImplementation details: The provider decodes/validates the token, locates the relevant credentials record (email/email_normalized), and sets email_verified_at. No changes are made to community_platform_users or community_platform_sessions.\n\nRole-specific integration: Public confirmation does not require an authenticated context because the token itself provides authorization for this action; it pertains to a systemAdmin’s credentials record.\n\nSecurity considerations: Tokens must be single-use and time-limited; the endpoint will refuse invalid or expired tokens and avoid leaking existence of accounts beyond success/failure semantics.\n\nRelated operations: If the user requires a new token, they should use POST /auth/systemAdmin/email/verify/send after logging in.","summary":"Set email_verified_at on community_platform_user_credentials after verifying the provided token.","parameters":[],"requestBody":{"description":"Verification token payload.","typeName":"ICommunityPlatformSystemAdminEmailVerify.IRequest"},"responseBody":{"description":"Confirmation of successful email verification.","typeName":"ICommunityPlatformSystemAdminEmailVerify.IResponse"},"authorizationRole":null,"name":"verifyEmail","path":"/auth/systemAdmin/email/verify","method":"post"},{"specification":"Retrieve a filtered, sorted, and paginated collection of categories from the Prisma table community_platform_categories. This operation supports public discovery and explore/filtering use cases. It allows clients to search by business code and human-readable name, filter by active state, and sort by key columns (e.g., display_order, name, created_at). Pagination is required for scalable UI rendering. The response returns a page container of category summaries suitable for list views, while the request body carries search, filtering, and sorting parameters referencing components.schemas ICommunityPlatformCategory.IRequest. Records with deleted_at not null must be excluded by default business rules. Downstream entities (communities) reference categories by id, so stable identifiers and uniqueness constraints (code, name) must be respected.","authorizationType":null,"authorizationRole":null,"summary":"Search and paginate categories from Prisma table community_platform_categories","description":"This operation queries the community_platform_categories table, which is the canonical list of community categories used for Explore and filtering across the platform. According to the schema comments, it maintains a unique code (slug-like), a unique name for display, an optional description, a UI-oriented display_order, an active flag, and lifecycle timestamps (created_at, updated_at). The results are intended for list/grid surfaces and administrative pickers.\n\nSecurity-wise, this is a read-only discovery endpoint and should be publicly accessible. Authorization can remain open while the service ensures that only records appropriate for public consumption are returned. Business logic should exclude categories where deleted_at is not null and may also optionally exclude inactive categories unless explicitly requested via filters.\n\nFrom a data modeling standpoint, communities (community_platform_communities) reference categories through community_platform_category_id. The uniqueness constraints on code and name (both unique) enable deterministic linking and avoid ambiguous labels. Client queries commonly search by partial code/name and filter by active to power user-facing category chips and explore filters.\n\nValidation and business logic considerations: the request body supports pagination parameters, search terms for code/name, and sorting on display_order (typical default ascending for chip presentation), name, or created_at. Filters should be sanitized, and unknown sort keys rejected with a clear error, while respecting the schema’s indices (e.g., active, display_order; created_at) for performance.\n\nRelated operations include GET /categories/{categoryId} for a single category detail. Expected behavior includes deterministic ordering (stable within the same response) and excluding records marked deleted via the deleted_at column. Error handling should return meaningful messages for invalid sort fields or malformed pagination inputs while preserving public read semantics.","parameters":[],"requestBody":{"description":"Search, filter, sort, and pagination parameters for categories","typeName":"ICommunityPlatformCategory.IRequest"},"responseBody":{"description":"Paginated page containing category summaries for list rendering","typeName":"IPageICommunityPlatformCategory.ISummary"},"name":"index","path":"/communityPlatform/categories","method":"patch"},{"specification":"Fetch a single category by its identifier from the Prisma table community_platform_categories. Returns the full category entity (including code, name, description, display_order, active, and timestamps) suitable for detail views or administrative forms. The operation validates the path parameter as a UUID and excludes records where deleted_at is not null. The response references components.schemas ICommunityPlatformCategory.","authorizationType":null,"authorizationRole":null,"summary":"Get a single category (community_platform_categories) by ID","description":"This operation retrieves one record from community_platform_categories using the categoryId path parameter (UUID). As described in the schema, each category carries a unique business code (code), a unique display name (name), optional description, UI display_order, a Boolean active state, and lifecycle timestamps (created_at, updated_at). Communities reference categories by id, so this endpoint is often used to hydrate configuration screens and contextual sidebars.\n\nSecurity considerations: this is a read-only public endpoint intended for discovery and reference. Implementations should omit records where deleted_at is not null. If the requested id does not correspond to an available record, a not-found response should be produced.\n\nThe underlying relationships include community_platform_communities referencing the category; however, this endpoint returns only the category entity. Validation ensures the identifier format is correct and that the record exists and is eligible for return. Error handling should differentiate invalid identifiers from valid-but-missing records, and avoid leaking internal details.","parameters":[{"name":"categoryId","description":"Unique identifier of the category (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed category entity","typeName":"ICommunityPlatformCategory"},"name":"at","path":"/communityPlatform/categories/{categoryId}","method":"get"},{"specification":"Retrieve a filtered, sorted, and paginated list of reserved terms from the Prisma table community_platform_reserved_terms. This supports administrative and validation previews for reserved names (e.g., community_name). Clients can search term or term_normalized, filter by applies_to context and active flag, and sort (e.g., by created_at or term). The request body references components.schemas ICommunityPlatformReservedTerm.IRequest. The response is a paginated collection of reserved term summaries for list views. Records where deleted_at is not null are excluded by business rules. The uniqueness composite (applies_to, term_normalized) is in effect and should be respected by any search logic.","authorizationType":null,"authorizationRole":null,"summary":"Search and paginate reserved terms (community_platform_reserved_terms)","description":"This operation lists records from community_platform_reserved_terms, which the schema defines as an administrative list of reserved terms used to validate and block specific names or identifiers (e.g., community names, system-reserved words). Each record contains the original term, a normalized variant for case-insensitive matching (term_normalized), the applies_to context (such as 'community_name' or 'global'), an optional reason, an active flag, and standard timestamps.\n\nSecurity posture: read-only and primarily administrative/reference in nature, yet it may be publicly consumable depending on product policy. For broad validation transparency, this document sets the endpoint as public read. Implementations should filter out records where deleted_at is not null. Additional filtering by active allows clients to see only enforced terms when needed.\n\nData and validation rules: the listing supports free-text search against term (and optionally term_normalized), filtering by applies_to and active, and sorting by created_at (default), term, or applies_to. Clients should paginate results (page/limit or cursor approach) to keep responses performant. Indices on term and term_normalized (trigram) support efficient search behavior for partial matches.\n\nRelated operations include GET /reservedTerms/{reservedTermId} for detail retrieval. Expected behavior includes stable ordering within a page, clear differentiation between empty results and invalid filters, and consistent exclusion of records that have a non-null deleted_at value.","parameters":[],"requestBody":{"description":"Search, filter, sort, and pagination parameters for reserved terms","typeName":"ICommunityPlatformReservedTerm.IRequest"},"responseBody":{"description":"Paginated page of reserved term summaries","typeName":"IPageICommunityPlatformReservedTerm.ISummary"},"name":"index","path":"/communityPlatform/reservedTerms","method":"patch"},{"specification":"Fetch a single reserved term by its identifier from the Prisma table community_platform_reserved_terms. Returns the full entity including term, term_normalized, applies_to, reason (if any), active, and timestamps. The operation validates the path parameter as a UUID and excludes records where deleted_at is not null. The response references components.schemas ICommunityPlatformReservedTerm.","authorizationType":null,"authorizationRole":null,"summary":"Get a single reserved term (community_platform_reserved_terms) by ID","description":"This operation loads one record from community_platform_reserved_terms using the reservedTermId path parameter (UUID). Per the schema comments, each reserved term captures the original term, a normalized version for case-insensitive uniqueness, the target context via applies_to, an optional reason explaining the reservation, an active flag, and lifecycle timestamps. The uniqueness constraint on (applies_to, term_normalized) guarantees consistent enforcement across contexts.\n\nSecurity considerations: this is a read-only endpoint and is configured as public for transparency. Implementations should not return records with deleted_at populated. If the identifier does not resolve to an existing eligible record, return a not-found response.\n\nValidation and behavior: ensure the parameter is a valid UUID and that the record exists. The response returns the reserved term entity only; related validation logic that consumes these terms occurs elsewhere. Consistent error handling and absence of internal details ensure stable client integrations.","parameters":[{"name":"reservedTermId","description":"Unique identifier of the reserved term (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed reserved term entity","typeName":"ICommunityPlatformReservedTerm"},"name":"at","path":"/communityPlatform/reservedTerms/{reservedTermId}","method":"get"},{"specification":"Retrieve a filtered, paginated list of application configuration entries from the community_platform_app_settings table. This list endpoint supports advanced querying for administrators to review configuration keys, value types, activation status, and creation/update windows. It returns a page container with summary rows optimized for list views. The request body follows ICommunityPlatformAppSetting.IRequest for filters (e.g., key substring, value_type, active toggle, created_at/updated_at ranges, sort), and the response is a paginated IPageICommunityPlatformAppSetting.ISummary. The operation targets the Systematic domain table community_platform_app_settings, which stores platform-level settings (key, value, value_type, description, active) with lifecycle timestamps (created_at, updated_at, deleted_at).","path":"/communityPlatform/systemAdmin/appSettings","method":"patch","summary":"List/search application settings from Prisma table community_platform_app_settings with pagination for admins","description":"This operation lists configuration settings from the community_platform_app_settings table for administrative review and management scenarios. Per the Prisma schema comments, this table holds key-value configuration entries that control platform behavior, including feature flags and policy values. Each entry includes a unique key, a string value (parsed by application logic), a value_type semantic hint, an optional description, an active boolean, and lifecycle timestamps (created_at, updated_at). Records with a non-null deleted_at are considered removed from active views and should be excluded from normal listings.\n\nSecurity-wise, configuration data is sensitive and intended for platform administrators. Only users with elevated privileges should access this endpoint. The endpoint designates authorizationRoles to \"systemAdmin\" based on the role assignment model community_platform_systemadmins, which captures platform administrators via a dedicated assignment table.\n\nThe request body ICommunityPlatformAppSetting.IRequest supports pagination (page, limit), free-text search over key/description, filtering by active and value_type, and sorting by created_at, updated_at, key, or display-friendly fields. Sorting should allow ascending/descending control and deterministic tie-breaking when values are equal. The response IPageICommunityPlatformAppSetting.ISummary provides a stable page container including pagination metadata and an array of summary items containing essential fields such as id, key, value_type, active, and updated_at suitable for list renderings.\n\nRelated operations include retrieving an individual setting by id via GET /appSettings/{appSettingId}. Administrative write operations (create/update/delete) are intentionally not exposed here, aligning with selective API surface principles unless explicitly required elsewhere. Error handling should return appropriate authorization errors for non-admin callers and support validation messages for malformed search/sort parameters.","parameters":[],"requestBody":{"description":"Search criteria, sorting, and pagination parameters for application settings.","typeName":"ICommunityPlatformAppSetting.IRequest"},"responseBody":{"description":"Paginated list of application setting summaries matching the criteria.","typeName":"IPageICommunityPlatformAppSetting.ISummary"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index"},{"specification":"Retrieve a single application setting by its identifier from the community_platform_app_settings table. Returns the full ICommunityPlatformAppSetting object including key, value, value_type, description, active, and lifecycle timestamps. Intended for administrative inspection of a specific configuration entry.","path":"/communityPlatform/systemAdmin/appSettings/{appSettingId}","method":"get","summary":"Get a specific app setting (community_platform_app_settings) by ID for admin inspection","description":"This operation fetches one configuration record from community_platform_app_settings using its primary key id (UUID). According to the Prisma schema comments, the table stores platform-wide configuration entries with a unique key, a string value, value_type (semantic hint), optional description, an active flag, and created_at/updated_at timestamps. Records where deleted_at is non-null are considered removed from active use; typical implementations should not return such entries to standard callers unless an audit context explicitly requires it.\n\nAccess is restricted to platform administrators due to the sensitive nature of configuration data. The authorization role aligns with the system administrator assignment captured in community_platform_systemadmins. The endpoint returns a detailed ICommunityPlatformAppSetting representation suitable for admin detail views and subsequent decision-making.\n\nIf the id does not correspond to an active configuration entry, the service should respond with a not-found outcome. If the caller lacks sufficient privileges, return an authorization error consistent with platform security guidelines. This endpoint is typically used together with the list/search endpoint PATCH /appSettings for navigation from a list to a detail view.","parameters":[{"name":"appSettingId","description":"Unique identifier of the target application setting (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed application setting record.","typeName":"ICommunityPlatformAppSetting"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at"},{"specification":"Provide a filtered, paginated list of public communities from the community_platform_communities table. Supports search by name/description, category filtering via community_platform_categories, activity/creation date ranges, and sorting by created_at, last_active_at, or name. Returns a paginated summary list (IPageICommunityPlatformCommunity.ISummary) optimized for Explore and feed selections.","path":"/communityPlatform/communities","method":"patch","summary":"Search and paginate communities from Prisma table community_platform_communities for public discovery","description":"This operation lists community records from community_platform_communities for public discovery and navigation. The Prisma schema describes communities with an immutable unique name, optional description, optional logo and banner URIs, a required category (via community_platform_categories), an owner reference (community_platform_users), last_active_at, disabled_at for administrative disablement, and lifecycle timestamps. Records with a non-null deleted_at are considered removed from active views and should be excluded from discovery responses. When disabled_at is set, communities should be hidden from promotion surfaces per schema note, which informs filtering behavior for general listings.\n\nThis endpoint is public read and does not require authentication. It enables search and exploration scenarios: free-text search on name/description, category filtering by community_platform_category_id or business code, and sorting. Common sorts include Newest (created_at descending with stable tie-breaking) and activity-based ordering (last_active_at). Name-based sorting can support alphabetical ordering for browse views. The request body ICommunityPlatformCommunity.IRequest conveys filters and pagination (page, limit), and sort directives with explicit direction.\n\nThe response is a paginated container IPageICommunityPlatformCommunity.ISummary, returning essential fields for list rendering: id, immutable name, category linkage (id/code/name if denormalized in DTO), optional description and logo/banner URIs, member count if included by view composition, and timestamps needed for sorting (created_at, last_active_at). This list endpoint pairs with GET /communities/{communityId} for detail screens and with other feed endpoints for posts within a community.","parameters":[],"requestBody":{"description":"Community search filters, sorting, and pagination parameters.","typeName":"ICommunityPlatformCommunity.IRequest"},"responseBody":{"description":"Paginated list of community summaries.","typeName":"IPageICommunityPlatformCommunity.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index"},{"specification":"Retrieve a single community by identifier from the community_platform_communities table. Returns full details as ICommunityPlatformCommunity, including owner reference, category linkage, immutable name, optional metadata (description, logo, banner), last_active_at, disabled_at status, and lifecycle timestamps. May include associated rules via separate endpoints or embedded as needed by DTO composition.","path":"/communityPlatform/communities/{communityId}","method":"get","summary":"Get a specific community (community_platform_communities) by ID for public detail view","description":"This read operation fetches a specific community from community_platform_communities using its id (UUID). Per schema comments, a community has an immutable unique name and optional metadata assets, belongs to a category in community_platform_categories, and references an owner in community_platform_users. It also tracks last_active_at for display and sorting, disabled_at to indicate administrative disablement, and created_at/updated_at timestamps. Records where deleted_at is non-null are considered removed from active use; standard behavior for public detail retrieval is to return a not-found outcome for such records.\n\nThe endpoint is public read and requires no authentication. It supports community detail pages that display identity and metadata. For community rules, the system stores an ordered list in community_platform_community_rules with order_index and text; clients may call a separate endpoint to fetch them or receive them pre-composed depending on DTO design. This operation does not modify any state and thus returns data without side effects.\n\nTypical errors include not found when the identifier does not match an available community and visibility constraints when disabled_at is set (e.g., detail may remain accessible while promotion surfaces hide it depending on product policy). This endpoint is commonly used with the list/search endpoint PATCH /communities and downstream post list endpoints within the community.","parameters":[{"name":"communityId","description":"Unique identifier of the target community (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed community record.","typeName":"ICommunityPlatformCommunity"},"authorizationType":null,"authorizationRole":null,"name":"at"},{"specification":"Create a new community record in the Communities table (Prisma: community_platform_communities). The endpoint accepts a unique immutable name, a required category reference (community_platform_categories.id), and optional metadata (description, logo URI, banner URI). It sets ownership via community_platform_users.id and initializes lifecycle timestamps including last_active_at. Business validation follows the PRD: name format and uniqueness, category from the managed list, and optional presentation fields. On success, returns the created community entity.","path":"/communityPlatform/communityMember/communities","method":"post","summary":"Create a community (community_platform_communities) with immutable name, category, and optional metadata.","description":"This operation creates a sub-community in the community_platform_communities table. According to the schema comments, a community stores an immutable unique name (name), optional description, optional logo and banner URIs (logo, banner), belongs to an owner (community_platform_user_id referencing community_platform_users), and is categorized by community_platform_category_id referencing community_platform_categories. The table also tracks last_active_at for recent activity, disabled_at for administrative disablement, and standard timestamps including created_at, updated_at, and a nullable deleted_at for records no longer active.\n\nSecurity and permissions: Only authenticated users with creation capability may call this endpoint; business logic must ensure the caller becomes the owner (community_platform_user_id) of the new community. Ownership and policy checks are enforced in the provider layer, including reserved term checks (via community_platform_reserved_terms) and category availability (active flag in community_platform_categories). The name is immutable post-creation; application logic must reject attempts to modify it later. The system may also initialize related display elements (e.g., last_active_at to now) consistent with the schema’s purpose.\n\nValidation rules and business logic: The community name must be globally unique (@@unique([name])) and conform to PRD format constraints (letters/digits/hyphen/underscore, length 3–32, case-insensitive uniqueness). The chosen category must reference a valid community_platform_categories.id that is active. Optional description can be present; logo and banner should be valid URIs stored as strings. On successful creation, downstream features like membership personalization and explore pages will read from this record, and related rules may be added later via the rules management endpoints.\n\nRelated operations: Use PUT /communityPlatform/communityMember/communities/{communityId} to edit metadata fields (not the name), DELETE /communityPlatform/communityMember/communities/{communityId} to mark the community as deleted for removal from public views, and PATCH /communityPlatform/communities/{communityId}/rules to retrieve the community’s ordered rule items. Error handling includes name conflicts, invalid format, and invalid category ID. The response returns the full community entity for client display and subsequent navigation.","parameters":[],"requestBody":{"description":"Creation payload including immutable name, required category reference, and optional metadata fields.","typeName":"ICommunityPlatformCommunity.ICreate"},"responseBody":{"description":"The newly created community entity with owner, category, and metadata.","typeName":"ICommunityPlatformCommunity"},"authorizationType":null,"authorizationRole":"communityMember","name":"create"},{"specification":"Update an existing community in Communities (Prisma: community_platform_communities) identified by communityId. Supports editing description, logo URI, banner URI, category assignment, and related presentation fields while keeping the unique name immutable. Returns the updated community.","path":"/communityPlatform/communityMember/communities/{communityId}","method":"put","summary":"Update community metadata (community_platform_communities) except immutable name.","description":"This operation updates a community record stored in community_platform_communities. The schema specifies key fields: immutable name (name), optional description, optional logo and banner URIs (logo, banner), owner reference (community_platform_user_id), category reference (community_platform_category_id), last_active_at, disabled_at (for administrative disablement), and lifecycle timestamps. The name remains immutable as per business rules and schema commentary; application logic must reject attempts to alter it.\n\nSecurity and permissions: Only the community owner (community_platform_user_id) or appropriately authorized actors (e.g., administrative capabilities) may update metadata. The endpoint requires authentication with role-based gating; the provider function must verify ownership and policy. The category change must reference an existing, active community_platform_categories record. URIs for logo and banner are stored as strings and should be validated at the application level.\n\nValidation and behavior: Keep the name unchanged, enforce allowed category, and ensure presentation fields remain within expected limits. The updated_at timestamp should reflect the modification. Related entities such as community_platform_community_rules and memberships are unaffected by this edit but may be displayed alongside the community. If a disabled_at value exists, writing logic should respect that state (e.g., disallow posting) but metadata edits by owners or admins may still be permitted per policy.\n\nRelated operations: POST /communityPlatform/communityMember/communities creates a community; DELETE /communityPlatform/communityMember/communities/{communityId} marks the record as deleted (via deleted_at) to remove it from public access; PATCH /communityPlatform/communities/{communityId}/rules lists ordered rules. Errors include not found, permission denied, invalid category, and attempts to modify immutable fields.","parameters":[{"name":"communityId","description":"Identifier of the community to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for description, logo, banner, category, and related metadata (name is immutable and must not change).","typeName":"ICommunityPlatformCommunity.IUpdate"},"responseBody":{"description":"The updated community entity reflecting new metadata.","typeName":"ICommunityPlatformCommunity"},"authorizationType":null,"authorizationRole":"communityMember","name":"update"},{"specification":"Remove a community from public access by marking the record in Communities (Prisma: community_platform_communities) as deleted using its deleted_at column. The operation targets a specific communityId and propagates removal effects to feeds, searches, and memberships according to business rules. No response body is returned.","path":"/communityPlatform/communityMember/communities/{communityId}","method":"delete","summary":"Mark a community (community_platform_communities) as deleted to remove it from public access.","description":"This operation targets the community_platform_communities table to remove a community from public access. The schema includes a nullable deleted_at column indicating a record is no longer active. When invoked, implementation sets deleted_at and ensures dependent surfaces exclude the community and its content. The table also links to posts (community_platform_posts), rules (community_platform_community_rules), memberships (community_platform_community_memberships), and recent communities (community_platform_recent_communities), which should be excluded from public results once the community is marked deleted.\n\nSecurity and permissions: Only the owner (community_platform_user_id) or authorized administrative actors may execute this removal. The provider function must enforce ownership and policy checks. After the record is marked deleted, content is removed from feeds (including mv_community_platform_global_latest_posts), searches, and recent lists; related memberships may be ended by setting their deleted_at as appropriate in the membership table. This preserves audit trails while ensuring the community no longer appears on public surfaces, in alignment with the schema’s lifecycle fields.\n\nBehavior and errors: If the community does not exist or is already removed, the provider should return a not-found or idempotent success consistent with system conventions. Attempts by non-owners should be denied. No response body is returned on success, and clients should update UI and caches accordingly.","parameters":[{"name":"communityId","description":"Identifier of the community to remove from public access.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"communityMember","name":"erase"},{"specification":"Retrieve an ordered, paginated list of community rule items from Community Rules (Prisma: community_platform_community_rules) for a given communityId. Supports pagination, text search, and sorting (default by order_index ascending, then created_at). Returns a paginated collection for list displays and settings views.","path":"/communityPlatform/communities/{communityId}/rules","method":"patch","summary":"List community rules (community_platform_community_rules) for a community with pagination and sorting.","description":"This operation lists rule rows stored in community_platform_community_rules for a specific community (community_platform_community_id). The schema defines fields including order_index (unique per community to preserve deterministic order), text (1–200 chars), and lifecycle timestamps (created_at, updated_at, deleted_at). Each rule belongs to a community_platform_communities record. The default display order in product requirements is the preserved owner-defined ordering, which this endpoint reflects by sorting primarily by order_index and secondarily by created_at for stability.\n\nSecurity and visibility: Rules are public presentation metadata of a community and can be retrieved without authentication. The provider logic should filter out records with non-null deleted_at so only active rules are returned. Consumers typically display the first 5 items by default and allow expansion to the full set as needed.\n\nQuery capabilities: The request body accepts pagination (page/size or cursor-based fields), optional free-text search against text, and sorting options (e.g., order_index asc by default, with tie-breaker on created_at). The response returns a paginated container including items and pagination metadata useful for load-more interactions.\n\nRelated operations: Use POST /communityPlatform/communityMember/communities to create the community, PUT /communityPlatform/communityMember/communities/{communityId} to edit its metadata, and DELETE /communityPlatform/communityMember/communities/{communityId} to remove it from public surfaces. Errors include not found (invalid communityId) and invalid pagination or sorting parameters.","parameters":[{"name":"communityId","description":"Identifier of the community whose rules are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filtering, and pagination parameters for retrieving community rules.","typeName":"ICommunityPlatformCommunityRule.IRequest"},"responseBody":{"description":"Paginated collection of rule items for the target community.","typeName":"IPageICommunityPlatformCommunityRule"},"authorizationType":null,"authorizationRole":null,"name":"index"},{"specification":"Retrieve a single community rule belonging to a specific community. Operates on the Prisma table community_platform_community_rules, which stores per-community ordered rule items with fields: id (UUID), community_platform_community_id (UUID FK to community_platform_communities), order_index (Int unique per community), text (String 1–200 chars), created_at, updated_at, and deleted_at (soft delete). The endpoint returns one rule identified by path parameters {communityId} and {ruleId}. Consumers should treat this as a read-only lookup suitable for rendering the Community Info + Rules box.","authorizationType":null,"description":"This operation returns the details of a single rule record from the community_platform_community_rules table. According to the schema comments, each rule is an ordered item authored by the community owner to set participation expectations, and includes a stable order_index per community to preserve deterministic ordering. The returned fields include the rule identifier, the parent community identifier, the display order, the rule text (1–200 chars), and the standard timestamps.\n\nSecurity and permissions: Reading public communities, posts, comments, and their metadata is open to everyone as per the product requirements. Therefore this read endpoint is public. Even though the underlying table contains ownership semantics (rules managed by the community owner), retrieval does not require authentication.\n\nDatabase relationships: The rule references community_platform_communities via community_platform_community_id (onDelete: Cascade). The client must specify both the parent communityId and the ruleId to scope the request to the correct parent entity. Providers should ensure that only active (deleted_at IS NULL) rules are returned.\n\nValidation and behavior: The provider should validate that the specified rule belongs to the specified community. If the record is missing or marked deleted (deleted_at not null), respond with a not-found outcome at the business layer. Related endpoints include POST /communityPlatform/communityMember/communities/{communityId}/rules for creation, PUT /communityPlatform/communityMember/communities/{communityId}/rules/{ruleId} for updates, and DELETE /communityPlatform/communityMember/communities/{communityId}/rules/{ruleId} for removal.","summary":"Get a single rule from community_platform_community_rules by community and rule identifiers","parameters":[{"name":"communityId","description":"Parent community’s ID (UUID) that owns the rule","schema":{"type":"string","format":"uuid"}},{"name":"ruleId","description":"Target rule’s ID (UUID) within the specified community","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed community rule information for rendering and management flows","typeName":"ICommunityPlatformCommunityRule"},"authorizationRole":null,"name":"at","path":"/communityPlatform/communities/{communityId}/rules/{ruleId}","method":"get"},{"specification":"Create a new community rule under a specific community. Operates on the Prisma table community_platform_community_rules. Required inputs map to fields: community_platform_community_id (from path {communityId}), order_index (Int, unique per community), and text (String 1–200). The service sets created_at/updated_at and id (UUID). Only the community owner is allowed to create rules.","authorizationType":null,"description":"This operation inserts a new ordered rule item into the community_platform_community_rules table for the community identified by {communityId}. The schema describes these records as an ordered list authored by the community owner, with order_index unique per community to ensure deterministic display order and text limited to short guidance (1–200 characters). The application should atomically persist the new item with proper timestamps.\n\nSecurity and permissions: According to the business rules, only the community owner may create or edit rules. The endpoint therefore requires an authenticated user with ownership over the target community; further authorization checks must be enforced in provider logic. While the endpoint requires authentication (role \"communityMember\"), only owners pass the ownership check.\n\nRelationships and constraints: The newly created rule references community_platform_communities via community_platform_community_id. Providers must ensure that the community exists, is not administratively disabled in a way that forbids settings edits, and that order_index is unique within that community. Input validation must enforce text length (1–200 characters) in accordance with the schema commentary and product constraints.\n\nRelated operations: Use GET /communityPlatform/communities/{communityId}/rules/{ruleId} to retrieve the created rule, PUT to modify an existing one, and DELETE to remove a rule when necessary.","summary":"Create a community rule (community_platform_community_rules) for the specified community","parameters":[{"name":"communityId","description":"Parent community’s ID (UUID) that will own the new rule","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Rule creation payload including order and text constraints","typeName":"ICommunityPlatformCommunityRule.ICreate"},"responseBody":{"description":"The newly created rule record with server-populated identifiers and timestamps","typeName":"ICommunityPlatformCommunityRule"},"authorizationRole":"communityMember","name":"create","path":"/communityPlatform/communityMember/communities/{communityId}/rules","method":"post"},{"specification":"Update an existing community rule under a specific community. Operates on the Prisma table community_platform_community_rules. Allowed updates typically include order_index and text, while preserving the parent association community_platform_community_id. The service updates updated_at and enforces order uniqueness per community and text length constraints. Only the community owner may update rules.","authorizationType":null,"description":"This operation modifies an existing rule in community_platform_community_rules scoped by the provided {communityId} and {ruleId}. The schema notes that each rule has an order_index (unique per community) and a short text field for display. Updates should ensure that the record remains associated with the same parent community and that constraints are respected.\n\nSecurity and permissions: Editing community rules is restricted to the community owner per the business rules. The endpoint requires an authenticated user (role \"communityMember\") with ownership verified in business logic. Non-owners attempting to edit must be denied with the standard message.\n\nValidation and behavior: Providers should validate that the rule exists, is active (deleted_at IS NULL), and belongs to the specified community. Validate that the new order_index remains unique within the community and that text remains within 1–200 characters. On success, updated_at should reflect the modification. If the rule is missing or already removed, return a not-found outcome at the business layer.\n\nRelated operations: See GET for retrieval, POST for creation, and DELETE for removal of rules.","summary":"Update a community rule in community_platform_community_rules","parameters":[{"name":"communityId","description":"Parent community’s ID (UUID) that owns the rule","schema":{"type":"string","format":"uuid"}},{"name":"ruleId","description":"Target rule’s ID (UUID) to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Rule update payload (e.g., text and/or order_index) subject to constraints","typeName":"ICommunityPlatformCommunityRule.IUpdate"},"responseBody":{"description":"The updated rule record after applying changes","typeName":"ICommunityPlatformCommunityRule"},"authorizationRole":"communityMember","name":"update","path":"/communityPlatform/communityMember/communities/{communityId}/rules/{ruleId}","method":"put"},{"specification":"Remove (logically) a community rule belonging to a specific community. Operates on the Prisma table community_platform_community_rules, which includes a deleted_at column for logical removal. This endpoint sets deleted_at (soft deletion) for the targeted row identified by {communityId}/{ruleId}. Only the community owner may remove rules. The operation returns no body.","authorizationType":null,"description":"This operation performs a logical removal of a rule from community_platform_community_rules by setting the deleted_at timestamp for the row identified by {communityId} and {ruleId}. The schema explicitly provides deleted_at as the soft deletion column; records with a non-null value are considered removed from active views and should be excluded from lists and detail retrievals.\n\nSecurity and permissions: Only the community owner is allowed to remove rules per the business requirements. The endpoint requires an authenticated user (role \"communityMember\"), with ownership verified in provider logic. Attempts by non-owners must be denied using the standard message.\n\nValidation and behavior: Providers should ensure the rule exists, belongs to the specified community, and is currently active (deleted_at IS NULL) before performing the logical removal. After removal, the rule should be excluded from feeds, search, and the Community Info + Rules box. If the rule is already removed or not found, respond with the appropriate not-found outcome at the business layer. Because this is a logical removal using deleted_at, the operation does not physically delete the record, preserving auditability.\n\nRelated operations: Use GET to retrieve existing rules, POST to create new rules, and PUT to edit rules before removal.","summary":"Logically remove a rule (set deleted_at) in community_platform_community_rules","parameters":[{"name":"communityId","description":"Parent community’s ID (UUID) that owns the rule","schema":{"type":"string","format":"uuid"}},{"name":"ruleId","description":"Target rule’s ID (UUID) to logically remove","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"communityMember","name":"erase","path":"/communityPlatform/communityMember/communities/{communityId}/rules/{ruleId}","method":"delete"},{"specification":"Search and paginate memberships of a specific community, operating on the community_platform_community_memberships table. The communityId path parameter identifies the parent community (community_platform_communities.id). The endpoint supports rich filtering (e.g., by member user, active vs. historical via deleted_at, created_at ranges), sorting, and pagination to power roster UIs and administrative views. Results should include only records that match the given community and, by default, exclude logically removed rows (deleted_at not null) unless explicitly requested.\n\nThis operation returns a paginated collection using a summary view DTO. It is intended for authenticated usage where detailed membership data may be sensitive; ownership and administrative checks are enforced in provider logic. Related entities include community_platform_users (member accounts) and community_platform_communities (the container).","authorizationType":null,"description":"Retrieve a filtered, sorted, and paginated list of membership rows from the community_platform_community_memberships junction table. Per the Prisma schema comments, this model captures the relationship between a user (community_platform_users.id) and a community (community_platform_communities.id) and is the source of truth for join/leave history. Columns include id, community_platform_community_id, community_platform_user_id, created_at, updated_at, and a deleted_at timestamp used to indicate that a membership has been ended (leave time). A unique composite index across (community_platform_community_id, community_platform_user_id) prevents duplicate active memberships.\n\nSecurity and permissions: Membership rosters can be sensitive. Although this route is authenticated (authorizationRoles: [\"communityMember\"]), detailed access should be constrained in the provider to community owners and platform administrators where appropriate. Non-owners may be limited to their own membership state or redacted views. Rate limiting and audit logging (community_platform_audit_logs) are recommended for administrative queries.\n\nEntity relationships and behavior: Memberships belong to a community (community_platform_communities) and a user (community_platform_users). The endpoint must filter by the communityId path parameter and should (by default) exclude rows where deleted_at is not null to return currently joined members. When historical queries are needed, the request body can include flags to include ended memberships and to filter by created_at/updated_at ranges. Sorting should support created_at and updated_at fields, and pagination should follow the platform’s standard page/limit or cursor conventions.\n\nValidation and error handling: Validate communityId as a UUID that references an existing, not-removed community. If the target community is disabled (disabled_at set), the provider may still allow owners/admins to view the roster but should prevent broader disclosure. Return 404 when the community does not exist, and 400 for invalid parameters. Responses should be stable and deterministic given the sort criteria, and must not include content tied to records with deleted_at when the default active-only filter applies.\n\nRelated operations: Use POST /communities/{communityId}/memberships to join (create) and DELETE /communities/{communityId}/memberships/{membershipId} to end an existing membership. These operations work against the same community_platform_community_memberships table while enforcing authorship/ownership rules from the requirements.","method":"patch","name":"index","parameters":[{"description":"Target community’s ID (community_platform_communities.id)","name":"communityId","schema":{"type":"string","format":"uuid"}}],"path":"/communityPlatform/communityMember/communities/{communityId}/memberships","requestBody":{"description":"Search, filter, sort, and pagination parameters for community memberships","typeName":"ICommunityPlatformCommunityMembership.IRequest"},"responseBody":{"description":"Paginated collection of membership summaries for the specified community","typeName":"IPageICommunityPlatformCommunityMembership.ISummary"},"summary":"List memberships for a community from community_platform_community_memberships with filtering and pagination","authorizationRole":"communityMember"},{"specification":"Create (or reactivate) a membership for the authenticated user in the specified community. This operation writes to the community_platform_community_memberships table. The communityId path parameter identifies the parent community (community_platform_communities.id). The provider should enforce the unique composite constraint (community_platform_community_id, community_platform_user_id) to prevent duplicate active memberships and may reactivate an ended membership by clearing deleted_at.\n\nOn success, the created (or reactivated) membership entity is returned. The server infers the actor from the authenticated session and does not require user ID in the body.","authorizationType":null,"description":"Join the target community by creating a new row in community_platform_community_memberships. Per the Prisma schema, memberships record the association between a user and a community and include timestamps created_at and updated_at, with deleted_at indicating an ended membership. The unique composite key on (community_platform_community_id, community_platform_user_id) prevents multiple active memberships.\n\nSecurity and permissions: This action requires authentication and should only allow the authenticated user to create their own membership. Joining confers no moderation privileges; it solely affects personalization and feed inclusion consistent with the product rules. Provider logic should also update community last_active_at (community_platform_communities.last_active_at) where appropriate and may record an audit event in community_platform_audit_logs (e.g., event_type = \"join_community\").\n\nValidation: Validate communityId as a UUID referencing an existing, joinable community (e.g., not administratively disabled via disabled_at where policy forbids new joins). If a membership already exists and is active, implementations should behave idempotently (return the existing membership) or return a conflict depending on policy. If a prior membership exists with deleted_at set, reactivation by clearing deleted_at and updating updated_at can be applied per business rules.\n\nRelated operations: Use PATCH /communities/{communityId}/memberships for roster queries and DELETE /communities/{communityId}/memberships/{membershipId} to end a membership. These operations operate on the same community_platform_community_memberships table.","method":"post","name":"create","parameters":[{"description":"Target community’s ID (community_platform_communities.id)","name":"communityId","schema":{"type":"string","format":"uuid"}}],"path":"/communityPlatform/communityMember/communities/{communityId}/memberships","requestBody":{"description":"Creation payload; the server infers the acting user from the authenticated session. No additional fields required beyond path parameter.","typeName":"ICommunityPlatformCommunityMembership.ICreate"},"responseBody":{"description":"The created (or reactivated) membership entity","typeName":"ICommunityPlatformCommunityMembership"},"summary":"Join a community by creating a row in community_platform_community_memberships","authorizationRole":"communityMember"},{"specification":"End a membership for the authenticated user (or by authorized owner/admin) in the specified community. This operation targets the community_platform_community_memberships table. Rather than removing the row, provider logic should set the deleted_at timestamp to indicate the membership has ended, preserving history for analytics and audit. The communityId and membershipId path parameters must refer to a membership that belongs to that community.\n\nNo response body is returned on success.","authorizationType":null,"description":"Remove a user’s membership by marking it ended in the community_platform_community_memberships table. The schema defines deleted_at to capture the leave time, allowing the record to remain available for historical reporting. The membership row includes community_platform_community_id, community_platform_user_id, created_at, updated_at, and deleted_at. This operation must ensure that the membershipId corresponds to the community specified by communityId and that the actor is permitted to end this membership (either the member themself or an authorized community owner/administrator per business rules).\n\nSecurity and permissions: Authentication is required. Authorization checks should confirm that the requester is the membership owner or has sufficient privileges (e.g., community owner or system administrator) to remove another user’s membership. Providers should consider emitting an audit entry in community_platform_audit_logs (event_type like \"leave_community\" or a policy action for administrative removals) and may refresh community last_active_at on change.\n\nValidation and behavior: Validate both communityId and membershipId as UUIDs. If the membership is already ended (deleted_at set), the operation should be idempotent. If membershipId does not belong to the communityId, return 404. If the community is administratively disabled (disabled_at), policy may still permit owners/admins to end memberships. On successful completion, return a 204 No Content with no response body.","method":"delete","name":"erase","parameters":[{"description":"Target community’s ID (community_platform_communities.id)","name":"communityId","schema":{"type":"string","format":"uuid"}},{"description":"Membership row ID (community_platform_community_memberships.id) to end","name":"membershipId","schema":{"type":"string","format":"uuid"}}],"path":"/communityPlatform/communityMember/communities/{communityId}/memberships/{membershipId}","requestBody":null,"responseBody":null,"summary":"End a community membership in community_platform_community_memberships (logical removal via deleted_at)","authorizationRole":"communityMember"},{"specification":"Search and paginate posts within a specific community using the community_platform_posts table. The communityId path parameter identifies the parent community (community_platform_communities.id). This endpoint supports filters (e.g., by author, created_at ranges), full-text search (title/body), sorting (Newest, Top per business rules), and pagination. Results exclude records with deleted_at populated by default.\n\nThis operation returns a paginated collection optimized for feed/list UIs and aligns with deterministic sorting and tie-breaker requirements described in the product documents.","authorizationType":null,"description":"Retrieve a filtered, sorted, and paginated list of posts from the community_platform_posts table for a given community. The Prisma schema defines key columns: id, community_platform_community_id (parent community), author_user_id (nullable to support account closure/anonymization), title (5–120 chars business rule), body (10–10,000 chars business rule, plain text), optional author_display_name (0–32 chars), created_at/updated_at, and a deleted_at timestamp for logical removal from public view. Relationships include references to community_platform_communities (container), community_platform_users (author), community_platform_post_votes (for score), and community_platform_comments (for comment counts).\n\nSorting and search: Implement canonical sorts per requirements—Newest orders by created_at descending with tie-breakers by larger identifier; Top orders by higher score first (derived from community_platform_post_votes, where state indicates up/down), then more recent created_at, then larger identifier. Title/body matching leverages the schema’s trigram indexes on title and body. Pagination returns 20 items per page by default, with deterministic order and no duplicates across pages.\n\nSecurity and visibility: Reading posts is public per platform rules, but the provider must exclude posts where deleted_at is set and should suppress content from communities that are administratively disabled (disabled_at) on promotion surfaces. The author_user_id being nullable requires display fallbacks (e.g., anonymous attribution) based on business logic; this listing returns summary fields suitable for feed cards.\n\nValidation and errors: Validate communityId as a UUID referencing an existing community. Return 404 for non-existent communities and 400 for invalid parameters. The request body controls filters, sort selection (Newest | Top), and pagination cursors/limits.\n\nRelated operations: Creation, update, and deletion of posts are separate endpoints. This operation focuses solely on complex retrieval tailored to community feeds, built on community_platform_posts and its related vote/comment aggregates.","method":"patch","name":"index","parameters":[{"description":"Target community’s ID (community_platform_communities.id)","name":"communityId","schema":{"type":"string","format":"uuid"}}],"path":"/communityPlatform/communities/{communityId}/posts","requestBody":{"description":"Filter, search, sort (Newest | Top), and pagination parameters for community posts","typeName":"ICommunityPlatformPost.IRequest"},"responseBody":{"description":"Paginated list of post summaries within the specified community","typeName":"IPageICommunityPlatformPost.ISummary"},"summary":"Search and list posts for a community from community_platform_posts with sorting and pagination","authorizationRole":null},{"specification":"Create a new text-only post within a specific community. Operates on the community_platform_posts table as the primary entity, linking to community_platform_communities (target community via communityId path parameter) and community_platform_users (author via the authenticated user). The request supplies title, body, and optional author_display_name; business constraints (title 5–120 chars, body 10–10,000 chars, plain text only; author_display_name 0–32 chars) are enforced at the application layer as documented in the Prisma schema comments. The server associates the created record to the community indicated by the path parameter and sets created_at/updated_at timestamps. The response returns the fully created post record.","authorizationType":null,"description":"Create a new post under a specified community. According to the Prisma schema for community_platform_posts, each post belongs to exactly one community (community_platform_community_id) and is authored by a user (author_user_id), with required fields title and body, and an optional author_display_name. The schema describes business constraints at the application layer: title length 5–120 characters and body length 10–10,000 characters as plain text with line breaks only; author display name is optional (0–32 characters) and presentation-only. This API uses the communityId path parameter to resolve the target community (community_platform_communities).\n\nSecurity and permissions: Only authenticated users may create posts. Ownership semantics from the requirements apply: the authenticated user becomes the author of the post and later may edit or delete their own content, while non-authors are denied such actions. Administrative policy actions are separate and recorded elsewhere. Reading is public and unaffected by this creation endpoint.\n\nDatabase relations and lifecycle: The new community_platform_posts record references community_platform_communities (via the path communityId) and community_platform_users (author). Timestamps created_at and updated_at are set on creation. Validation rules from the PRD apply: title/body length limits, plain text only for body, and selection of exactly one target community. Any community identifier in the body, if present, is ignored in favor of the path parameter. The created entity is returned in full detail for client confirmation.\n\nRelated operations: Use GET /communityPlatform/posts/{postId} to retrieve an individual post. Use PATCH /communityPlatform/posts for listing/searching with pagination and sorting (Newest or Top).","summary":"Create a post (community_platform_posts) within a specific community","parameters":[{"name":"communityId","description":"Target community’s ID (UUID) where the post will be created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation payload for a community-scoped post (title, body, optional author display name)","typeName":"ICommunityPlatformPost.ICreate"},"responseBody":{"description":"Created post with full details from community_platform_posts","typeName":"ICommunityPlatformPost"},"authorizationRole":"communityMember","name":"create","path":"/communityPlatform/communityMember/communities/{communityId}/posts","method":"post"},{"specification":"Retrieve a paginated, filtered, and sorted list of posts from the community_platform_posts table. Supports text matching across title and body (as suggested by Prisma trigram indexes), optional filtering by community, and canonical sorting rules: Newest (created_at desc; tie by larger identifier) and Top (score desc computed from votes; ties by newer created_at, then by larger identifier). The request body uses ICommunityPlatformPost.IRequest to carry pagination (cursor/page/limit), search query, filters, and sort options. The response is a paginated page container of post summaries.","authorizationType":null,"description":"Return a filtered, paginated list of posts using the community_platform_posts entity as the primary source. The Prisma schema includes trigram indexes on title and body to support efficient text matching. Business constraints from the requirements define the search and sorting behavior: queries match words in titles and bodies; sorting supports Newest (order by created_at descending; if equal, larger identifier first) and Top (order by score derived from community_platform_post_votes as up−down; ties by more recent created_at, then by larger identifier). Items not publicly accessible (records with non-null deleted_at) are excluded from results.\n\nSecurity and access: Reading posts is allowed for all users, including guests. This endpoint is public and does not require authentication. Sensitive author information is not exposed beyond what is stored for presentation (e.g., author_display_name). Ownership rules do not limit read access.\n\nData model and relationships: Each post belongs to one community (community_platform_communities) and optionally references an author (community_platform_users, nullable to support anonymization). Votes are stored in community_platform_post_votes and may be aggregated for Top sorting. The request body (ICommunityPlatformPost.IRequest) should include pagination controls, optional community filter, search query (length ≥ 2 characters to execute), and sort selector. The response returns a paginated page of post summaries suitable for feeds and result lists.\n\nRelated endpoints: Use GET /communityPlatform/posts/{postId} to retrieve a specific post. Use POST /communityPlatform/communityMember/posts or POST /communityPlatform/communityMember/communities/{communityId}/posts for creation flows.","summary":"List/search posts (community_platform_posts) with pagination and sorting","parameters":[],"requestBody":{"description":"Search, filter, sort, and pagination parameters for posts","typeName":"ICommunityPlatformPost.IRequest"},"responseBody":{"description":"Paginated page of post summaries that match the criteria","typeName":"IPageICommunityPlatformPost.ISummary"},"authorizationRole":null,"name":"index","path":"/communityPlatform/posts","method":"patch"},{"specification":"Fetch a single post by its identifier from community_platform_posts, returning full details. This endpoint reads a single active post (deleted_at is null) and includes fields such as title, body, author_display_name, community reference, and timestamps. It is intended for public read access of a post detail page.","authorizationType":null,"description":"Retrieve a single post resource from community_platform_posts by its ID. According to the Prisma schema, posts have required title and body, optional author_display_name, belong to a community (community_platform_community_id), and may have a nullable author_user_id (to support anonymization). The operation returns full details for display in post detail screens.\n\nSecurity and permissions: This is a public read operation; no authentication is required. Records that are not publicly accessible (e.g., where deleted_at is set) are not returned. Ownership constraints do not affect reads here, but apply to updates/deletes via separate endpoints.\n\nData relationships and behavior: The post references community_platform_communities and community_platform_users (author). Voting and comments are separate entities and not directly altered by this read. For Global Latest sidebar behavior or aggregated counters, clients may rely on separate materialized views or related endpoints as needed.\n\nRelated endpoints: Use PATCH /communityPlatform/posts for listing/searching posts with pagination. Use POST /communityPlatform/communityMember/posts or POST /communityPlatform/communityMember/communities/{communityId}/posts for creation flows.","summary":"Get a single post (community_platform_posts) by ID","parameters":[{"name":"postId","description":"Unique identifier of the target post (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full post details from community_platform_posts","typeName":"ICommunityPlatformPost"},"authorizationRole":null,"name":"at","path":"/communityPlatform/posts/{postId}","method":"get"},{"specification":"Create a new text-only post using the global composer, where the target community is provided in the request body. Operates on community_platform_posts as the primary table, referencing community_platform_communities (target community) and community_platform_users (author). Business constraints from schema comments apply: title 5–120 characters, body 10–10,000 characters (plain text), optional author_display_name 0–32 characters. Returns the created post.","authorizationType":null,"description":"Create a post via the global composer. Per the community_platform_posts schema, a post requires exactly one target community (community_platform_community_id), a title, and a body, plus optional author_display_name. This endpoint expects the community identifier in the request body (ICommunityPlatformPost.ICreate) and attributes authorship to the authenticated user. Creation timestamps are set accordingly and the new entity is returned in full detail.\n\nSecurity and permissions: Only authenticated users can create posts. Ownership is assigned to the creating user, who can later edit/delete their own post via separate endpoints; non-authors are denied such actions. Guests attempting to create should be prompted to sign in and the action can resume upon successful login as per business requirements.\n\nValidation and behavior: Enforce title/body length limits, ensure plain-text body, and require a valid community reference. If the target community cannot be found or is not allowed for posting (e.g., administratively disabled), the server should reject the request according to business rules. On success, the created record is returned to the client.\n\nRelated operations: Use GET /communityPlatform/posts/{postId} to fetch the created post later. Use PATCH /communityPlatform/posts for search/list and POST /communityPlatform/communityMember/communities/{communityId}/posts for community-scoped creation.","summary":"Create a post (community_platform_posts) via global composer","parameters":[],"requestBody":{"description":"Creation payload for a globally-composed post, including target community","typeName":"ICommunityPlatformPost.ICreate"},"responseBody":{"description":"Created post with full details from community_platform_posts","typeName":"ICommunityPlatformPost"},"authorizationRole":"communityMember","name":"create","path":"/communityPlatform/communityMember/posts","method":"post"},{"specification":"Update a single post in the community platform. This operation targets the community_platform_posts table and allows the author to modify the post’s mutable fields: title, body, and author_display_name. The community (community_platform_community_id) and author_user_id are immutable via this endpoint. Business validation must enforce title 5–120 chars, body 10–10,000 chars (plain text with line breaks only), and author_display_name 0–32 chars. On success, return the updated post resource. Providers may also create an audit snapshot in community_platform_post_snapshots for versioning, but snapshots are system-generated and have no write API.","description":"Modify a post identified by its UUID, constrained by the business rules defined for Posts. The underlying table is community_platform_posts, which stores title, body, optional author_display_name, created_at, updated_at, and deleted_at among other relations. Only the author is allowed to edit per product rules; attempts by non-authors MUST be rejected with the message: \"You can edit or delete only items you authored.\". Application logic should set updated_at accordingly and, if implemented, append a snapshot into community_platform_post_snapshots capturing the previous state (title, body, author_display_name) for audit history as suggested by that table’s description.\n\nSecurity and permissions: Authenticated users (role: communityMember) may edit only posts they authored (community_platform_posts.author_user_id equals the requester’s user id). Administrative takedowns are separate policy actions and out of scope for this endpoint. Ownership checks occur in business logic; this documentation focuses on the API contract.\n\nValidation and business logic: Title must be 5–120 characters; body must be 10–10,000 characters and remain plain text (no scripts/executable code); author_display_name, when provided, must be 0–32 characters. The community reference (community_platform_community_id) and author_user_id are not changeable here. The response returns the full post entity so clients can immediately reflect changes in feeds and details. Error handling follows standard messages in the requirements: invalid inputs should be reported with clear messages (e.g., \"Title must be 5–120 characters.\").\n\nRelations and consistency: The post belongs to a community via community_platform_community_id and optionally references an author via author_user_id (nullable for anonymization scenarios). This endpoint does not alter votes (community_platform_post_votes) or comments (community_platform_comments); those are managed by dedicated endpoints. On success, updated_at should reflect the edit time to support sorting and auditing.","summary":"Update an existing post (community_platform_posts) by ID","parameters":[{"name":"postId","description":"Unique identifier (UUID) of the post to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Mutable post fields to update (title, body, author_display_name)","typeName":"ICommunityPlatformPost.IUpdate"},"responseBody":{"description":"The updated post","typeName":"ICommunityPlatformPost"},"authorizationType":null,"authorizationRole":"communityMember","name":"update","path":"/communityPlatform/communityMember/posts/{postId}","method":"put","authorizationRoles":["communityMember"]},{"specification":"Remove a post from active public access by marking its deletion timestamp in the community_platform_posts table. Because the model includes a deleted_at field, this operation should set deleted_at (and update related visibility in queries) rather than physically removing the row. Downstream content such as community_platform_comments and community_platform_post_votes must no longer be surfaced for the deleted post. Only the author (or policy actions by administrators handled elsewhere) may perform this removal.","description":"Remove a post from active use by marking its deleted_at timestamp in community_platform_posts. The model’s description indicates deleted_at is used to indicate that a record is considered removed from active views. Once marked, the post must be excluded from feeds, search, and the Global Latest materialized view (mv_community_platform_global_latest_posts) on its next refresh.\n\nSecurity and permissions: Only the author of the post may perform this operation in normal flows. If a non-author attempts this action, deny with: \"You can edit or delete only items you authored.\". Administrative removals (policy takedown) are tracked separately in community_platform_admin_actions and are not part of this endpoint’s contract.\n\nBehavior and consistency: Setting deleted_at for the post ensures it will no longer appear in queries. Related comments (community_platform_comments) and votes (community_platform_post_votes) should be ignored by read paths for the deleted post. Implementations may also log to community_platform_audit_logs. This endpoint does not accept a request body and does not return a response body.","summary":"Remove a post from active access by setting deleted_at in community_platform_posts","parameters":[{"name":"postId","description":"Unique identifier (UUID) of the post to remove from active access","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"communityMember","name":"erase","path":"/communityPlatform/communityMember/posts/{postId}","method":"delete","authorizationRoles":["communityMember"]},{"specification":"Set or change the current user’s vote on a post. This operation manages a single upserted record in the community_platform_post_votes table keyed by (community_platform_post_id, community_platform_user_id). The request updates the state field to one of the canonical values (\"up\" or \"down\"), aligning with schema comments that recommend lower-case values. The absence of a record represents \"None\"; use the DELETE /posts/{postId}/votes endpoint to clear a vote. Deny voting on one’s own post per business rules.","description":"Create or update the authenticated user’s vote for a specific post in community_platform_post_votes. The model defines a unique constraint over (community_platform_post_id, community_platform_user_id) ensuring one vote per user per post, with a state column representing the current vote. Schema guidance recommends lower-case values for parity with comment votes: \"up\" for upvote and \"down\" for downvote. The vote record also tracks created_at, updated_at, and an optional deleted_at for retention policies.\n\nSecurity and permissions: Only authenticated users (role: communityMember) may vote, and users cannot vote on their own posts. If a user attempts to vote on their own content, reject with: \"You can’t vote on your own posts/comments.\". This endpoint sets the vote state to the requested value. To revert to no vote (None), clients should call DELETE /posts/{postId}/votes, which removes the record from active consideration.\n\nBusiness logic and score: Post score is computed as (number of \"up\") − (number of \"down\") across active votes. The post entity itself does not persist a score; instead, consumers compute it or consult denormalized views such as mv_community_platform_global_latest_posts, which may lag real time. This endpoint does not modify post content or comments.\n\nError handling and validation: Validate state ∈ {\"up\",\"down\"}. The target post must exist and not be marked deleted_at. Ownership checks and join membership are not required for voting; membership does not grant moderation rights per product rules.","summary":"Upsert the current user’s vote (community_platform_post_votes) to \"up\" or \"down\" for a post","parameters":[{"name":"postId","description":"Unique identifier (UUID) of the post to vote on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Desired vote state for the current user on the target post (\"up\" | \"down\")","typeName":"ICommunityPlatformPostVote.IUpdate"},"responseBody":{"description":"The saved vote record for the current user and post","typeName":"ICommunityPlatformPostVote"},"authorizationType":null,"authorizationRole":"communityMember","name":"update","path":"/communityPlatform/communityMember/posts/{postId}/votes","method":"put","authorizationRoles":["communityMember"]},{"specification":"Clear the current user’s vote on a post by removing the active record from consideration in community_platform_post_votes. Because the model includes a deleted_at field and defines that absence represents the \"None\" state, implementations should either delete the row or set its deleted_at to mark it inactive. After success, no response body is returned.","description":"Remove the authenticated user’s vote on the specified post so that their state becomes \"None\". The underlying community_platform_post_votes table enforces one record per (post, user) with a state string and timestamps (created_at, updated_at, deleted_at). Clearing the vote should result in no active vote record for this (post, user) pair. Read paths must exclude votes where deleted_at is set.\n\nSecurity and permissions: Only authenticated users may clear their own votes; attempting to clear a vote on a non-existent post should return a not-found error. Users cannot meaningfully \"clear\" a vote on their own post if no vote exists; in all cases, the outcome should be that no active vote remains for this (post, user) pair.\n\nNotes on scoring and views: Removing a vote changes the effective score (upvotes − downvotes) and will be reflected in subsequent queries or materialized views (mv_community_platform_global_latest_posts) after their refresh cycle. This endpoint does not alter the post resource or comments and returns no response body.","summary":"Remove the current user’s active vote from community_platform_post_votes","parameters":[{"name":"postId","description":"Unique identifier (UUID) of the post whose vote will be cleared","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"communityMember","name":"erase","path":"/communityPlatform/communityMember/posts/{postId}/votes","method":"delete","authorizationRoles":["communityMember"]},{"specification":"List and search comments for a specific post using advanced filtering and pagination. This operation targets the community_platform_comments table. It returns comments belonging to the post identified by postId, optionally filtered by parent thread (top-level only or replies of a specific parent), ordered primarily by created_at (Newest). Business defaults follow PRD: 20 items per page for comments. It excludes records where deleted_at is not null. Relationships: each comment references a post (community_platform_post_id) and an author (community_platform_user_id).","description":"Retrieve a paginated list of comments for a given post from the community_platform_comments model. The schema defines key fields including id, community_platform_post_id (required, relates to community_platform_posts), community_platform_user_id (author), optional parent_id for nesting, content (plain text), created_at/updated_at timestamps, and a deleted_at column used to mark removed comments. This operation focuses on reading comments under a single post, with optional filtering to fetch only top-level comments (parent_id = null) or only replies to a particular parent comment.\n\nSecurity and permissions: reading public comments is open to everyone. No authentication is required. Author-guard rules affect edit/delete operations but not this read operation. Comments marked removed (deleted_at not null) must not appear in normal results.\n\nRelationships and query constraints: the provided postId must match community_platform_comments.community_platform_post_id. If a parentId filter is provided in the request body, it must reference a comment belonging to the same post. Sorting follows business rules for comments: Newest (created_at descending, tie-break by larger identifier when timestamps match). Pagination returns 20 per page by default, with page and pageSize controls and opaque cursor support if the implementation chooses to offer it.\n\nValidation and error behavior: if postId is not a valid UUID, the request is rejected. If parentId is provided but does not belong to the same post, return a validation error. When page parameters are out of bounds or malformed, return a 400 with an explanatory message. This operation pairs with GET /comments/{commentId} for detail and POST /posts/{postId}/comments for creation.","summary":"List/search comments for a post from community_platform_comments","parameters":[{"name":"postId","description":"Target post’s ID to list comments for","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters for listing comments under a post (filters like parentId, top-level only, sort, pagination)","typeName":"ICommunityPlatformComment.IRequest"},"responseBody":{"description":"Paginated list of comments for the specified post","typeName":"IPageICommunityPlatformComment"},"authorizationType":null,"authorizationRole":null,"name":"index","path":"/communityPlatform/posts/{postId}/comments","method":"patch"},{"specification":"Create a new comment under a specific post. This operation inserts into the community_platform_comments table. Required inputs include the comment content (2–2,000 chars) and the author is the authenticated user (community_platform_user_id). Optional parent_id allows creating a reply to another comment, enabling nested threads. The post is identified by path parameter postId (stored as community_platform_post_id).","description":"This operation creates a new comment in the community_platform_comments model for the post identified by postId. The model includes fields id (UUID), community_platform_post_id (required), community_platform_user_id (author), optional parent_id for reply threading, content (plain text 2–2,000 chars), created_at/updated_at timestamps, and a deleted_at column used to hide removed comments. The author is the authenticated account; the author display label is handled elsewhere via user profile if needed.\n\nSecurity: creation of comments requires an authenticated role. Use the communityMember role for normal users. The API will reject unauthenticated requests. Ownership and author guards apply to subsequent edit/delete operations (not part of this endpoint).\n\nRelationships and validation: the postId path parameter sets community_platform_post_id. If a parentId is provided, it must reference an existing comment belonging to the same post; otherwise, validation fails. The content must be plain text and within the allowed length range. The operation returns the created comment entity.\n\nError handling: invalid UUIDs for postId or parentId, missing/too-short content, or cross-post parent references result in 400 validation errors. Attempts by unauthenticated callers result in 401/403 based on policy.","summary":"Create a comment in community_platform_comments for a specific post","parameters":[{"name":"postId","description":"Target post’s ID where the comment will be created","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Comment creation payload including content and optional parentId","typeName":"ICommunityPlatformComment.ICreate"},"responseBody":{"description":"The newly created comment","typeName":"ICommunityPlatformComment"},"authorizationType":null,"authorizationRole":"communityMember","name":"create","path":"/communityPlatform/communityMember/posts/{postId}/comments","method":"post"},{"specification":"Global search and list for comments across the platform with pagination and sorting. Operates on the community_platform_comments table and supports filtering by postId, author userId, parentId, creation time ranges, and text search on content. Default sort for comments is Newest. Excludes records where deleted_at is not null.","description":"Retrieve a paginated, filterable list of comments from community_platform_comments across all posts. The schema describes id, community_platform_post_id, community_platform_user_id, optional parent_id for nesting, content (plain text), created_at/updated_at, and a deleted_at column for removed comments. This operation supports business search rules: minimum query length for text search (if implemented) and deterministic Newest ordering with tie-breaks.\n\nSecurity and permissions: this is a public read endpoint; authentication is not required. Sensitive author-only operations are out of scope for this endpoint. Records marked removed (deleted_at not null) are not returned.\n\nFiltering, sorting, and pagination: clients may filter by post, author, parent (top-level only vs replies), and created_at ranges. Text search can match content with trigram/FTS where available. Sorting is Newest (created_at descending; tie-break by larger identifier when needed). Pagination returns 20 per page by default with page/pageSize and optional cursor support.\n\nError handling: malformed filters (e.g., invalid UUIDs), out-of-range pagination parameters, or too-short search queries yield validation errors with explanatory messages. Related operations include GET /comments/{commentId} for detail and POST /posts/{postId}/comments for creation within a post.","summary":"Search and paginate comments from community_platform_comments","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for comments","typeName":"ICommunityPlatformComment.IRequest"},"responseBody":{"description":"Paginated comments matching the search criteria","typeName":"IPageICommunityPlatformComment"},"authorizationType":null,"authorizationRole":null,"name":"index","path":"/communityPlatform/comments","method":"patch"},{"specification":"Fetch a single comment by its identifier. Reads from the community_platform_comments table and returns the full comment entity if found and not removed (deleted_at is null). Includes relational context (post and author IDs).","description":"Return a single comment from community_platform_comments identified by commentId. The model contains id, community_platform_post_id (the container post), community_platform_user_id (author), optional parent_id for nested threads, content, created_at/updated_at timestamps, and a deleted_at column. The endpoint exposes the comment only if it is not removed (deleted_at is null).\n\nSecurity: public read access; no authentication required. Ownership and moderation policies impact editing/removal but not this retrieval.\n\nValidation and errors: commentId must be a valid UUID. If the comment does not exist or is marked as removed, return a 404. This operation complements PATCH /comments for list/search and PATCH/POST under /posts/{postId}/comments.","summary":"Get a single comment from community_platform_comments by ID","parameters":[{"name":"commentId","description":"Identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The requested comment","typeName":"ICommunityPlatformComment"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/communityPlatform/comments/{commentId}","method":"get"},{"specification":"Update a specific comment record in the community platform. This operation targets the community_platform_comments table and allows the authenticated author to modify the comment's editable fields. According to the schema, comments have fields including id (UUID), community_platform_post_id (UUID), community_platform_user_id (UUID), optional parent_id (UUID) for threading, content (plain text), created_at, updated_at, and deleted_at (nullable). The primary purpose is to let the owner edit the content while preserving authorship and timestamps. The request body follows ICommunityPlatformComment.IUpdate and the response returns the updated ICommunityPlatformComment entity.","description":"Edit an existing comment identified by commentId in the community_platform_comments table. The underlying Prisma model defines key columns such as content (plain text, business rule 2–2,000 characters), community_platform_user_id (author), community_platform_post_id (container post), optional parent_id for nested replies, and lifecycle timestamps (created_at, updated_at, deleted_at). The API updates mutable fields (typically content) and sets updated_at, maintaining the integrity of authorship and thread structure.\n\nSecurity and permissions follow the product rules: only the author of a comment may edit it. Attempts by non-authors must be denied with the standard message, and unauthenticated users must be required to sign in prior to state-changing actions. The operation requires an authenticated session (role \"communityMember\") with ownership verified in business logic.\n\nThe operation works in the context of related entities: comments belong to posts (community_platform_posts) and may reference a parent comment via parent_id for nested threading. Business validation must ensure the target comment exists and is not already marked removed via deleted_at. Content length constraints (2–2,000) and plain-text expectations are enforced at the application level per the model commentary.\n\nRelated operations include creating a reply under a comment and listing replies. Error handling should provide clear responses when the comment is not found, when the actor lacks ownership, or when validation fails. Updated entities are returned as ICommunityPlatformComment for client reconciliation and optimistic UI confirmation.","summary":"Update a comment (community_platform_comments) by ID","parameters":[{"name":"commentId","description":"Target comment's ID (UUID) to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Editable fields of the comment to update (e.g., content)","typeName":"ICommunityPlatformComment.IUpdate"},"responseBody":{"description":"Updated comment entity after applying changes","typeName":"ICommunityPlatformComment"},"authorizationType":null,"authorizationRole":"communityMember","name":"update","path":"/communityPlatform/communityMember/comments/{commentId}","method":"put"},{"specification":"Remove a specific comment record identified by commentId from active views by setting the deleted_at timestamp on the community_platform_comments table. The endpoint performs a non-destructive removal consistent with the model's deleted_at column. No response body is returned on success. Business logic must also adjust any derived counters asynchronously if applicable.","description":"Delete a comment by its identifier in the community_platform_comments table by marking it removed via the deleted_at timestamp. The Prisma model explicitly includes deleted_at (nullable) for comments, which indicates records can be marked as removed from public view without erasing historical data. The operation should ensure the comment exists, is not already removed, and that the actor is the author (or otherwise authorized) before proceeding.\n\nSecurity and permissions require that only the comment author can delete their own comment under normal operations. Unauthenticated requests must be blocked and prompted to sign in. Administrative removals, if implemented elsewhere, are outside the scope of this endpoint and should be captured in separate policy functions and audit trails.\n\nThe comment is linked to a post (community_platform_posts) and may have a parent comment via parent_id for nesting. When marking the comment as removed, application logic should update updated_at accordingly and ensure reply-thread integrity for remaining comments. Errors include missing or already-removed comments and permission denials. On success, no response body is returned, and clients should reconcile their view accordingly.","summary":"Delete a comment (community_platform_comments) by ID by setting deleted_at","parameters":[{"name":"commentId","description":"Target comment's ID (UUID) to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"communityMember","name":"erase","path":"/communityPlatform/communityMember/comments/{commentId}","method":"delete"},{"specification":"Retrieve a paginated, optionally sorted list of replies (child comments) under a parent comment from the community_platform_comments table. This collection endpoint returns comments whose parent_id equals the given commentId, supporting pagination and sorting (e.g., Newest). It uses ICommunityPlatformComment.IRequest for query parameters and returns a paginated IPageICommunityPlatformComment response.","description":"List replies for a parent comment using the community_platform_comments table. Each reply record contains fields such as id, community_platform_post_id, community_platform_user_id, parent_id (set to the parent comment’s id), content (plain text), created_at, updated_at, and deleted_at. Only active (deleted_at is null) child comments should be returned. This endpoint focuses on nested threading, returning direct children where parent_id matches the path parameter.\n\nThis operation is public (no authentication required) because reading comments is open per product rules. It supports pagination and sorting, typically Newest first (by created_at descending with tie-breaking by identifier) and may also support Top depending on business needs. The request body ICommunityPlatformComment.IRequest captures paging, sorting, and any query fields; the response is a paginated list for client-side load-more flows.\n\nBusiness logic must validate the existence of the parent comment and exclude removed entries (deleted_at not null). Errors include invalid identifiers or referencing a non-existent parent. Related operations include creating a reply and updating/deleting comments, which modify this list over time. This list endpoint is commonly used together with post detail views and comment threads.","summary":"List replies (community_platform_comments) under a parent comment with pagination","parameters":[{"name":"commentId","description":"Parent comment's ID (UUID) whose replies are being listed","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filtering, sorting, and pagination parameters for replies","typeName":"ICommunityPlatformComment.IRequest"},"responseBody":{"description":"Paginated collection of reply comments","typeName":"IPageICommunityPlatformComment"},"authorizationType":null,"authorizationRole":null,"name":"index","path":"/communityPlatform/comments/{commentId}/replies","method":"patch"},{"specification":"Create a reply (child comment) under an existing parent comment within the community_platform_comments table. The new comment will reference the same post as its parent (community_platform_post_id) and set parent_id to the provided commentId. The request body follows ICommunityPlatformComment.ICreate and the response returns the created ICommunityPlatformComment entity.","description":"Create a new reply to a comment by inserting into the community_platform_comments table. The model defines required fields including community_platform_post_id, community_platform_user_id (author), content (2–2,000 characters, plain text), and lifecycle timestamps (created_at, updated_at), with optional parent_id to enable nesting. For a reply, parent_id must be set to the commentId from the path, and community_platform_post_id should match the parent comment’s post to preserve thread integrity.\n\nThis operation requires authentication (role \"communityMember\") and enforces authorship rules. It must validate that the parent comment exists and is not marked removed via deleted_at, and that the content meets length constraints defined in the schema comments. Upon success, the API returns the newly created comment as ICommunityPlatformComment so the client can update the thread optimistically and reconcile with authoritative state.\n\nRelated operations include listing replies for pagination and visibility, and subsequent edit/delete actions by the reply’s author. Error handling includes invalid parent references, content validation failures, or permission issues for unauthenticated actors.","summary":"Create a reply comment (community_platform_comments) under a parent comment","parameters":[{"name":"commentId","description":"Parent comment's ID (UUID) to reply to","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required to create a reply comment (content and metadata)","typeName":"ICommunityPlatformComment.ICreate"},"responseBody":{"description":"Newly created reply comment entity","typeName":"ICommunityPlatformComment"},"authorizationType":null,"authorizationRole":"communityMember","name":"create","path":"/communityPlatform/communityMember/comments/{commentId}/replies","method":"post"},{"specification":"Update (create or change) the authenticated communityMember’s vote on a specific comment. This operates on the community_platform_comment_votes table, which stores one vote record per (comment, user) with the state column indicating the current vote (expected values at the application level: \"Upvote\" or \"Downvote\"; the \"None\" state is represented by absence of an active record or a record with a deletion timestamp). The endpoint takes the target comment’s identifier as a path parameter and the desired vote state in the request body. It must enforce the voting state machine defined by business rules and ensure idempotency so repeated submissions of the same end state have no duplicate effects.","authorizationType":null,"description":"This operation updates the per-user voting state on a comment, referencing the community_platform_comment_votes table. According to the Prisma schema, each vote record has fields including id (UUID), community_platform_comment_id (UUID), community_platform_user_id (UUID), state (string), created_at, updated_at, and deleted_at. The application layer uses state values like \"Upvote\" or \"Downvote\" to represent the active vote selection. Absence of a record or a record with a deletion timestamp indicates no active vote for a (comment, user) pair.\n\nSecurity and permissions follow the platform’s guardrails: only authenticated users (role communityMember) can vote; users cannot vote on their own comments; and attempts to vote while unauthenticated should be blocked by upper layers. Ownership rules and messages align with the requirements (e.g., prevent self-votes and show the standard message). The endpoint should ensure there is at most one active vote per (comment, user) tuple in alignment with the @@unique constraint on (community_platform_comment_id, community_platform_user_id).\n\nThis operation relates to community_platform_comments via community_platform_comment_id and to community_platform_users via community_platform_user_id. It must set or update the vote state to \"Upvote\" or \"Downvote\" while maintaining updated_at timestamps. Business validation should enforce the canonical vote state values and ensure state transitions follow the defined behavior (e.g., None→Upvote, Upvote→Downvote). Any conflicting prior records should be brought to a single active (or removed) state to preserve the unique constraint.\n\nWhen implementing, consider idempotency and the voting state machine. If the incoming desired state matches the current active state, the operation should return the current representation without additional side effects. If a different state is supplied, update the record accordingly. If a prior record exists but was marked deleted (via deleted_at), it should be reactivated and updated to the desired state. Errors include invalid commentId, missing comment, invalid state value, or attempts by the author to vote on their own comment.","summary":"Update a communityMember’s vote on a comment in community_platform_comment_votes","parameters":[{"name":"commentId","description":"Target comment’s ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Desired vote state for the target comment","typeName":"ICommunityPlatformCommentVote.IUpdate"},"responseBody":{"description":"Updated vote record for this user and comment","typeName":"ICommunityPlatformCommentVote"},"authorizationRole":"communityMember","name":"update","path":"/communityPlatform/communityMember/comments/{commentId}/votes","method":"put"},{"specification":"Remove the authenticated communityMember’s vote on a specific comment, operating on the community_platform_comment_votes table. This endpoint clears the current vote so the user’s state becomes None. Internally, the implementation should ensure that the unique per (comment, user) constraint is respected by removing or inactivating any existing vote record for the pair.","authorizationType":null,"description":"This operation clears the current vote for the caller on the target comment, referencing the community_platform_comment_votes table which defines a per-user vote record keyed uniquely by (community_platform_comment_id, community_platform_user_id). The schema includes fields id, community_platform_comment_id, community_platform_user_id, state, created_at, updated_at, and deleted_at. Removing a vote means ensuring there is no active vote record for the (comment, user) combination after the operation completes.\n\nSecurity and permissions follow platform rules: only authenticated users (communityMember) can modify vote state, and users cannot vote on their own comments (attempts should be rejected before reaching this endpoint or handled with appropriate validation messages). The removal action should be idempotent; if no active vote exists for the user on the target comment, the operation completes successfully with no changes.\n\nThis endpoint relates to community_platform_comments and community_platform_users through the foreign keys in the vote row. On success, the user’s vote state transitions to None for the specified comment. Typical errors include invalid commentId, missing comment, or authorization failures.","summary":"Remove the current communityMember’s vote on a comment (community_platform_comment_votes)","parameters":[{"name":"commentId","description":"Target comment’s ID","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"communityMember","name":"erase","path":"/communityPlatform/communityMember/comments/{commentId}/votes","method":"delete"},{"specification":"Retrieve a paginated, filterable list of historical snapshots for a specific post from the community_platform_post_snapshots table. Each snapshot captures title, body, and author_display_name at a point in time, with references to the source post (community_platform_post_id) and optional editor (editor_user_id). This read-only endpoint enables clients to browse a post’s edit history using pagination, search (e.g., by text), and sorting.","authorizationType":null,"description":"This operation lists snapshots from community_platform_post_snapshots for the given postId. The schema defines id (UUID), community_platform_post_id (UUID), editor_user_id (UUID, optional), title, body, author_display_name (optional), created_at (snapshot time), updated_at, and deleted_at. Snapshots are append-only records reflecting the post’s mutable fields at edit time, thus serving as an immutable audit trail of content changes. The operation returns snapshots scoped to the target post.\n\nSecurity: reading history is a public capability for public content in this platform. No authentication is required for read, but upstream layers may filter visibility in case of post removal or community policy. The endpoint should never allow creation, modification, or deletion of snapshots, as those are system-generated when post edits occur.\n\nRelationships: community_platform_post_snapshots rows reference community_platform_posts (via community_platform_post_id) and optionally community_platform_users as editor_user_id. The list should support pagination and sorting. Reasonable defaults include ordering by created_at descending to show newest edits first, with tie-breaking by identifier when timestamps are equal.\n\nValidation and behavior: reject requests for non-existent posts; if the post or its community is unavailable, the list should be empty or handled by business rules. Errors include invalid postId format, missing post, or access constraints imposed by higher layers.","summary":"List post snapshots from community_platform_post_snapshots for a post","parameters":[{"name":"postId","description":"Source post’s ID","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, sort, and pagination parameters for listing snapshots","typeName":"ICommunityPlatformPostSnapshot.IRequest"},"responseBody":{"description":"Paginated list of snapshots for the specified post","typeName":"IPageICommunityPlatformPostSnapshot"},"authorizationRole":null,"name":"index","path":"/communityPlatform/posts/{postId}/history","method":"patch"},{"specification":"Fetch a single historical snapshot for a post from the community_platform_post_snapshots table by its identifier. The snapshot includes the recorded title, body, author_display_name (if any), and timestamps, along with foreign keys to the source post and optional editor user. This read-only endpoint supports audit and version history displays.","authorizationType":null,"description":"This operation retrieves one snapshot record from community_platform_post_snapshots using both the parent postId context and the specific historyId (snapshot id). The Prisma schema documents the snapshot fields: id (UUID), community_platform_post_id (UUID), editor_user_id (UUID, optional), title, body, author_display_name (optional), created_at (snapshot time), updated_at, and deleted_at. The record represents a point-in-time state of a post’s mutable fields and is append-only for audit purposes.\n\nSecurity: reading snapshot history is a public capability for public content; no authentication is required. Access control or filtering for removed content may be applied by upstream business rules. This operation is strictly read-only and never modifies snapshot data.\n\nRelationships: each snapshot references community_platform_posts (community_platform_post_id) and optionally community_platform_users (editor_user_id). The controller/provider should verify that the requested snapshot belongs to the specified postId to prevent cross-resource access. Errors include not found for either the post or the history record, invalid identifiers, or visibility constraints.","summary":"Get a specific post snapshot (community_platform_post_snapshots)","parameters":[{"name":"postId","description":"Source post’s ID","schema":{"type":"string","format":"uuid"}},{"name":"historyId","description":"Snapshot ID to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Snapshot record with detailed fields","typeName":"ICommunityPlatformPostSnapshot"},"authorizationRole":null,"name":"at","path":"/communityPlatform/posts/{postId}/history/{historyId}","method":"get"},{"specification":"List historical snapshots for a specific comment from the community_platform_comment_snapshots table. This operation returns a paginated, filterable, and sortable collection of point-in-time records that capture a comment’s content state over time for the given commentId path parameter. It focuses on read-only access for audit/history viewing and does not modify data. The underlying Prisma model is Comments → community_platform_comment_snapshots, which is append-oriented and linked to community_platform_comments via community_platform_comment_id. The request body carries pagination, search, and sorting controls (ICommunityPlatformCommentSnapshot.IRequest). The response returns a paged container (IPageICommunityPlatformCommentSnapshot).","path":"/communityPlatform/comments/{commentId}/history","method":"patch","summary":"List comment history snapshots (community_platform_comment_snapshots) for a comment","description":"Retrieve the version history entries for a single comment identified by {commentId}. The community_platform_comment_snapshots model is documented as historical point-in-time records capturing the content state of community_platform_comments. Records are created whenever content changes to preserve audit trails and enable version review. Each snapshot stores the content at that time, the parent_id at that moment (if any), and the snapshot timestamps.\n\nSecurity and access: This endpoint is read-only and intended for displaying historical context. Implementers should enforce business rules around who can view history consistent with product policy. The operation returns only records that remain in active views (for example, those without a deleted_at value), and it never modifies comment or snapshot data.\n\nDatabase relationships: Each snapshot belongs to exactly one comment via community_platform_comment_id, which must match the {commentId} path parameter. The source comment itself references a post and an author in community_platform_comments. This operation should filter by community_platform_comment_id and order snapshots by created_at descending by default, using canonical tie-breakers when necessary.\n\nValidation and business logic: The request body (ICommunityPlatformCommentSnapshot.IRequest) supports pagination (page/limit or cursor), optional filtering by created_at ranges, and sorting (commonly by created_at). Snapshot text is plain text as per the comment rules, and the response should adhere to privacy rules (for example, visibility of removed content) without exposing internal-only data.\n\nRelated endpoints: Use GET /comments/{commentId}/history/{historyId} to retrieve a single snapshot’s full detail. Clients typically call this listing first, then fetch a selected snapshot by its identifier.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment whose history is requested","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, sort, and pagination parameters for listing comment snapshots","typeName":"ICommunityPlatformCommentSnapshot.IRequest"},"responseBody":{"description":"Paginated collection of snapshot records for the specified comment","typeName":"IPageICommunityPlatformCommentSnapshot"},"authorizationType":null,"authorizationRole":null,"name":"index"},{"specification":"Get a single historical snapshot record for a specific comment from the community_platform_comment_snapshots table. This operation retrieves one snapshot by its ID (historyId) under a given comment (commentId). It is strictly read-only, returning the immutable snapshot fields such as content, parent_id at the time, and timestamps. Underlying Prisma model: community_platform_comment_snapshots (Comments domain), related to community_platform_comments.","path":"/communityPlatform/comments/{commentId}/history/{historyId}","method":"get","summary":"Get a specific comment snapshot (community_platform_comment_snapshots) by historyId","description":"Return a single point-in-time snapshot for the comment specified by {commentId}. The community_platform_comment_snapshots schema stores append-only-like records that capture the state of a comment when a change occurred. Each snapshot contains the plain-text content at that moment, the then-current parent_id (if any), and the created_at timestamp for accurate historical ordering.\n\nSecurity and access: This read operation surfaces historical content for audit/version viewing. Implement authorization consistent with product policy. The operation should not include records that are removed from active views (those with a non-null deleted_at), and it performs no data modification.\n\nDatabase relationships and constraints: The snapshot belongs to the comment referred to by the path parameter {commentId} through community_platform_comment_id, and the targeted snapshot is identified by {historyId}. Implementers should verify both IDs and ensure the snapshot’s community_platform_comment_id matches the supplied commentId to avoid cross-resource leakage.\n\nValidation and error handling: If the snapshot is not found, or does not belong to the specified comment, return a suitable not-found or authorization error as appropriate. This endpoint complements the listing endpoint (PATCH /comments/{commentId}/history) that supports pagination and sorting.","parameters":[{"name":"commentId","description":"Identifier of the comment that owns the requested snapshot","schema":{"type":"string","format":"uuid"}},{"name":"historyId","description":"Identifier of the target snapshot within the comment’s history","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single snapshot record with content and timestamps","typeName":"ICommunityPlatformCommentSnapshot"},"authorizationType":null,"authorizationRole":null,"name":"at"},{"specification":"Retrieve a single user account from the community_platform_users table by {userId}. This operation returns the core identity record used system-wide for authorship and permissions. It is read-only and should present fields appropriate for public display (e.g., username, status) while respecting privacy policies for sensitive attributes. Underlying Prisma model: Actors → community_platform_users.","path":"/communityPlatform/users/{userId}","method":"get","summary":"Retrieve a user (community_platform_users) by ID","description":"Fetch the primary user identity referenced throughout the platform. The community_platform_users model contains the unique username, account status, and lifecycle timestamps such as created_at and updated_at, with last_login_at optionally present. This table is the parent for credentials, profile, and sessions, and is referenced by role assignment tables and content ownership relations (posts, comments).\n\nSecurity and visibility: Reading user identity by ID is often public in community contexts; however, implementations must respect privacy constraints regarding which fields are exposed. No modifications are performed by this endpoint. Records with a non-null deleted_at are considered removed from active use and should not be presented in normal responses.\n\nRelationships and usage: A user can have an associated profile (community_platform_user_profiles), credentials (community_platform_user_credentials), sessions (community_platform_sessions), and content authored (posts and comments). This endpoint returns just the user entity. Use the profile endpoint to retrieve presentation details like display_name and avatar URI.\n\nError handling: Return not found when the user does not exist or is no longer active for public views. This endpoint is commonly paired with GET /users/{userId}/profile to render full author cards.","parameters":[{"name":"userId","description":"Identifier of the user to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"User identity entity for public-safe presentation","typeName":"ICommunityPlatformUser"},"authorizationType":null,"authorizationRole":null,"name":"at"},{"specification":"Retrieve a user’s profile from the community_platform_user_profiles table for the given {userId}. The profile provides presentation-oriented information (display_name, bio, avatar_uri, locale, timezone) and is one-to-one with the core user entity community_platform_users. This is a read-only endpoint that returns public-facing profile data.","path":"/communityPlatform/users/{userId}/profile","method":"get","summary":"Retrieve a user profile (community_platform_user_profiles) by userId","description":"Get the presentation-layer profile associated with a user. The community_platform_user_profiles model stores fields intended for display rather than authentication: display_name (suggested 0–32 characters), optional bio, avatar_uri, and optional locale and timezone preferences. It references the owning user via community_platform_user_id and is unique per user.\n\nSecurity and privacy: This read operation should expose only public-safe profile information. It performs no changes. Profiles with a non-null deleted_at should not be returned in standard responses. Implementations may localize time-related displays using the user’s timezone value, but raw timestamps are returned as stored.\n\nRelationships: The profile is one-to-one with community_platform_users. Other account data such as credentials or sessions are deliberately separated and are not included in this response. Use GET /users/{userId} for identity fields and authorship references, and use content endpoints to fetch authored posts/comments.\n\nError handling: Return not found when no active profile exists for the specified userId. This endpoint complements the user detail endpoint to build author tiles and account pages.","parameters":[{"name":"userId","description":"Identifier of the user whose profile is requested","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Public-facing profile information for the specified user","typeName":"ICommunityPlatformUserProfile"},"authorizationType":null,"authorizationRole":null,"name":"at"},{"specification":"Retrieve a user’s recent community interactions and navigation targets from the community_platform_recent_communities table. This read operation surfaces a per-user ordered list (typically capped to 5 by most recent activity) of communities the user has visited or interacted with. It supports list-style querying (pagination, optional filtering, and sorting) and leverages relationships to community_platform_users (actor) and community_platform_communities (target community).","description":"Fetch the per-user Recent Communities list maintained in the community_platform_recent_communities table. Per the Prisma schema, each record references a user (community_platform_user_id) and a community (community_platform_community_id) and stores last_activity_at, created_at, and updated_at timestamps. The application uses last_activity_at to order the top entries for sidebar rendering and quick navigation.\n\nSecurity and permissions: Access requires an authenticated user context because the resource exposes user-specific navigation data. Provider logic should ensure a user can retrieve only their own recent list (path userId must match the authenticated subject), while privileged support views—if any—remain enforced in business logic. No write occurs through this endpoint; it is a read-only retrieval.\n\nEntity relationships and behavior: Each record forms a unique mapping of (user, community), ensuring no duplicates in the list. When eligible activities occur (e.g., visit, post, comment, vote, join/leave), the system updates last_activity_at and maintains the most recent communities in order. Records with a non-null deleted_at should be excluded from normal reads.\n\nValidation and related operations: The request body can carry pagination and sorting directives (commonly ordering by last_activity_at descending). If the userId path parameter does not correspond to an existing user, return a not-found response. Join/leave and other actions that influence recency are handled elsewhere and update this table implicitly; this endpoint is a view over that store.","summary":"List a user’s recent communities from community_platform_recent_communities","parameters":[{"name":"userId","description":"Target user’s ID whose recent communities are requested","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filtering, sorting, and pagination parameters for per-user recent communities","typeName":"ICommunityPlatformRecentCommunity.IRequest"},"responseBody":{"description":"Paginated list of recent community summaries for the specified user, ordered by last activity","typeName":"IPageICommunityPlatformRecentCommunity.ISummary"},"authorizationType":null,"authorizationRole":"communityMember","name":"index","path":"/communityPlatform/communityMember/users/{userId}/recentCommunities","method":"patch"},{"specification":"Return the sitewide latest posts using the mv_community_platform_global_latest_posts materialized view. This read-only public endpoint retrieves the most recent posts across all communities with denormalized fields (title, author_display_name, community_name, score, comment_count) for fast sidebar display. It aligns with the Global Latest requirement of up to 10 items.","description":"Retrieve the Global Latest list from mv_community_platform_global_latest_posts. The Prisma schema describes this view as denormalizing display-critical fields and storing created_at for ordering along with refreshed_at for cache freshness. Each row references the authoritative post (community_platform_posts.id), its community (community_platform_communities.id), and the author (community_platform_users.id).\n\nSecurity and permissions: This is a public discovery endpoint intended for the right sidebar. It returns only display-oriented, recent content; no authentication is required.\n\nBehavior and errors: The response returns a container with up to 10 items, ordered by created_at (newest first) consistent with the platform’s Newest definition and tie-breakers. If the view has no rows (e.g., empty system), the endpoint returns an empty list without error.","summary":"Get Global Latest posts from mv_community_platform_global_latest_posts","parameters":[],"requestBody":null,"responseBody":{"description":"Container holding up to 10 latest post summaries for the Global Latest sidebar","typeName":"IPageICommunityPlatformGlobalLatestPost.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","path":"/communityPlatform/globalLatestPosts","method":"get"},{"specification":"Search and retrieve administrative action snapshots from the community_platform_admin_actions table. This list operation supports pagination, filtering (by actor, action key, and optional targets such as community, post, or comment), and sorting by created_at. It serves audit and policy review use cases and is restricted to administrative access.","description":"List administrative action records from community_platform_admin_actions. The schema captures actor_user_id, optional target identifiers (target_community_id, target_post_id, target_comment_id), a canonical action string (e.g., \"disable_community\", \"delete_post\", \"remove_comment\"), and optional reason, ip, and user_agent metadata. Time-based filtering and indices on action/targets support efficient queries.\n\nSecurity and permissions: Only administrators may access this endpoint; enforce role checks so non-administrative callers are denied. The operation is read-only and is intended for audit and compliance oversight.\n\nEntity relationships and behavior: Each record links to an admin user (community_platform_users.id) and may reference a community, post, or comment. Providers may enrich summaries with actor usernames or resource labels while respecting privacy constraints. Records where deleted_at is set should be excluded from standard reads.\n\nValidation and related operations: The request body may include pagination controls, sort options, action filters, actor filters, and date ranges. Typical ordering is created_at descending. Use GET /adminActions/{adminActionId} to retrieve an individual snapshot when detailed review is required.","summary":"List administrative actions from community_platform_admin_actions","parameters":[],"requestBody":{"description":"Search criteria, filters, and pagination settings for administrative actions","typeName":"ICommunityPlatformAdminAction.IRequest"},"responseBody":{"description":"Paginated collection of administrative action summaries","typeName":"IPageICommunityPlatformAdminAction.ISummary"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index","path":"/communityPlatform/systemAdmin/adminActions","method":"patch"},{"specification":"Retrieve a specific administrative action snapshot by identifier from the community_platform_admin_actions table. The operation returns all recorded fields for the action to support audit and policy review workflows and is restricted to administrators.","description":"Fetch one administrative action record by ID from community_platform_admin_actions. Fields include actor_user_id (admin who performed the action), optional target_community_id, target_post_id, target_comment_id, canonical action string, optional reason text, ip, user_agent, and created_at/updated_at timestamps. The record is an immutable snapshot designed for audit, investigation, and compliance.\n\nSecurity and permissions: Administrator-only read operation. Provider logic must ensure only authorized callers can retrieve these records; non-admin requests should be denied.\n\nValidation and related operations: If the provided adminActionId does not correspond to an existing record, return a not-found response. For listing and filtering needs, use PATCH /adminActions.","summary":"Get a specific administrative action (community_platform_admin_actions) by ID","parameters":[{"name":"adminActionId","description":"Unique administrative action ID to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Administrative action detail snapshot","typeName":"ICommunityPlatformAdminAction"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at","path":"/communityPlatform/systemAdmin/adminActions/{adminActionId}","method":"get"},{"specification":"Retrieve a searchable, paginated list of administrative audit log entries from the community_platform_audit_logs table. This endpoint is designed for investigative and compliance review use-cases by privileged administrators. It supports advanced filtering (e.g., by event_type, time ranges, actor_user_id, related resource IDs), success flag, and sorting (typically by created_at desc) and returns lightweight summaries suitable for list rendering. The implementation MUST read only from the community_platform_audit_logs table and related entities for joins (users, sessions, communities, posts, comments, memberships) and MUST NOT provide any mutation capability.","path":"/communityPlatform/systemAdmin/auditLogs","method":"patch","summary":"Search and paginate administrative audit logs (community_platform_audit_logs).","description":"This operation lists audit entries stored in the community_platform_audit_logs table, which captures general-purpose, append-only records of significant events, such as joins/leaves, content creation/deletion, voting, authentication, and administrative actions. The schema fields include actor_user_id, session_id, guestvisitor_id, community_id, post_id, comment_id, membership_id, event_type, success, details, ip, user_agent, and created_at/updated_at timestamps. Records use deleted_at as a logical removal timestamp; list responses should exclude records where deleted_at is not null unless an explicit administrative retrieval mode is required.\n\nSecurity and authorization: Only users holding the systemAdmin role are allowed to access this listing. The endpoint is strictly read-only and intended for audit/compliance workflows. Requests should be rate-limited and observable. The provider must ensure no sensitive tokens are exposed (only internal identifiers and metadata logged in the audit table).\n\nRelationship context: Although the list originates from community_platform_audit_logs, it may filter or enrich results using relations to community_platform_users (actor), community_platform_sessions (session correlation), community_platform_guestvisitors (unauthenticated actor), community_platform_communities, community_platform_posts, community_platform_comments, and community_platform_community_memberships when those foreign keys are present. These relations are optional and should be joined only when needed by filters or projection.\n\nValidation and business logic: Support filters on event_type (exact or set), success flag, time windows using created_at range, and resource scoping (e.g., by community_id, post_id, comment_id, membership_id). Sorting defaults to created_at desc with a deterministic tiebreaker by id when timestamps match. Pagination should be implemented to return manageable pages for UI list rendering.\n\nRelated operations: Use GET /auditLogs/{auditLogId} to retrieve full details of a single audit record when an entry from this list is selected. Errors should follow standard patterns; attempts by non-admins must be denied with appropriate authorization handling.","parameters":[],"requestBody":{"description":"Search criteria, time-range, sorting, and pagination for audit log retrieval.","typeName":"ICommunityPlatformAuditLog.IRequest"},"responseBody":{"description":"Paginated audit log summaries matching the provided filters.","typeName":"IPageICommunityPlatformAuditLog.ISummary"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"index"},{"specification":"Fetch a single audit log record from the community_platform_audit_logs table by its unique identifier. This endpoint returns the complete details of the selected audit entry, including event_type, success, related resource references, and metadata such as IP and user_agent, for administrative review. It is strictly read-only and intended for systemAdmin users.","path":"/communityPlatform/systemAdmin/auditLogs/{auditLogId}","method":"get","summary":"Get details of a single audit log (community_platform_audit_logs).","description":"This operation returns one immutable audit record from community_platform_audit_logs identified by its primary key. The table stores append-only snapshots of significant events. Columns include actor_user_id, session_id, guestvisitor_id, community_id, post_id, comment_id, membership_id, event_type, success, optional details, ip, user_agent, and created_at/updated_at timestamps. Records with a non-null deleted_at represent logically removed entries and should normally be excluded unless an explicit admin retrieval mode is required.\n\nSecurity and permissions: Access is limited to users holding the systemAdmin role. The response is for read-only investigative purposes; no mutation is supported. Providers should avoid exposing sensitive secrets while returning the metadata stored in the audit table.\n\nRelationships and context: The response may be resolved with optional associations (actor user, session, guest visitor, and resource targets) for context in admin tooling, but the canonical source is the community_platform_audit_logs row selected by id.\n\nError handling: If the identifier does not exist or the record has been logically removed from active views, return a not-found outcome. Unauthorized access attempts must be denied according to platform policy.","parameters":[{"name":"auditLogId","description":"Unique identifier of the audit log record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full audit log record with metadata and related identifiers.","typeName":"ICommunityPlatformAuditLog"},"authorizationType":null,"authorizationRole":"systemAdmin","name":"at"},{"specification":"Search and paginate posts from the community_platform_posts table according to the platform’s search rules. This endpoint matches query terms against post.title and post.body, applies sort orders (Newest default; Top optional using score), and returns paginated summaries for UI lists. It excludes logically removed content and should respect related community state when determining visibility.","path":"/communityPlatform/search/posts","method":"patch","summary":"Search posts by title/body with pagination and sorting (community_platform_posts).","description":"This operation provides a search surface over community_platform_posts. According to the schema, posts contain title (5–120 chars), body (10–10,000 chars), optional author_display_name, and timestamps (created_at/updated_at), with a logical deletion timestamp deleted_at. The endpoint should match words against title and body and exclude posts where deleted_at is not null. When applicable, posts associated to communities with a non-null disabled_at should be hidden from promotion surfaces; search implementations commonly exclude such content.\n\nSorting and pagination: The default sort is Newest, ordering by created_at desc and using a deterministic tiebreaker by id when timestamps match. Optionally support a Top sort that orders by computed score (upvotes − downvotes via community_platform_post_votes), then by more recent created_at, and then by larger id for ties. Page size is typically 20 with load-more behavior; clients provide pagination cursors or page/index as defined by the request DTO.\n\nValidation and business rules: Enforce minimum query length of 2 characters; shorter queries should return a validation-style outcome per product copy guidelines. Filtering can include community scoping, author scoping, date ranges, and score thresholds if present in the request DTO. Results return lightweight post summaries optimized for list display (community name, title, author display name, relative time, comment count, score) while the authoritative data remains in the posts and related tables.\n\nRelated endpoints: Use community feeds or home feeds for non-search listing, and use post detail retrieval (not defined here) to fetch the full post. Error handling follows standard patterns and the search should be publicly accessible for unauthenticated users.","parameters":[],"requestBody":{"description":"Search query, sorting (Newest/Top), and pagination settings for posts.","typeName":"ICommunityPlatformPost.IRequest"},"responseBody":{"description":"Paginated list of post summaries that match the search criteria.","typeName":"IPageICommunityPlatformPost.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index"},{"specification":"Search and paginate communities from the community_platform_communities table using query-based name matching and category context. Supports Name Match (default) ranking and Recently Created sorting. Returns paginated summaries for exploration and discovery. Excludes logically removed or administratively disabled communities from promotion surfaces.","path":"/communityPlatform/search/communities","method":"patch","summary":"Search communities by name with pagination and sorting (community_platform_communities).","description":"This operation searches the community_platform_communities table. Communities include immutable unique name, optional description, optional logo/banner URIs, category reference (community_platform_categories), last_active_at, disabled_at, and timestamps. Logical deletion is tracked by deleted_at and such rows must be excluded from normal search results. The endpoint should also hide communities with non-null disabled_at from promotion surfaces per business rules.\n\nRanking and sorting: Provide two primary modes. Name Match (default) orders by similarity to the query against the name field, breaking ties by more recent created_at and then larger id. Recently Created orders strictly by created_at desc with a deterministic tiebreaker by id. Page size is typically 20 with load-more. Category facets are supported by joining community_platform_categories where useful for filters; categories carry fields such as code, name, active, and display_order.\n\nValidation and business logic: Enforce minimum query length of 2 characters. Accept optional filters such as category, active category enforcement, and disabled status exclusion in accordance with platform policy. The response should include essential summary fields such as community name (/c/{name}), description snippet, category label, and member count computed from community_platform_community_memberships if included by the request DTO.\n\nRelated endpoints: Use community detail retrieval and feed endpoints for deeper browsing. Search is publicly accessible and read-only, intended for exploration and discovery.","parameters":[],"requestBody":{"description":"Search query, sorting (Name Match/Recently Created), filters, and pagination.","typeName":"ICommunityPlatformCommunity.IRequest"},"responseBody":{"description":"Paginated list of community summaries matching the search criteria.","typeName":"IPageICommunityPlatformCommunity.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index"},{"specification":"Search and retrieve a paginated collection of comment entities for the community platform. Operates primarily on the Prisma table community_platform_comments, leveraging its text content field for trigram-backed matching and its created_at timestamp for ordering. The endpoint accepts complex search inputs (query text with minimum length), pagination controls (page/cursor/limit semantics handled by the IRequest DTO), and deterministic tie-breakers. It returns summary representations suitable for list views, contained in a paginated wrapper type. Sorting for comment search follows the business rule: Newest first, with ties broken by more recent creation time and then by larger identifier. Records with deleted_at not null are excluded from results, and results should also exclude comments whose parent post or community is not publicly visible (e.g., post.deleted_at not null; community.disabled_at not null or community.deleted_at not null). The DTO namespace uses the CommunityPlatform prefix: request body type ICommunityPlatformComment.IRequest and response body type IPageICommunityPlatformComment.ISummary.","authorizationType":null,"description":"This operation retrieves searchable, paginated comments from the community platform in alignment with the business requirements and the Prisma schema. It is rooted in the community_platform_comments table, which stores user-authored comment entities with fields including id (primary key), community_platform_post_id (post association), community_platform_user_id (author association), optional parent_id (threading), content (plain-text body), created_at, updated_at, and deleted_at. Text matching uses the content column and leverages the defined trigram index (Gin on content) to support efficient substring and similarity queries.\n\nSecurity and access follow product rules: reading and searching are open to all roles, so this endpoint is public. Results must include only comments that remain visible to the public: comments where deleted_at is null and whose parent post and community are also available for public consumption (exclude where post.deleted_at is not null or community.disabled_at/deleted_at is not null). Implement reasonable rate limiting or throttling for this search endpoint to mitigate abuse and protect backend resources.\n\nThe operation returns results ordered by the canonical Newest definition for comments: order by created_at descending; when created_at timestamps are equal, return the comment with the larger identifier first (effectively ORDER BY created_at DESC, id DESC). The request body ICommunityPlatformComment.IRequest encapsulates search criteria such as the query string (minimum length 2 characters; shorter inputs must not execute the search and should surface the standard validation message), pagination controls targeting 20 results per page, and optional post/community scoping. The response body IPageICommunityPlatformComment.ISummary wraps a page of summary items optimized for list display, including essential fields such as comment id, content excerpt, created_at, and minimal relation hints (post/community identifiers) as defined in the DTO schema.\n\nThis API is closely related to other search endpoints (e.g., posts and communities) but focuses strictly on comments. Typical usage includes executing a global search where the client selects the Comments tab and then calls this endpoint with the user’s query. On error, the implementation should provide consistent messages for validation failures (e.g., “Please enter at least 2 characters.”) and handle transient issues with a retry-friendly response, as specified in the error-handling requirements. Timestamps should be presented in clients using users’ local timezones (e.g., Asia/Seoul) with relative formatting, and pagination must return 20 items per page with stable ordering and no duplicates between pages.","summary":"Search comments (community_platform_comments) with Newest ordering and paginated results.","parameters":[],"requestBody":{"description":"Search constraints and pagination parameters for comment retrieval (query ≥ 2 chars, pagination 20 per page).","typeName":"ICommunityPlatformComment.IRequest"},"responseBody":{"description":"Paginated collection of comment summaries that match the search criteria, ordered by Newest with deterministic tie-breakers.","typeName":"IPageICommunityPlatformComment.ISummary"},"authorizationRole":null,"name":"index","path":"/communityPlatform/search/comments","method":"patch"}],"components":{"authorization":[{"name":"guestVisitor","description":"Unauthenticated visitor who can browse public communities, posts, comments, and search results but cannot create, vote, comment, join/leave, or create communities. Can initiate login/signup flows when attempting restricted actions.","kind":"guest"},{"name":"communityMember","description":"Authenticated standard user who can create and manage own posts and comments, vote on others’ content, join/leave communities, and create communities. Automatically becomes the owner of communities they create with exclusive rights to edit that community’s metadata and rules.","kind":"member"},{"name":"systemAdmin","description":"Platform administrator with elevated privileges to enforce policies, handle abuse reports, and perform emergency actions such as disabling or deleting communities or content when necessary. Does not gain authorship over others’ content.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageICommunityPlatformCategory.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCategory.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformReservedTerm.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformReservedTerm.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformAppSetting.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformAppSetting.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunity.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunity.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunityRule":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunityRule"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunityMembership.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunityMembership.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformPost.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformPost.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformComment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformComment"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformPostSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformPostSnapshot"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommentSnapshot":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommentSnapshot"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformRecentCommunity.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformRecentCommunity.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformGlobalLatestPost.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformGlobalLatestPost.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformAdminAction.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformAdminAction.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformAuditLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformAuditLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformComment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformComment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ICommunityPlatformGuestVisitor":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the guest visitor (community_platform_guestvisitors.id).\n\nThis identifier correlates anonymous browsing sessions for analytics and resumable guarded flows."},"device_fingerprint":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional opaque device/browser fingerprint used to correlate guest activity.\n\nPrisma column: community_platform_guestvisitors.device_fingerprint. This value is optional and may be null."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Observed user-agent string for the guest visitor.\n\nPrisma column: community_platform_guestvisitors.user_agent (nullable)."},"ip":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Observed IP address for the guest visitor.\n\nPrisma column: community_platform_guestvisitors.ip (nullable)."},"first_seen_at":{"type":"string","format":"date-time","description":"First observed timestamp for this guest visitor.\n\nPrisma column: community_platform_guestvisitors.first_seen_at (timestamptz)."},"last_seen_at":{"type":"string","format":"date-time","description":"Most recent observed timestamp for this guest visitor.\n\nPrisma column: community_platform_guestvisitors.last_seen_at (timestamptz)."}},"required":["id","first_seen_at","last_seen_at"],"description":"Guest visitor entity reflecting Prisma table community_platform_guestvisitors.\n\nThis table models anonymous visitors for sessionless interactions, capturing optional device fingerprint, user-agent, IP, and first/last seen timestamps. It does not link to credentials or sessions. Audit logs may reference this id in community_platform_audit_logs.guestvisitor_id.\n\nSecurity: This entity contains no passwords or tokens. It is safe for public read contexts, but still consider privacy for IP and device fingerprint fields."},"ICommunityPlatformGuestVisitor.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Guest visitor id (UUID).\n\nPrisma: community_platform_guestvisitors.id."},"first_seen_at":{"type":"string","format":"date-time","description":"First observed timestamp for this guest visitor.\n\nPrisma: community_platform_guestvisitors.first_seen_at."},"last_seen_at":{"type":"string","format":"date-time","description":"Most recent observed timestamp for this guest visitor.\n\nPrisma: community_platform_guestvisitors.last_seen_at."}},"required":["id","first_seen_at","last_seen_at"],"description":"Summary projection of a guest visitor for embedding within authorization responses.\n\nThis summary excludes potentially sensitive networking hints (IP and user-agent) and focuses on stable identification and recency timestamps."},"ICommunityPlatformGuestVisitor.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorized guest visitor (UUID)."},"first_seen_at":{"type":"string","format":"date-time","description":"First observed timestamp for this guest visitor.\n\nPrisma column: community_platform_guestvisitors.first_seen_at (timestamptz)."},"last_seen_at":{"type":"string","format":"date-time","description":"Most recent observed timestamp for this guest visitor.\n\nPrisma column: community_platform_guestvisitors.last_seen_at (timestamptz)."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"guestVisitor":{"$ref":"#/components/schemas/ICommunityPlatformGuestVisitor.ISummary","description":"Optional embedded subject information for convenience.\n\nSecurity: Summary-only; never include sensitive fingerprints or networking hints in authorization responses."}},"required":["id","token"],"description":"Authorization response for guest visitors containing JWT token bundle.\n\nReturned by guest join and refresh endpoints that operate on the Prisma table community_platform_guestvisitors. The id matches the guest visitor record used for analytics and resumable guarded flows. The token property references the standard IAuthorizationToken type and must never be inlined.\n\nSecurity: This response intentionally excludes potentially sensitive networking or fingerprinting fields (e.g., device_fingerprint, user_agent, ip). Only public-safe summary data may be included alongside the token."},"ICommunityPlatformGuestVisitorJoin.ICreate":{"type":"object","properties":{"device_fingerprint":{"type":"string","maxLength":512,"description":"Opaque fingerprint used to correlate guest sessions.\n\nPrisma: community_platform_guestvisitors.device_fingerprint (optional)."},"user_agent":{"oneOf":[{"type":"string","maxLength":1000},{"type":"null"}],"description":"Client user-agent to record in guest context.\n\nPrisma: community_platform_guestvisitors.user_agent (optional)."},"ip":{"oneOf":[{"type":"string","maxLength":255},{"type":"null"}],"description":"Client IP to record in guest context.\n\nPrisma: community_platform_guestvisitors.ip (optional)."}},"required":[],"description":"Guest registration/correlation payload.\n\nCreates or updates Actors: community_platform_guestvisitors (first_seen_at / last_seen_at). Security: no credentials; no actor IDs are accepted from clients."},"ICommunityPlatformGuestVisitorRefresh.IRequest":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token issued previously to the guest visitor. Required for token rotation.\n\nSecurity: Treat as secret. The server validates and rotates this value without persisting it in a sessions table."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional current user-agent to support anomaly detection or audit trails."},"ip":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional current IP address to support anomaly detection or audit trails."}},"required":["refresh_token"],"description":"Guest token rotation request.\n\nThis payload carries the refresh token and optional client context hints. The underlying guest identity is in community_platform_guestvisitors; no community_platform_sessions row exists for guests."},"ICommunityPlatformCommunityMember.ICreate":{"type":"object","properties":{"username":{"type":"string","description":"Unique public handle for the new account.\n\nMaps to Prisma community_platform_users.username (unique). This value identifies the user and must be globally unique per @@unique(username)."},"email":{"type":"string","format":"email","description":"Login email address for credential binding.\n\nMaps to Prisma community_platform_user_credentials.email (email_normalized is derived by the server for case-insensitive uniqueness)."},"password":{"type":"string","minLength":8,"description":"Plaintext password provided by the client for secure hashing.\n\nServer hashes into community_platform_user_credentials.password_hash and never stores plaintext. Minimum length enforced at the application layer."}},"required":["username","email","password"],"description":"Community member registration payload.\n\nThis request creates a new identity in community_platform_users and binds credentials in community_platform_user_credentials, then assigns the communityMember role (community_platform_communitymembers) and issues a session (community_platform_sessions). For security, do not accept actor IDs (e.g., user_id) or system fields; server derives ownership from authentication context and generates identifiers and timestamps."},"ICommunityPlatformUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the user.\n\nPrisma column: community_platform_users.id"},"username":{"type":"string","minLength":1,"description":"Unique public handle used to identify the account.\n\nPrisma column: community_platform_users.username"},"status":{"type":"string","minLength":1,"description":"Account status lifecycle label (e.g., active, disabled, pending).\n\nPrisma column: community_platform_users.status"},"last_login_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the last successful login for this account (UTC). Null if never logged in.\n\nPrisma column: community_platform_users.last_login_at"},"created_at":{"type":"string","format":"date-time","description":"Entity creation timestamp (UTC).\n\nPrisma column: community_platform_users.created_at"},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp (UTC).\n\nPrisma column: community_platform_users.updated_at"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp (UTC). Null when active; indicates the record has been removed from active use when set.\n\nPrisma column: community_platform_users.deleted_at"}},"required":["id","username","status","created_at","updated_at"],"description":"User identity entity for authorship and permissions context.\n\nThis schema maps to Prisma model community_platform_users, the central user record referenced by credentials, profiles, sessions, roles, and authored content (posts/comments). It intentionally omits sensitive credential data and focuses on public-safe identity fields required by the platform.\n\nSecurity note: Do not expose password hashes, tokens, or other secrets in user response types. This schema includes only public-safe identity and lifecycle fields."},"ICommunityPlatformCommunityMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated community member.\n\nMaps to community_platform_users.id and is the subject of issued tokens."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"user":{"$ref":"#/components/schemas/ICommunityPlatformUser","description":"Optional hydrated user object for immediate client consumption.\n\nIncludes public-safe identity fields (username, status, timestamps) sourced from community_platform_users."}},"required":["id","token"],"description":"Authorization response for community members containing the issued token bundle and the subject identifier.\n\nThis DTO is returned after join, login, or refresh flows for the member role. It references Prisma models: community_platform_users (id, status), community_platform_user_credentials (credentials are never exposed), and community_platform_sessions (backing refresh lifecycle)."},"ICommunityPlatformCommunityMember.ILogin.IByEmail":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Login email corresponding to community_platform_user_credentials.email (case-insensitive lookups use email_normalized in persistence logic)."},"password":{"type":"string","minLength":8,"description":"Plaintext password provided by the user for verification against community_platform_user_credentials.password_hash.\n\nSECURITY: This value is accepted in the request only and is never persisted in plaintext."}},"required":["email","password"],"description":"Login payload using email + password.\n\nBacked by Prisma community_platform_user_credentials (email/email_normalized, password_hash)."},"ICommunityPlatformCommunityMember.ILogin.IByUsername":{"type":"object","properties":{"username":{"type":"string","description":"Alternative login identifier mapped to community_platform_users.username (unique)."},"password":{"type":"string","minLength":8,"description":"Plaintext password provided by the user for verification against community_platform_user_credentials.password_hash.\n\nSECURITY: This value is accepted in the request only and is never persisted in plaintext."}},"required":["username","password"],"description":"Login payload using username + password.\n\nUsername maps to Prisma community_platform_users.username (unique)."},"ICommunityPlatformCommunityMember.ILogin":{"oneOf":[{"$ref":"#/components/schemas/ICommunityPlatformCommunityMember.ILogin.IByEmail"},{"$ref":"#/components/schemas/ICommunityPlatformCommunityMember.ILogin.IByUsername"}],"description":"Union login request for community members.\n\nSupports either email+password or username+password authentication strategies. Underlying verification is performed against community_platform_user_credentials and community_platform_users as described in the Prisma schema comments."},"ICommunityPlatformCommunityMember.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Raw refresh token issued previously.\n\nServer validates by hashing and comparing to community_platform_sessions.refresh_token_hash, ensuring revoked_at is null and expires_at is valid."}},"required":["refresh_token"],"description":"Refresh-token exchange request for community members.\n\nSupplies only the raw refresh token. No actor IDs or system-generated fields are accepted. On success, the server returns ICommunityPlatformCommunityMember.IAuthorized with new access/refresh tokens."},"ICommunityPlatformCommunityMember.IUpdate":{"type":"object","properties":{"current_password":{"type":"string","minLength":8,"description":"The caller’s current password used to verify identity before rotation.\n\nVerified against community_platform_user_credentials.password_hash."},"new_password":{"type":"string","minLength":8,"description":"The desired new password to be stored as a hash.\n\nServer replaces community_platform_user_credentials.password_hash and sets password_updated_at accordingly."}},"required":["current_password","new_password"],"description":"Password change request for community members.\n\nThis request rotates credentials stored in community_platform_user_credentials by verifying current_password and updating to new_password. No actor IDs or system fields are permitted in the body; ownership is derived from the authenticated context."},"ICommunityPlatformSystemAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the administrator’s user record.\n\nMaps to Prisma table community_platform_users.id in the Actors namespace. This identifier is used across relations (sessions, credentials, role assignments) and appears in audit trails. Always a UUID string."},"username":{"type":"string","minLength":3,"maxLength":64,"description":"Unique username of the administrator account.\n\nCorresponds to community_platform_users.username. Enforced unique by Prisma (@@unique). Used for login alternative to email and for administrative display contexts."},"status":{"type":"string","description":"Lifecycle status label for the user account.\n\nBacked by community_platform_users.status. Typical values include business-defined states such as \"active\" or \"disabled\" and are enforced by provider logic during authentication and authorization checks."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the last successful login for this account if recorded.\n\nReflects community_platform_users.last_login_at. Providers update this field on successful login. Null when no successful login has been recorded."}},"required":["id","username","status"],"description":"System administrator identity surface derived from Prisma:\n\n- Base user fields come from community_platform_users (Actors namespace): id (UUID), username (unique), status, last_login_at.\n\n- Administrative role is tracked separately in community_platform_systemadmins; this type focuses on the user identity commonly embedded in admin authorization responses and admin-facing UIs.\n\nSecurity Note: This type never contains secrets (no password hashes, tokens, or sensitive keys)."},"ICommunityPlatformSystemAdmin.ICreate":{"type":"object","properties":{"username":{"type":"string","minLength":3,"maxLength":64,"description":"Desired unique username for the new administrator.\n\nBacked by community_platform_users.username. Must be unique platform-wide."},"email":{"type":"string","format":"email","minLength":3,"maxLength":320,"description":"Login email for the administrator account.\n\nStored in community_platform_user_credentials.email (and email_normalized for case-insensitive uniqueness). Uniqueness is enforced in Prisma."},"password":{"type":"string","minLength":8,"maxLength":1024,"description":"Plain secret to be hashed server-side and stored as community_platform_user_credentials.password_hash.\n\nSecurity: Never log or echo this value. Clients submit plaintext; servers persist only strong password hashes."},"user_agent":{"oneOf":[{"type":"string","maxLength":1000},{"type":"null"}],"description":"Optional client user-agent string to associate with the initial session record.\n\nWhen provided, it can be persisted in community_platform_sessions.user_agent for audit and security analytics."},"ip":{"oneOf":[{"type":"string","maxLength":255},{"type":"null"}],"description":"Optional client IP address to associate with the initial session record.\n\nWhen provided, it can be persisted in community_platform_sessions.ip for audit and security analytics."}},"required":["username","email","password"],"description":"Create payload for provisioning a new platform administrator.\n\nThis DTO maps to multiple Prisma models atomically:\n\n- community_platform_users: inserts backbone user with username/status.\n- community_platform_user_credentials: persists email/email_normalized and password_hash.\n- community_platform_systemadmins: records the role grant (granted_at, optional granted_by_user_id).\n- community_platform_sessions: creates initial refresh-token session (refresh_token_hash, issued_at, expires_at, user_agent, ip).\n\nSecurity Principles:\n- Do NOT accept actor IDs (e.g., user_id, granted_by_user_id) from clients; these are derived from authenticated context or system policy.\n- Do NOT accept system-generated fields (id, created_at, updated_at, deleted_at, granted_at)."},"ICommunityPlatformSystemAdmin.ILogin":{"oneOf":[{"required":["email","password"]},{"required":["username","password"]}],"description":"Login payload for authenticating a system administrator.\n\nValidation and lookup flow:\n- Identify the account using either email (matched against email_normalized) or username (community_platform_users.username).\n- Verify the submitted password against community_platform_user_credentials.password_hash.\n- On success, update last_login_at in both community_platform_user_credentials and community_platform_users, and create a session in community_platform_sessions (refresh_token_hash, issued_at, expires_at).\n\nSecurity:\n- Requires exactly one identifier (email or username) together with password.\n- Never accept actor IDs from the client. Never expose password_hash or session hashes."},"ICommunityPlatformSystemAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","minLength":20,"maxLength":4000,"description":"Opaque refresh token presented by the client for renewal.\n\nServer-side logic hashes this value and matches against community_platform_sessions.refresh_token_hash with checks on revoked_at and expires_at."},"user_agent":{"oneOf":[{"type":"string","maxLength":1000},{"type":"null"}],"description":"Optional client user-agent used for anomaly detection and session correlation (community_platform_sessions.user_agent)."},"ip":{"oneOf":[{"type":"string","maxLength":255},{"type":"null"}],"description":"Optional client IP address used for anomaly detection and session correlation (community_platform_sessions.ip)."}},"required":["refresh_token"],"description":"Refresh token exchange payload for administrators.\n\nValidation:\n- The supplied token is validated against community_platform_sessions.refresh_token_hash.\n- Session must be active (revoked_at is null) and within validity window (expires_at in the future).\n\nNo actor IDs are accepted from clients; the session determines the subject."},"ICommunityPlatformSystemAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Identifier of the authenticated administrator user.\n\nMaps to community_platform_users.id and is the subject for subsequent role/ownership checks."},"username":{"type":"string","minLength":3,"maxLength":64,"description":"Unique username of the administrator account.\n\nCorresponds to community_platform_users.username. Enforced unique by Prisma (@@unique). Used for login alternative to email and for administrative display contexts."},"status":{"type":"string","description":"Lifecycle status label for the user account.\n\nBacked by community_platform_users.status. Typical values include business-defined states such as \"active\" or \"disabled\" and are enforced by provider logic during authentication and authorization checks."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the last successful login for this account if recorded.\n\nReflects community_platform_users.last_login_at. Providers update this field on successful login. Null when no successful login has been recorded."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"admin":{"$ref":"#/components/schemas/ICommunityPlatformSystemAdmin","description":"Optional administrator entity snapshot to help clients hydrate UI state immediately after authentication.\n\nDerived primarily from community_platform_users. May be omitted to minimize payload size."}},"required":["id","username","status","token"],"description":"Authorization response for administrator authentication flows.\n\nReturned by join/login/refresh endpoints for systemAdmin role. Conforms to platform-wide IAuthorized conventions:\n\n- Includes subject id (UUID) and a standard IAuthorizationToken structure for access/refresh lifecycle.\n- May include an \"admin\" object representing the administrator’s profile/identity mapped from community_platform_users.\n\nSecurity: Never include password_hash, refresh_token_hash, or other secrets. Tokens are returned only via the nested IAuthorizationToken reference."},"ICommunityPlatformSystemAdmin.ISignOut":{"type":"object","description":"Result of current-session sign-out for a system administrator.\\n\\nThis response confirms revocation of the caller's active session in the Prisma model `community_platform_sessions` by setting `revoked_at`. The provider identifies the session from the authenticated context and applies logical revocation.\\n\\nSecurity and data notes: This DTO contains no password or token values. It reflects the lifecycle change recorded in `community_platform_sessions` (fields like `refresh_token_hash`, `revoked_at`, `updated_at`). The `session_id` may be included or withheld depending on provider policy; when omitted, use `null`.","properties":{"ok":{"type":"boolean","description":"Operation result flag. True when the current session has been revoked successfully."},"revoked_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp in UTC (e.g., 2025-09-23T17:31:42.818Z) when the current session was revoked in `community_platform_sessions.revoked_at`."},"session_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional identifier of the revoked session (UUID). Providers may choose not to expose internal session identifiers; in that case this value can be null."},"message":{"type":"string","description":"Optional human-readable message confirming the sign-out operation."}},"required":["ok","revoked_at"]},"ICommunityPlatformSystemAdmin.ISignOutAll":{"type":"object","description":"Result of bulk sign-out (all sessions) for a system administrator.\\n\\nThis response summarizes a mass revocation across all active rows in Prisma `community_platform_sessions` for the authenticated admin (`revoked_at` set on each matching row).\\n\\nSecurity and data notes: No password or token secrets are exposed. Counts are derived from affected session rows and do not require schema changes in the database.","properties":{"ok":{"type":"boolean","description":"Operation result flag. True when the revoke-all action completed successfully."},"count":{"type":"integer","minimum":0,"description":"Number of sessions that were revoked for the authenticated administrator."},"revoked_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp in UTC when the bulk revocation occurred."},"message":{"type":"string","description":"Optional human-readable message summarizing the outcome."}},"required":["ok","count","revoked_at"]},"ICommunityPlatformSystemAdminPassword.IUpdate":{"type":"object","description":"Password change request for a system administrator.\\n\\nApplication behavior verifies `current_password` against Prisma `community_platform_user_credentials.password_hash`. On success, it updates `password_hash` and sets `password_updated_at`. Providers may optionally revoke other sessions by updating `community_platform_sessions.revoked_at` for rows other than the current session, and optionally issue new tokens.\\n\\nSecurity requirements: This request must never accept user or actor identifiers (e.g., user_id). Credentials are sourced from the authenticated context. No plaintext passwords are stored; only secure hashes are persisted in the `community_platform_user_credentials` table.","properties":{"current_password":{"type":"string","minLength":8,"maxLength":128,"description":"Current password for the authenticated admin. Plain text input for verification; never stored in this form. Business policies typically require a minimum length (e.g., 8)."},"new_password":{"type":"string","minLength":8,"maxLength":128,"description":"New password to set for the authenticated admin. Plain text input used to compute a secure hash stored in `community_platform_user_credentials.password_hash`. Typical minimum length is 8 characters."},"revoke_other_sessions":{"type":"boolean","description":"Optional flag instructing the provider to revoke other active sessions (set `revoked_at` on other rows in `community_platform_sessions`) after password rotation."},"issue_new_tokens":{"type":"boolean","description":"Optional flag requesting immediate issuance of new access/refresh tokens for the current session after password change."}},"required":["current_password","new_password"]},"ICommunityPlatformSystemAdminEmailVerify.ISent":{"type":"object","description":"Acknowledgment that an email verification message was dispatched for the authenticated administrator account.\\n\\nThis DTO corresponds to the lifecycle of `community_platform_user_credentials.email_verified_at` in Prisma: this value remains null until the verification confirmation endpoint validates the token and sets the timestamp.\\n\\nSecurity notes: No secrets or verification tokens are returned here. Only a success indicator and timing metadata are provided.","properties":{"ok":{"type":"boolean","description":"True if the platform successfully queued or dispatched the verification email to the admin’s address from `community_platform_user_credentials.email`."},"sent_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp in UTC when the verification email was sent or queued."},"message":{"type":"string","description":"Optional human-readable message confirming email dispatch."}},"required":["ok","sent_at"]},"IESortDirection":{"oneOf":[{"const":"asc","description":"Sorting direction indicator.\n\nUse \"asc\" for ascending order and \"desc\" for descending order across list endpoints that support sorting."},{"const":"desc","description":"Sorting direction indicator.\n\nUse \"asc\" for ascending order and \"desc\" for descending order across list endpoints that support sorting."}],"description":"Sorting direction indicator.\n\nUse \"asc\" for ascending order and \"desc\" for descending order across list endpoints that support sorting."},"IECategorySortBy":{"oneOf":[{"const":"display_order","description":"Sort keys for category listings.\n\nThese values map to columns in Prisma table community_platform_categories and are safe for public ordering. Providers must apply deterministic tie-breakers when values are equal."},{"const":"name","description":"Sort keys for category listings.\n\nThese values map to columns in Prisma table community_platform_categories and are safe for public ordering. Providers must apply deterministic tie-breakers when values are equal."},{"const":"code","description":"Sort keys for category listings.\n\nThese values map to columns in Prisma table community_platform_categories and are safe for public ordering. Providers must apply deterministic tie-breakers when values are equal."},{"const":"created_at","description":"Sort keys for category listings.\n\nThese values map to columns in Prisma table community_platform_categories and are safe for public ordering. Providers must apply deterministic tie-breakers when values are equal."}],"description":"Sort keys for category listings.\n\nThese values map to columns in Prisma table community_platform_categories and are safe for public ordering. Providers must apply deterministic tie-breakers when values are equal."},"ICommunityPlatformSystemAdminEmailVerify.IRequest":{"type":"object","properties":{"token":{"type":"string","description":"Verification token issued by the platform’s messaging pipeline.\n\nThis token authorizes setting email_verified_at on the corresponding credentials row after validation. It is single-use and time-limited by policy."}},"required":["token"],"description":"Admin email verification request payload.\n\nThis DTO represents the public confirmation input used to verify an administrator’s email address. It corresponds to the flow that sets email_verified_at in Prisma table community_platform_user_credentials after token validation.\n\nSecurity note: This request accepts only the verification token and never accepts actor IDs or system-generated fields."},"ICommunityPlatformSystemAdminEmailVerify.IResponse":{"type":"object","properties":{"verified":{"type":"boolean","description":"Whether the verification request succeeded in marking the admin’s email as verified.\n\nTrue indicates the verification token was valid and the credentials record was updated accordingly."},"verified_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the email was (or had been) verified, in ISO 8601 format.\n\nNull indicates that the verification did not complete in this call (e.g., invalid/expired token), or that the address was already verified without a new change at this time."}},"required":["verified"],"description":"Confirmation response for admin email verification.\n\nThis DTO communicates the outcome of the verification process that sets email_verified_at on community_platform_user_credentials. It does not expose sensitive secrets and contains only confirmation metadata."},"ICommunityPlatformCategory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the category.\n\nPrisma: community_platform_categories.id (UUID)."},"code":{"type":"string","description":"Unique business identifier (slug-like) for the category.\n\nPrisma: community_platform_categories.code. Used in URLs, filters, and as a stable reference. Must be unique."},"name":{"type":"string","description":"Human-readable category name.\n\nPrisma: community_platform_categories.name. Must be unique to avoid ambiguity in display."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the category.\n\nPrisma: community_platform_categories.description (nullable)."},"display_order":{"type":"integer","format":"int32","description":"Ordering hint for UI presentation.\n\nPrisma: community_platform_categories.display_order (Int). Lower values appear earlier."},"active":{"type":"boolean","description":"Whether this category is currently enabled for selection and display.\n\nPrisma: community_platform_categories.active (Boolean)."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of this category record.\n\nPrisma: community_platform_categories.created_at (Timestamptz)."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of this category record.\n\nPrisma: community_platform_categories.updated_at (Timestamptz)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp; null when not deleted.\n\nPrisma: community_platform_categories.deleted_at (Timestamptz, nullable). Typically excluded from public listings by business rules."}},"required":["id","code","name","display_order","active","created_at","updated_at"],"description":"Category entity representing one row from the Prisma model community_platform_categories.\n\nThis table is the canonical list of community categories used across Explore and filtering surfaces. It carries a unique business key (code), a unique display name (name), optional description, a UI presentation order (display_order), an activation flag (active), and lifecycle timestamps. Records with a non-null deleted_at are considered removed from active views by business logic.\n\nAll properties map directly to the Prisma columns documented in the schema comments; no additional computed or actor fields are included."},"ICommunityPlatformCategory.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32","minimum":1},{"type":"null"}],"description":"Page number for pagination (1-based).\n\nDefaults to page 1 when omitted."},"limit":{"oneOf":[{"type":"integer","format":"int32","minimum":1,"maximum":1000},{"type":"null"}],"description":"Maximum number of records per page.\n\nTypical public default is 20."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Free-text search term applied to code and name.\n\nProviders may use trigram or ILIKE matching on the underlying columns."},"active":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by activation state.\n\nWhen null or omitted, providers may default to active-only in public contexts."},"sortBy":{"oneOf":[{"$ref":"#/components/schemas/IECategorySortBy"},{"type":"null"}],"description":"Sort key for ordering results. See IECategorySortBy."},"direction":{"oneOf":[{"$ref":"#/components/schemas/IESortDirection"},{"type":"null"}],"description":"Sort direction applied to the chosen sort key."},"created_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Start of created_at filtering window (ISO 8601)."},"created_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"End of created_at filtering window (ISO 8601)."}},"required":[],"description":"Request parameters for listing/searching categories (Prisma: community_platform_categories).\n\nIncludes pagination, search, activation filter, and sorting controls. Actor IDs and system-generated fields are intentionally excluded to comply with security guidance. Providers should exclude rows where deleted_at is not null by default."},"IAnyObject":{"type":"object","properties":{},"required":[],"description":"Generic empty object placeholder used solely for base IPageI<T> schema items.\n\nConcrete paginated types must override items with the exact entity schemas."},"IPageI":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/I"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageI.IPagination":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/I.IPagination"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageI.IRequest":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/I.IRequest"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IQueryDateRange":{"type":"object","properties":{"from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Inclusive lower bound (UTC, ISO 8601)."},"to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Exclusive upper bound (UTC, ISO 8601)."}},"required":[],"description":"Generic date-time range filter for list/search endpoints using ISO 8601 strings in UTC.\n\nEither bound may be null to indicate an open-ended range."},"ICommunityPlatformReservedTerm":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key.\n\nPrisma: community_platform_reserved_terms.id (UUID)."},"term":{"type":"string","description":"Original reserved term entered by an administrator.\n\nPrisma: community_platform_reserved_terms.term. Used for display and reference."},"term_normalized":{"type":"string","description":"Case-normalized form of the term for case-insensitive matching.\n\nPrisma: community_platform_reserved_terms.term_normalized. Application logic maintains this value."},"applies_to":{"type":"string","description":"Context to which this reservation applies (e.g., \"community_name\", \"global\").\n\nPrisma: community_platform_reserved_terms.applies_to."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional administrative note explaining why the term is reserved.\n\nPrisma: community_platform_reserved_terms.reason."},"active":{"type":"boolean","description":"Whether the reservation is currently enforced.\n\nPrisma: community_platform_reserved_terms.active."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of this reserved term record.\n\nPrisma: community_platform_reserved_terms.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of this reserved term record.\n\nPrisma: community_platform_reserved_terms.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp (null when active).\n\nPrisma: community_platform_reserved_terms.deleted_at. Read-only lifecycle marker used to exclude records from public views."}},"required":["id","term","term_normalized","applies_to","active","created_at","updated_at"],"description":"Reserved term entity used to block specific names/identifiers.\n\nThis schema corresponds to Prisma model community_platform_reserved_terms. It contains the original term, its normalized variant for case-insensitive uniqueness, target context via applies_to, active flag, and lifecycle timestamps. Use this type for administrative/reference views and validation tooling."},"IECommunityPlatformReservedTermOrderBy":{"oneOf":[{"const":"created_at","description":"Allowed columns for ordering community_platform_reserved_terms listings.\n\nMatches Prisma columns to support consistent administrative review and validation previews."},{"const":"term","description":"Allowed columns for ordering community_platform_reserved_terms listings.\n\nMatches Prisma columns to support consistent administrative review and validation previews."},{"const":"term_normalized","description":"Allowed columns for ordering community_platform_reserved_terms listings.\n\nMatches Prisma columns to support consistent administrative review and validation previews."},{"const":"applies_to","description":"Allowed columns for ordering community_platform_reserved_terms listings.\n\nMatches Prisma columns to support consistent administrative review and validation previews."}],"description":"Allowed columns for ordering community_platform_reserved_terms listings.\n\nMatches Prisma columns to support consistent administrative review and validation previews."},"ICommunityPlatformReservedTerm.ISort":{"type":"object","properties":{"order_by":{"$ref":"#/components/schemas/IECommunityPlatformReservedTermOrderBy","description":"Column to order reserved terms by.\n\nAllowed values map to Prisma columns on community_platform_reserved_terms: created_at, term, term_normalized, applies_to."},"order_dir":{"$ref":"#/components/schemas/IESortDirection","description":"Sort direction for the ordered column (ascending or descending)."}},"required":["order_by","order_dir"],"description":"Ordering directive for reserved term listings.\n\nPairs an allowed order_by column with an explicit order_dir to produce deterministic results."},"ICommunityPlatformReservedTerm.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number (1-based). See IPageI.IRequest for semantics."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Items per page. See IPageI.IRequest for semantics."},"query":{"oneOf":[{"type":"string","minLength":2},{"type":"null"}],"description":"Free-text search against term or term_normalized (Prisma: community_platform_reserved_terms.term, term_normalized).\n\nMinimum length 2 characters per search rules."},"applies_to":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Context filter (e.g., 'community_name', 'global').\n\nPrisma: community_platform_reserved_terms.applies_to."},"active":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by active flag. Prisma: community_platform_reserved_terms.active."},"sort_by":{"oneOf":[{"const":"created_at"},{"const":"term"},{"const":"applies_to"},{"type":"null"}],"description":"Sort key. Defaults commonly to created_at.\n\nBacked by Prisma columns created_at, term, applies_to."},"sort_dir":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction; ascending or descending."}},"required":[],"description":"Request parameters for listing/searching reserved terms (Prisma: community_platform_reserved_terms).\n\nContains safe, public filters and pagination. Does not accept actor IDs or sensitive values."},"ICommunityPlatformAppSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key.\n\nPrisma: community_platform_app_settings.id (UUID)."},"key":{"type":"string","description":"Unique configuration key.\n\nPrisma: community_platform_app_settings.key. Used programmatically to look up the setting."},"value":{"type":"string","description":"Stored value for this setting as string.\n\nPrisma: community_platform_app_settings.value. The application layer parses/validates the semantic type."},"value_type":{"type":"string","description":"Semantic type of the value (e.g., \"string\", \"int\", \"boolean\", \"duration\").\n\nPrisma: community_platform_app_settings.value_type."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional explanation of the setting’s purpose and expected format.\n\nPrisma: community_platform_app_settings.description."},"active":{"type":"boolean","description":"Whether this setting is currently effective.\n\nPrisma: community_platform_app_settings.active."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp.\n\nPrisma: community_platform_app_settings.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp.\n\nPrisma: community_platform_app_settings.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp (null when active).\n\nPrisma: community_platform_app_settings.deleted_at. Read-only lifecycle marker used to exclude records from standard listings."}},"required":["id","key","value","value_type","active","created_at","updated_at"],"description":"Application configuration entry.\n\nThis schema corresponds to Prisma model community_platform_app_settings. It defines key-value pairs controlling platform behavior, their semantic value types, optional description, active flag, and lifecycle timestamps. Intended for administrative use; clients must not assume specific parsing of the string value without consulting value_type."},"IECommunityPlatformAppSettingOrderBy":{"oneOf":[{"const":"key","description":"Ordering fields for application settings listings.\n\nMatches Prisma columns community_platform_app_settings.key, .created_at, and .updated_at. Use to control list sorting deterministically."},{"const":"created_at","description":"Ordering fields for application settings listings.\n\nMatches Prisma columns community_platform_app_settings.key, .created_at, and .updated_at. Use to control list sorting deterministically."},{"const":"updated_at","description":"Ordering fields for application settings listings.\n\nMatches Prisma columns community_platform_app_settings.key, .created_at, and .updated_at. Use to control list sorting deterministically."}],"description":"Ordering fields for application settings listings.\n\nMatches Prisma columns community_platform_app_settings.key, .created_at, and .updated_at. Use to control list sorting deterministically."},"ICommunityPlatformAppSetting.ISort":{"type":"object","properties":{"order_by":{"$ref":"#/components/schemas/IECommunityPlatformAppSettingOrderBy","description":"Column to order by: key | created_at | updated_at."},"order_dir":{"$ref":"#/components/schemas/IESortDirection","description":"Sort direction for the ordered column: asc | desc."}},"required":["order_by","order_dir"],"description":"Ordering directive for application settings listings.\n\nReferences enumerations for both the column and the direction to ensure strong typing and reusability across endpoints."},"ICommunityPlatformAppSetting.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number (1-based)."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Items per page."},"key":{"oneOf":[{"type":"string","minLength":1},{"type":"null"}],"description":"Substring match against configuration key. Prisma: community_platform_app_settings.key."},"value_type":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Semantic type filter (e.g., 'string', 'int', 'boolean', 'duration'). Prisma: community_platform_app_settings.value_type."},"active":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by active flag. Prisma: community_platform_app_settings.active."},"sort_by":{"oneOf":[{"const":"created_at"},{"const":"updated_at"},{"const":"key"},{"type":"null"}],"description":"Sort key for admin lists."},"sort_dir":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction; ascending or descending."}},"required":[],"description":"Request parameters for listing/searching app settings (Prisma: community_platform_app_settings). Admin-only usage implied by operations.\n\nNo sensitive secrets are exposed; actor identity is not accepted in the request body."},"ICommunityPlatformCommunity":{"type":"object","description":"Community entity mapped to Prisma model community_platform_communities.\n\nRepresents a public sub-community (for example, /c/ai). Fields mirror the database columns to ensure implementation compatibility. The name is immutable after creation (enforced by application logic). Ownership is tracked by community_platform_user_id (the creator/owner). Categorization uses community_platform_category_id referencing community_platform_categories. See Prisma comments for details: immutable unique name, optional description/logo/banner, activity timestamp, administrative disablement via disabled_at, and lifecycle timestamps including soft deletion via deleted_at.","properties":{"id":{"type":"string","format":"uuid","readOnly":true,"description":"Primary key of the community entity (UUID). Matches community_platform_communities.id in Prisma.\n\nThis value is system-generated and immutable."},"community_platform_user_id":{"type":"string","format":"uuid","readOnly":true,"description":"Owner account's community_platform_users.id.\n\nDerived from authentication context at creation; never client-supplied in requests."},"community_platform_category_id":{"type":"string","format":"uuid","description":"Assigned category's community_platform_categories.id.\n\nUsed to classify the community for Explore and filtering. Must reference an existing active category."},"name":{"type":"string","minLength":3,"maxLength":32,"pattern":"^[A-Za-z][A-Za-z0-9_-]{1,30}[A-Za-z0-9]$","description":"Unique immutable community identifier (3–32 chars). Allowed characters: letters, digits, hyphen (-), underscore (_). Must start with a letter and end with an alphanumeric character.\n\nPrisma column: community_platform_communities.name with @@unique([name]) and business immutability enforced at the application layer."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional human-readable description for the community.\n\nPrisma column: community_platform_communities.description (nullable)."},"logo":{"oneOf":[{"type":"string","format":"uri","maxLength":80000},{"type":"null"}],"description":"Optional logo image URI for the community.\n\nPrisma column: community_platform_communities.logo (VARCHAR(80000), nullable)."},"banner":{"oneOf":[{"type":"string","format":"uri","maxLength":80000},{"type":"null"}],"description":"Optional banner image URI for the community.\n\nPrisma column: community_platform_communities.banner (VARCHAR(80000), nullable)."},"last_active_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent activity related to the community (post/comment/join/leave).\n\nPrisma column: community_platform_communities.last_active_at. Used for display and sorting in explore views."},"disabled_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Administrative disablement timestamp. When set, new posts/comments are blocked and the community is hidden from promotion surfaces.\n\nPrisma column: community_platform_communities.disabled_at (nullable)."},"created_at":{"type":"string","format":"date-time","readOnly":true,"description":"Creation timestamp.\n\nPrisma column: community_platform_communities.created_at."},"updated_at":{"type":"string","format":"date-time","readOnly":true,"description":"Last update timestamp.\n\nPrisma column: community_platform_communities.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp. When non-null, the record is considered removed from active views.\n\nPrisma column: community_platform_communities.deleted_at (nullable)."}},"required":["id","community_platform_user_id","community_platform_category_id","name","last_active_at","created_at","updated_at"]},"ICommunityPlatformCommunity.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number (1-based)."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Items per page."},"query":{"oneOf":[{"type":"string","minLength":2},{"type":"null"}],"description":"Search by community name/description (Prisma: community_platform_communities.name, description). Minimum 2 characters."},"community_platform_category_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by category ID (UUID). Prisma: community_platform_communities.community_platform_category_id."},"category_code":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Filter by business category code (Prisma: community_platform_categories.code associated to the community via FK)."},"include_disabled":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Whether to include communities with disabled_at not null (administrative views). Prisma: community_platform_communities.disabled_at."},"sort_by":{"oneOf":[{"const":"created_at"},{"const":"last_active_at"},{"const":"name"},{"type":"null"}],"description":"Sort key for discovery/explore: created_at (Newest), last_active_at (activity), or name (alphabetical)."},"sort_dir":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction; ascending or descending."}},"required":[],"description":"Request parameters for listing/searching communities (Prisma: community_platform_communities) with pagination and safe filters.\n\nDoes not accept actor IDs; ownership checks occur at authorization level, not in request body."},"ICommunityPlatformCommunity.ICreate":{"type":"object","description":"Creation request for a community (Prisma: community_platform_communities).\n\nThe server infers ownership (community_platform_user_id) from the authenticated subject. The name is immutable after creation. Category must reference an existing community_platform_categories row. Optional presentation fields (description, logo, banner) may be supplied. System timestamps (created_at, updated_at, last_active_at) are server-managed and not accepted in this request.","properties":{"name":{"type":"string","minLength":3,"maxLength":32,"pattern":"^[A-Za-z][A-Za-z0-9_-]{1,30}[A-Za-z0-9]$","description":"Unique immutable community identifier (3–32 chars). Allowed characters: letters, digits, hyphen (-), underscore (_). Must start with a letter and end with an alphanumeric character. Maps to community_platform_communities.name."},"community_platform_category_id":{"type":"string","format":"uuid","description":"Assigned category's id (community_platform_categories.id). Must reference an existing, active category."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional description for the community. Maps to community_platform_communities.description (nullable)."},"logo":{"oneOf":[{"type":"string","format":"uri","maxLength":80000},{"type":"null"}],"description":"Optional logo image URI. Maps to community_platform_communities.logo (VARCHAR(80000))."},"banner":{"oneOf":[{"type":"string","format":"uri","maxLength":80000},{"type":"null"}],"description":"Optional banner image URI. Maps to community_platform_communities.banner (VARCHAR(80000))."}},"required":["name","community_platform_category_id"]},"ICommunityPlatformCommunity.IUpdate":{"type":"object","description":"Update request for community metadata (Prisma: community_platform_communities).\n\nOnly metadata fields are editable by the community owner. The name is immutable and deliberately excluded from this request. Ownership and server-maintained timestamps are not accepted here. Category reassignment is allowed if the target category exists and is active.","properties":{"community_platform_category_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional category reassignment to community_platform_categories.id."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional updated description."},"logo":{"oneOf":[{"type":"string","format":"uri","maxLength":80000},{"type":"null"}],"description":"Optional updated logo image URI."},"banner":{"oneOf":[{"type":"string","format":"uri","maxLength":80000},{"type":"null"}],"description":"Optional updated banner image URI."}},"required":[]},"ICommunityPlatformCommunityRule":{"type":"object","properties":{"id":{"type":"string","format":"uuid","readOnly":true,"description":"Primary key.\n\nPrisma column: community_platform_community_rules.id (UUID). This identifier is generated by the system and must not be supplied by clients."},"community_platform_community_id":{"type":"string","format":"uuid","description":"Parent community identifier.\n\nPrisma FK column: community_platform_community_rules.community_platform_community_id → community_platform_communities.id.\nThis association is enforced by server-side routing and ownership checks; clients do not change this linkage in update flows."},"order_index":{"type":"integer","minimum":0,"description":"Display order index unique within a community.\n\nPrisma column: community_platform_community_rules.order_index (Int). The application preserves deterministic ordering. Minimum 0 (implementations may treat values as 0-based or 1-based per schema comments)."},"text":{"type":"string","minLength":1,"maxLength":200,"description":"Rule text between 1 and 200 characters.\n\nPrisma column: community_platform_community_rules.text (String). Stored as-is; UI may truncate for display while preserving full text."},"created_at":{"type":"string","format":"date-time","readOnly":true,"description":"Creation timestamp (UTC).\n\nPrisma column: community_platform_community_rules.created_at (Timestamptz)."},"updated_at":{"type":"string","format":"date-time","readOnly":true,"description":"Last update timestamp (UTC).\n\nPrisma column: community_platform_community_rules.updated_at (Timestamptz)."}},"required":["id","community_platform_community_id","order_index","text","created_at","updated_at"],"description":"Community Rule entity representing an ordered, owner-authored guideline belonging to a specific community.\n\nBased on Prisma model Communities → community_platform_community_rules. Each record stores a stable order_index and short text (1–200 characters) and belongs to a parent community via community_platform_community_id. Rules are displayed in deterministic order for public presentation.\n\nSecurity and ownership: Only the community owner may create, edit, or remove rules (enforced by provider logic). The parent association is controlled by server routing; clients must not alter it."},"ICommunityPlatformCommunityRule.ICreate":{"type":"object","properties":{"order_index":{"type":"integer","minimum":0,"description":"Display order index unique within the community.\n\nRequired for creation. The application enforces uniqueness per community."},"text":{"type":"string","minLength":1,"maxLength":200,"description":"Rule text between 1 and 200 characters.\n\nPlain text only; UI may truncate for display but stored text remains intact."}},"required":["order_index","text"],"description":"Creation payload for a Community Rule.\n\nSecurity: Do not accept parent or actor identifiers in the body. The parent community comes from the path parameter; authorship/ownership is validated from authentication context. System-managed fields (id, created_at, updated_at, deleted_at) are excluded from client input."},"ICommunityPlatformCommunityRule.IUpdate":{"type":"object","properties":{"order_index":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Updated display order index unique within the community.\n\nOptional. Must remain unique per community."},"text":{"oneOf":[{"type":"string","minLength":1,"maxLength":200},{"type":"null"}],"description":"Updated rule text between 1 and 200 characters.\n\nOptional. Plain text only; UI may truncate visually."}},"required":[],"description":"Update payload for a Community Rule.\n\nAll fields are optional (Partial<T>) and only editable properties are present. Immutable/ownership fields (id, community_platform_community_id, created_at, updated_at) are excluded. Security: Do not accept actor IDs; parent community comes from path and server context."},"ICommunityPlatformCommunityRule.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number (uint32 semantics). Optional. When null or omitted, server uses default paging."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page size/limit (uint32 semantics). Optional. Default: 20 when null or omitted."},"orderBy":{"$ref":"#/components/schemas/IECommunityPlatformCommunityRuleOrderBy","description":"Sort key for listing rule items. Defaults to order_index when omitted."},"direction":{"$ref":"#/components/schemas/IESortDirection","description":"Sort direction for ordering results. Defaults depend on orderBy (asc for order_index; desc for created_at/updated_at)."},"search":{"oneOf":[{"type":"string","minLength":2},{"type":"null"}],"description":"Optional free-text search over rule text. Minimum length 2 is required to execute search per platform standards."}},"required":[],"description":"Request parameters for listing/searching community rules of a specific community.\n\nPagination and sorting fields align with platform list conventions. The parent community is provided by the path parameter and must not be included here. Records with deleted_at not null are excluded by default business rules."},"ICommunityPlatformCommunityRule.IEOrderBy":{"oneOf":[{"const":"order_index","description":"Allowed sort keys for Community Rule listings.\n\n- order_index: Deterministic display order within a community\n- created_at: Creation time (Newest semantics)\n- updated_at: Last modified time"},{"const":"created_at","description":"Allowed sort keys for Community Rule listings.\n\n- order_index: Deterministic display order within a community\n- created_at: Creation time (Newest semantics)\n- updated_at: Last modified time"},{"const":"updated_at","description":"Allowed sort keys for Community Rule listings.\n\n- order_index: Deterministic display order within a community\n- created_at: Creation time (Newest semantics)\n- updated_at: Last modified time"},{"const":"","description":"Allowed sort keys for Community Rule listings.\n\n- order_index: Deterministic display order within a community\n- created_at: Creation time (Newest semantics)\n- updated_at: Last modified time"}],"description":"Allowed sort keys for Community Rule listings.\n\n- order_index: Deterministic display order within a community\n- created_at: Creation time (Newest semantics)\n- updated_at: Last modified time"},"ICommunityPlatformCommunityMembership":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key.\n\nPrisma: community_platform_community_memberships.id"},"community_platform_community_id":{"type":"string","format":"uuid","description":"Joined community identifier.\n\nPrisma: community_platform_community_memberships.community_platform_community_id"},"community_platform_user_id":{"type":"string","format":"uuid","description":"Member user identifier.\n\nPrisma: community_platform_community_memberships.community_platform_user_id"},"created_at":{"type":"string","format":"date-time","description":"Membership creation timestamp (join time).\n\nPrisma: created_at"},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for this membership row.\n\nPrisma: updated_at"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp (leave time). Null when active.\n\nPrisma: deleted_at"}},"required":["id","community_platform_community_id","community_platform_user_id","created_at","updated_at"],"description":"Community membership record linking a user to a community.\n\nBased on Prisma table community_platform_community_memberships. Tracks join time (created_at), last update, and optional leave time (deleted_at). Used for rosters, personalization (Home feed inclusion), and join/leave history. Ownership is server-controlled; clients never provide actor IDs in request bodies."},"ICommunityPlatformCommunityMembership.ICreate":{"type":"object","properties":{},"required":[],"description":"Creation body for joining a community.\n\nSecurity: The server infers the acting user from authentication context and the target community from the path parameter. Clients must not send actor IDs, record IDs, or timestamps."},"ICommunityPlatformCommunityMembership.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number (1-based)."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Items per page."},"include_ended":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Include logically ended memberships (deleted_at not null). Prisma: community_platform_community_memberships.deleted_at."},"created_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter memberships created at or after this timestamp. Prisma: community_platform_community_memberships.created_at."},"created_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter memberships created at or before this timestamp. Prisma: community_platform_community_memberships.created_at."},"sort_by":{"oneOf":[{"const":"created_at"},{"const":"updated_at"},{"type":"null"}],"description":"Sort key for roster listings."},"sort_dir":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction; ascending or descending."}},"required":[],"description":"Request parameters for listing memberships of a community (Prisma: community_platform_community_memberships).\n\nSecurity: Does not accept actor IDs directly. Ownership/privilege is enforced by route scoping and auth, not by body fields."},"ICommunityPlatformPost.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number to request (page-based pagination)."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Maximum number of records per page. Typical default is 20 for feeds and searches."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Free-text query matching words in post title and body. Business rule: when provided, require length ≥ 2 characters."},"sort":{"oneOf":[{"const":"newest","description":"Sort mode.\n- newest: order by created_at DESC with stable tie-breaker by larger identifier\n- top: order by score (up − down) DESC; ties by newer created_at, then larger identifier"},{"const":"top","description":"Sort mode.\n- newest: order by created_at DESC with stable tie-breaker by larger identifier\n- top: order by score (up − down) DESC; ties by newer created_at, then larger identifier"}],"description":"Sort mode.\n- newest: order by created_at DESC with stable tie-breaker by larger identifier\n- top: order by score (up − down) DESC; ties by newer created_at, then larger identifier"},"community_id":{"type":"string","format":"uuid","description":"Optional community scope filter (community_platform_communities.id)."},"created_from":{"type":"string","format":"date-time","description":"Filter: include posts created on/after this timestamp (UTC, ISO 8601)."},"created_to":{"type":"string","format":"date-time","description":"Filter: include posts created on/before this timestamp (UTC, ISO 8601)."},"my_posts_only":{"type":"boolean","description":"When true, return only posts authored by the authenticated caller without accepting an explicit author ID (prevents actor ID injection)."},"exclude_disabled_communities":{"type":"boolean","description":"When true (default in most reads), exclude posts from communities with disabled_at set."}},"required":[],"description":"List/search request for posts with canonical sorting and filters.\n\nPrisma reference: community_platform_posts (title/body trigram indexes), community_platform_post_votes (score for Top sorting). Security: no actor IDs allowed in request; use my_posts_only to scope results to the caller."},"ICommunityPlatformPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the post.\n\nPrisma: community_platform_posts.id (UUID). System-generated and immutable."},"community_platform_community_id":{"type":"string","format":"uuid","description":"Parent community identifier.\n\nPrisma: community_platform_posts.community_platform_community_id (UUID)."},"author_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Author account identifier (nullable for anonymization).\n\nPrisma: community_platform_posts.author_user_id (UUID, nullable)."},"title":{"type":"string","minLength":5,"maxLength":120,"description":"Post title (5–120 chars).\n\nPrisma: community_platform_posts.title."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"Post body (plain text, 10–10,000 chars).\n\nPrisma: community_platform_posts.body."},"author_display_name":{"oneOf":[{"type":"string","minLength":0,"maxLength":32},{"type":"null"}],"description":"Optional author display name (0–32 chars).\n\nPrisma: community_platform_posts.author_display_name (nullable)."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (UTC, ISO 8601).\n\nPrisma: community_platform_posts.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp (UTC, ISO 8601).\n\nPrisma: community_platform_posts.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp (nullable).\n\nPrisma: community_platform_posts.deleted_at."}},"required":["id","community_platform_community_id","title","body","created_at","updated_at"],"description":"Post entity representing text-only content in a community.\n\nMaps to Prisma model community_platform_posts. Exposes public-safe properties and lifecycle timestamps. Voting and comments are separate entities."},"ICommunityPlatformPost.ICreate":{"type":"object","properties":{"community_platform_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Target community ID (UUID). Required for global composer; ignored for community-scoped routes where path provides the community."},"title":{"type":"string","minLength":5,"maxLength":120,"description":"Title for the new post (5–120 chars)."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"Body content (plain text, 10–10,000 chars)."},"author_display_name":{"oneOf":[{"type":"string","minLength":0,"maxLength":32},{"type":"null"}],"description":"Optional author display name (0–32 chars)."}},"required":["title","body"],"description":"Create request for community_platform_posts.\n\nSecurity: author is inferred from authentication; do not accept user IDs."},"ICommunityPlatformPost.IUpdate":{"type":"object","properties":{"title":{"type":"string","minLength":5,"maxLength":120,"description":"Updated title (5–120 chars)."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"Updated body (plain text, 10–10,000 chars)."},"author_display_name":{"oneOf":[{"type":"string","minLength":0,"maxLength":32},{"type":"null"}],"description":"Updated author display name (0–32 chars; null/empty implies default)."}},"required":[],"description":"Update request for mutable post fields.\n\nImmutable: community_platform_community_id, author_user_id, system timestamps."},"ICommunityPlatformPostVote.IUpdate":{"type":"object","properties":{"state":{"$ref":"#/components/schemas/IEPostVoteState","description":"Desired vote state for the target post (\"up\" | \"down\"). Use DELETE to clear the vote (None)."}},"required":["state"],"description":"Set or change the caller’s vote on a post.\n\nPrisma: community_platform_post_votes stores one record per (user, post). Security: authenticated users only; self-votes are forbidden per business rules."},"ICommunityPlatformPostVote.IState":{"oneOf":[{"const":"up","description":"Canonical voting state for post votes.\n\nThis enumeration mirrors application guidance in Prisma for community_platform_post_votes.state, recommending lower-case values aligned with comment votes. Allowed values:\n- \"up\": Upvote\n- \"down\": Downvote"},{"const":"down","description":"Canonical voting state for post votes.\n\nThis enumeration mirrors application guidance in Prisma for community_platform_post_votes.state, recommending lower-case values aligned with comment votes. Allowed values:\n- \"up\": Upvote\n- \"down\": Downvote"}],"description":"Canonical voting state for post votes.\n\nThis enumeration mirrors application guidance in Prisma for community_platform_post_votes.state, recommending lower-case values aligned with comment votes. Allowed values:\n- \"up\": Upvote\n- \"down\": Downvote"},"ICommunityPlatformComment.ISort":{"const":"Newest","description":"Sort order for comment collections.\n\nPer business rules and Prisma commentary for comments, collections are ordered by Newest (created_at descending with deterministic tie-breakers by identifier when timestamps match)."},"ICommunityPlatformPostVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) of the vote record.\n\nPrisma: community_platform_post_votes.id"},"community_platform_post_id":{"type":"string","format":"uuid","description":"Target post identifier (UUID).\n\nPrisma: community_platform_post_votes.community_platform_post_id → references community_platform_posts.id"},"community_platform_user_id":{"type":"string","format":"uuid","description":"Voter user's identifier (UUID).\n\nPrisma: community_platform_post_votes.community_platform_user_id → references community_platform_users.id"},"state":{"$ref":"#/components/schemas/ICommunityPlatformPostVote.IState","description":"Current voting state for this (post, user) pair.\n\nPrisma: community_platform_post_votes.state — recommended values are lower-case \"up\" | \"down\"; the \"None\" state is represented by absence of a row."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of this vote record (UTC).\n\nPrisma: community_platform_post_votes.created_at"},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of this vote record (UTC).\n\nPrisma: community_platform_post_votes.updated_at"}},"required":["id","community_platform_post_id","community_platform_user_id","state","created_at","updated_at"],"description":"Post vote entity corresponding to Prisma table community_platform_post_votes.\n\nEach record captures a single user's current vote for a specific post. The response type intentionally omits internal lifecycle fields such as deleted_at from public exposure, consistent with security guidance."},"ICommunityPlatformComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key (UUID) of the comment.\n\nPrisma: community_platform_comments.id"},"community_platform_post_id":{"type":"string","format":"uuid","description":"Container post identifier (UUID) to which this comment belongs.\n\nPrisma: community_platform_comments.community_platform_post_id → references community_platform_posts.id"},"community_platform_user_id":{"type":"string","format":"uuid","description":"Author user's identifier (UUID) who created this comment.\n\nPrisma: community_platform_comments.community_platform_user_id → references community_platform_users.id"},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional parent comment identifier (UUID) for nested threading.\n\nNull indicates a top-level comment.\n\nPrisma: community_platform_comments.parent_id (self-reference)."},"content":{"type":"string","minLength":2,"maxLength":2000,"description":"Plain-text body of the comment.\n\nBusiness constraints from Prisma schema comments: 2–2,000 characters; plain text with line breaks only (no scripts or executable code).\n\nPrisma: community_platform_comments.content"},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the comment (UTC).\n\nPrisma: community_platform_comments.created_at"},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of the comment (UTC).\n\nPrisma: community_platform_comments.updated_at"}},"required":["id","community_platform_post_id","community_platform_user_id","content","created_at","updated_at"],"description":"Comment entity mapped to Prisma table community_platform_comments.\n\nRepresents a user-authored comment that belongs to a post and may optionally reply to another comment. This type excludes internal lifecycle fields (e.g., deleted_at) from public responses."},"ICommunityPlatformComment.ICreate":{"type":"object","properties":{"content":{"type":"string","minLength":2,"maxLength":2000,"description":"Plain-text comment content.\n\nBusiness constraints per Prisma commentary: 2–2,000 characters; line breaks allowed; no scripts/executable code."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional parent comment identifier (UUID) when creating a reply.\n\nNull or omission indicates a top-level comment under the target post path context."}},"required":["content"],"description":"Request body for creating a comment.\n\nSecurity note: Actor identity (author user) and container context (post or parent comment via path) are derived from authentication and route parameters. Do not supply user IDs in requests."},"ICommunityPlatformComment.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Page number for pagination (uint32 semantics)."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Number of records per page (uint32 semantics). Default is 20 by business rules."},"query":{"type":"string","minLength":2,"description":"Free-text search query against comment content. Must be at least 2 characters to execute search (per business rules)."},"post_id":{"type":"string","format":"uuid","description":"Optional post scope filter (UUID of community_platform_posts.id)."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional parent comment filter to fetch replies of a given parent."},"top_level_only":{"type":"boolean","description":"When true, include only top-level comments (parent_id = null)."},"since":{"type":"string","format":"date-time","description":"Filter for comments created at or after this timestamp (UTC)."},"until":{"type":"string","format":"date-time","description":"Filter for comments created at or before this timestamp (UTC)."},"sort":{"$ref":"#/components/schemas/IECommunityPlatformCommentSort","description":"Sorting strategy for returned comments. Comments use Newest ordering by specification."}},"required":[],"description":"Request parameters for listing/searching comments.\n\nNotes:\n- Avoid direct actor/user ID filters in request bodies per security guidance; use scope-specific endpoints or boolean flags when needed.\n- Sorting uses the canonical Newest definition for comments: created_at DESC with deterministic tie-breakers by identifier.\n- Pagination defaults target 20 items per page unless otherwise configured."},"ICommunityPlatformComment.IUpdate":{"type":"object","properties":{"content":{"type":"string","minLength":2,"maxLength":2000,"description":"New plain-text content for the comment.\n\nPrisma: community_platform_comments.content — business rule 2–2,000 characters; plain text with line breaks only."}},"required":[],"description":"Request body to update a comment’s editable fields.\n\nSecurity: Only the author may perform this edit per business rules. Do not allow changing ownership or relational identifiers (post/user/parent). All fields are optional for partial updates."},"IECommunityPlatformCommentVoteState":{"oneOf":[{"const":"Upvote","description":"Voting state for a user's comment vote.\n\nPrisma column: community_platform_comment_votes.state. The application uses \"Upvote\" and \"Downvote\" as canonical values. The \"None\" state is represented by absence of an active record (or a record with deleted_at set)."},{"const":"Downvote","description":"Voting state for a user's comment vote.\n\nPrisma column: community_platform_comment_votes.state. The application uses \"Upvote\" and \"Downvote\" as canonical values. The \"None\" state is represented by absence of an active record (or a record with deleted_at set)."}],"description":"Voting state for a user's comment vote.\n\nPrisma column: community_platform_comment_votes.state. The application uses \"Upvote\" and \"Downvote\" as canonical values. The \"None\" state is represented by absence of an active record (or a record with deleted_at set)."},"ICommunityPlatformCommentVote.IUpdate":{"type":"object","properties":{"state":{"$ref":"#/components/schemas/IECommunityPlatformCommentVoteState","description":"Desired vote state to apply for the current user on the target comment.\n\nAccepted values are strictly \"Upvote\" or \"Downvote\" as per Prisma `community_platform_comment_votes.state`."}},"required":["state"],"description":"Request payload to set the caller's vote state on a comment.\n\nMaps to Prisma `community_platform_comment_votes` where one active row per (comment, user) reflects the current `state`. Security: actor is inferred from authentication; do not accept user IDs in requests."},"ICommunityPlatformCommentVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the vote record.\n\nPrisma: community_platform_comment_votes.id"},"community_platform_comment_id":{"type":"string","format":"uuid","description":"Target comment identifier.\n\nPrisma: community_platform_comment_votes.community_platform_comment_id → community_platform_comments.id"},"community_platform_user_id":{"type":"string","format":"uuid","description":"Voter user identifier (author of the vote).\n\nPrisma: community_platform_comment_votes.community_platform_user_id → community_platform_users.id"},"state":{"$ref":"#/components/schemas/IECommunityPlatformCommentVoteState","description":"Current vote state for this (comment, user) pair.\n\nPrisma: community_platform_comment_votes.state"},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (UTC).\n\nPrisma: community_platform_comment_votes.created_at"},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp (UTC).\n\nPrisma: community_platform_comment_votes.updated_at"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp. Null when active.\n\nPrisma: community_platform_comment_votes.deleted_at"}},"required":["id","community_platform_comment_id","community_platform_user_id","state","created_at","updated_at"],"description":"Comment vote entity suitable for response payloads.\n\nExposes identifiers, vote state, and lifecycle timestamps as described by Prisma community_platform_comment_votes. Contains no sensitive credential or token fields."},"ICommunityPlatformPostSnapshot.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination.\n\nDefaults follow platform pagination practices (first page = 1)."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Maximum number of items per page (1–200). Default commonly 20."},"orderBy":{"$ref":"#/components/schemas/IEPostSnapshotOrderBy","description":"Column to sort snapshots by. Default is created_at for chronological history views."},"direction":{"$ref":"#/components/schemas/IEOrderDirection","description":"Sort direction (ascending or descending). Default desc for newest-first history."},"created_from":{"type":"string","format":"date-time","description":"Filter snapshots with created_at ≥ this timestamp (UTC). Optional."},"created_to":{"type":"string","format":"date-time","description":"Filter snapshots with created_at ≤ this timestamp (UTC). Optional."}},"required":[],"description":"Request parameters for listing post snapshots (community_platform_post_snapshots).\n\nSupports standard pagination (page, limit), ordering (orderBy, direction), and optional created_at range filters (created_from/created_to). Parent post identifier comes from the path parameter and is not duplicated here.\n\nSecurity: No actor identifiers accepted; authentication context is derived from middleware."},"IEOrderDirection":{"oneOf":[{"const":"asc","description":"Sort direction enumeration for request DTOs.\n\nValues:\n- asc: ascending order\n- desc: descending order\n\nUsed by request schemas requiring direction selection."},{"const":"desc","description":"Sort direction enumeration for request DTOs.\n\nValues:\n- asc: ascending order\n- desc: descending order\n\nUsed by request schemas requiring direction selection."}],"description":"Sort direction enumeration for request DTOs.\n\nValues:\n- asc: ascending order\n- desc: descending order\n\nUsed by request schemas requiring direction selection."},"IECommentSnapshotOrderBy":{"oneOf":[{"const":"created_at","description":"Ordering keys for listing comment snapshots.\n\n- created_at: order by snapshot creation timestamp\n- id: deterministic fallback by identifier\n\nUsed by ICommunityPlatformCommentSnapshot.IRequest.orderBy."},{"const":"id","description":"Ordering keys for listing comment snapshots.\n\n- created_at: order by snapshot creation timestamp\n- id: deterministic fallback by identifier\n\nUsed by ICommunityPlatformCommentSnapshot.IRequest.orderBy."}],"description":"Ordering keys for listing comment snapshots.\n\n- created_at: order by snapshot creation timestamp\n- id: deterministic fallback by identifier\n\nUsed by ICommunityPlatformCommentSnapshot.IRequest.orderBy."},"ICommunityPlatformPostSnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the post snapshot.\n\nPrisma column: community_platform_post_snapshots.id"},"community_platform_post_id":{"type":"string","format":"uuid","description":"Identifier of the source post this snapshot belongs to.\n\nPrisma column: community_platform_post_snapshots.community_platform_post_id"},"editor_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional editor user who created this snapshot if different from the author.\n\nPrisma column: community_platform_post_snapshots.editor_user_id"},"title":{"type":"string","minLength":5,"maxLength":120,"description":"Snapshot of the post title at the time of change.\n\nBusiness rule from PRD: titles are 5–120 characters (application-level validation). The snapshot preserves whatever was saved at that time.\n\nPrisma column: community_platform_post_snapshots.title"},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"Snapshot of the post body (plain text with line breaks only) at the time of change.\n\nBusiness rule from PRD: bodies are 10–10,000 characters and plain text (application-level validation). The snapshot preserves the state recorded at edit time.\n\nPrisma column: community_platform_post_snapshots.body"},"author_display_name":{"oneOf":[{"type":"string","maxLength":32},{"type":"null"}],"description":"Snapshot of the author’s display name used for presentation at the time of change.\n\nBusiness rule from PRD: 0–32 characters; empty implies display defaults such as \"Anonymous\".\n\nPrisma column: community_platform_post_snapshots.author_display_name"},"created_at":{"type":"string","format":"date-time","description":"Snapshot creation timestamp representing the point-in-time state.\n\nPrisma column: community_platform_post_snapshots.created_at"},"updated_at":{"type":"string","format":"date-time","description":"Administrative last update timestamp for the snapshot record.\n\nPrisma column: community_platform_post_snapshots.updated_at"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for the snapshot record. Null when active.\n\nPrisma column: community_platform_post_snapshots.deleted_at"}},"required":["id","community_platform_post_id","title","body","created_at","updated_at"],"description":"Post snapshot entity capturing historical, point-in-time versions of a post’s mutable fields (title, body, author_display_name).\n\nThis schema mirrors the Prisma model community_platform_post_snapshots. Each record references the source post (community_platform_post_id) and optionally an editor user (editor_user_id). It preserves edit history for auditing and review. The snapshot is append-only in practice per model commentary.\n\nSecurity note: This type is safe for responses; it contains no secrets or credential material. Timestamps use ISO 8601 date-time format (UTC)."},"ICommunityPlatformCommentSnapshot":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the comment snapshot.\n\nPrisma column: community_platform_comment_snapshots.id"},"community_platform_comment_id":{"type":"string","format":"uuid","description":"Identifier of the source comment this snapshot belongs to.\n\nPrisma column: community_platform_comment_snapshots.community_platform_comment_id"},"content":{"type":"string","minLength":2,"maxLength":2000,"description":"Point-in-time plain-text content captured by the snapshot.\n\nBusiness rule from PRD: comments are 2–2,000 characters and plain text.\n\nPrisma column: community_platform_comment_snapshots.content"},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Parent comment identifier captured at snapshot time (if any). Historical value; may not match current thread structure.\n\nPrisma column: community_platform_comment_snapshots.parent_id"},"created_at":{"type":"string","format":"date-time","description":"Snapshot creation timestamp (represents the content’s timepoint).\n\nPrisma column: community_platform_comment_snapshots.created_at"},"updated_at":{"type":"string","format":"date-time","description":"Administrative update timestamp for the snapshot record (typically equals created_at as snapshots are append-only).\n\nPrisma column: community_platform_comment_snapshots.updated_at"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for the snapshot record. Null when active.\n\nPrisma column: community_platform_comment_snapshots.deleted_at"}},"required":["id","community_platform_comment_id","content","created_at","updated_at"],"description":"Comment snapshot entity capturing point-in-time versions of a comment’s content and parent linkage.\n\nThis schema corresponds to Prisma model community_platform_comment_snapshots. Each record references the source comment and stores the exact content and parent_id at the moment of change. The table is append-oriented and supports audit/history views.\n\nSecurity note: Response-safe; contains no secret or credential properties."},"ICommunityPlatformCommentSnapshot.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination.\n\nDefault aligns with platform pagination practices (e.g., first page = 1)."},"limit":{"type":"integer","minimum":1,"maximum":200,"description":"Maximum number of items per page (1–200).\n\nBusiness default for history views is commonly 20."},"orderBy":{"$ref":"#/components/schemas/IECommentSnapshotOrderBy","description":"Column to sort snapshots by. Default is created_at for chronological history views."},"direction":{"$ref":"#/components/schemas/IEOrderDirection","description":"Sort direction (ascending or descending). Default is desc for newest-first history."},"created_from":{"type":"string","format":"date-time","description":"Filter snapshots with created_at greater than or equal to this timestamp (UTC). Optional."},"created_to":{"type":"string","format":"date-time","description":"Filter snapshots with created_at less than or equal to this timestamp (UTC). Optional."}},"required":[],"description":"Request parameters for listing comment snapshots.\n\nThis request type is used by history/list endpoints to page through community_platform_comment_snapshots. It supports standard pagination (page, limit), ordering (orderBy, direction), and optional created_at range filters (created_from/created_to). The parent resource identifier is provided by the path parameter in API operations and is therefore not repeated here.\n\nSecurity note: This is a request DTO only and does not accept actor/user identifiers; the authenticated context is derived from session middleware per platform security rules."},"ICommunityPlatformUserProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the profile row.\n\nPrisma: community_platform_user_profiles.id."},"community_platform_user_id":{"type":"string","format":"uuid","description":"Owner user’s identifier.\n\nPrisma: community_platform_user_profiles.community_platform_user_id referencing community_platform_users.id."},"display_name":{"oneOf":[{"type":"string","maxLength":32},{"type":"null"}],"description":"Optional public display name (0–32 chars). When null/empty, clients may use a neutral label (e.g., \"Anonymous\").\n\nPrisma: community_platform_user_profiles.display_name."},"bio":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional short biography or introduction text.\n\nPrisma: community_platform_user_profiles.bio."},"avatar_uri":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"Optional avatar image URI.\n\nPrisma: community_platform_user_profiles.avatar_uri (stored as VarChar)."},"locale":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Preferred locale tag (e.g., en-US).\n\nPrisma: community_platform_user_profiles.locale."},"timezone":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Preferred IANA timezone (e.g., Asia/Seoul).\n\nPrisma: community_platform_user_profiles.timezone."},"created_at":{"type":"string","format":"date-time","description":"Profile creation timestamp (UTC, ISO 8601).\n\nPrisma: community_platform_user_profiles.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Profile last update timestamp (UTC, ISO 8601).\n\nPrisma: community_platform_user_profiles.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for the profile. Null when active.\n\nPrisma: community_platform_user_profiles.deleted_at."}},"required":["id","community_platform_user_id","created_at","updated_at"],"description":"User profile entity for public presentation based on Prisma model community_platform_user_profiles.\n\nIncludes display preferences (display_name, avatar_uri, locale, timezone), lifecycle timestamps, and soft deletion marker. This schema is complete with respect to Prisma columns and excludes any authentication secrets."},"IERecentCommunityOrderBy":{"oneOf":[{"const":"last_activity_at","description":"Sort fields supported by ICommunityPlatformRecentCommunity.IRequest.\n\nValues correspond to Prisma columns in community_platform_recent_communities: last_activity_at, created_at, and updated_at."},{"const":"created_at","description":"Sort fields supported by ICommunityPlatformRecentCommunity.IRequest.\n\nValues correspond to Prisma columns in community_platform_recent_communities: last_activity_at, created_at, and updated_at."},{"const":"updated_at","description":"Sort fields supported by ICommunityPlatformRecentCommunity.IRequest.\n\nValues correspond to Prisma columns in community_platform_recent_communities: last_activity_at, created_at, and updated_at."}],"description":"Sort fields supported by ICommunityPlatformRecentCommunity.IRequest.\n\nValues correspond to Prisma columns in community_platform_recent_communities: last_activity_at, created_at, and updated_at."},"ICommunityPlatformRecentCommunity.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination (>= 1)."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Maximum number of records per page (>= 1)."},"orderBy":{"oneOf":[{"$ref":"#/components/schemas/IECommunityPlatformRecentCommunityOrderBy"},{"type":"null"}],"description":"Primary sort field; defaults to last_activity_at when unspecified."},"direction":{"oneOf":[{"$ref":"#/components/schemas/IESortDirection"},{"type":"null"}],"description":"Sort direction for the selected orderBy; defaults to desc."},"from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter: include records with last_activity_at on/after this timestamp (UTC, ISO 8601)."},"to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter: include records with last_activity_at on/before this timestamp (UTC, ISO 8601)."}},"required":[],"description":"Request parameters for listing a user’s recent communities from Prisma table community_platform_recent_communities.\n\nIncludes pagination, sorting (by last_activity_at/created_at/updated_at), and optional date range filters. Actor identity is derived from authentication context; user IDs are not accepted in this request body."},"IEAdminActionOrderBy":{"oneOf":[{"const":"created_at","description":"Allowed order-by fields for administrative action listings.\n\nThese map to columns in community_platform_admin_actions and enable predictable sorting in review tools."},{"const":"action","description":"Allowed order-by fields for administrative action listings.\n\nThese map to columns in community_platform_admin_actions and enable predictable sorting in review tools."},{"const":"actor_user_id","description":"Allowed order-by fields for administrative action listings.\n\nThese map to columns in community_platform_admin_actions and enable predictable sorting in review tools."}],"description":"Allowed order-by fields for administrative action listings.\n\nThese map to columns in community_platform_admin_actions and enable predictable sorting in review tools."},"ICommunityPlatformAdminAction.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination (>= 1)."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Maximum number of records per page (>= 1)."},"actor_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by administrator actor (community_platform_admin_actions.actor_user_id)."},"target_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by target community (community_platform_admin_actions.target_community_id)."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by target post (community_platform_admin_actions.target_post_id)."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by target comment (community_platform_admin_actions.target_comment_id)."},"actions":{"oneOf":[{"type":"array","items":{"type":"string"}},{"type":"null"}],"description":"Filter by a set of canonical action keys (e.g., [\"disable_community\", \"delete_post\"])."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Free-text search across reason and client metadata (implementation-defined), aiding investigative triage."},"orderBy":{"oneOf":[{"$ref":"#/components/schemas/IECommunityPlatformAdminActionOrderBy"},{"type":"null"}],"description":"Sort field; defaults to created_at."},"direction":{"oneOf":[{"$ref":"#/components/schemas/IESortDirection"},{"type":"null"}],"description":"Sort direction; defaults to desc."},"from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Created_at lower bound (UTC, ISO 8601)."},"to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Created_at upper bound (UTC, ISO 8601)."}},"required":[],"description":"Administrative list request for community_platform_admin_actions.\n\nProvides pagination, filtering by actor/targets/action keys, free-text search, and ordering controls. Intended for systemAdmin-only access per platform security requirements. Actor identity is taken from the authenticated context; this filter is used only for investigative queries, not for asserting actor identity."},"ICommunityPlatformAdminAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the administrative action record.\n\nBacked by community_platform_admin_actions.id (UUID primary key)."},"actor_user_id":{"type":"string","format":"uuid","description":"Administrator user who performed the action.\n\nMaps to community_platform_admin_actions.actor_user_id referencing community_platform_users.id."},"target_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional target community id.\n\nCorresponds to community_platform_admin_actions.target_community_id referencing community_platform_communities.id."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional target post id.\n\nCorresponds to community_platform_admin_actions.target_post_id referencing community_platform_posts.id."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional target comment id.\n\nCorresponds to community_platform_admin_actions.target_comment_id referencing community_platform_comments.id."},"action":{"type":"string","description":"Canonical action key describing the policy operation performed (e.g., \"disable_community\", \"delete_post\", \"remove_comment\").\n\nBacked by community_platform_admin_actions.action. Used for classification and analytics."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional free-text reason or policy note explaining the action context.\n\nMaps to community_platform_admin_actions.reason."},"ip":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional IP address observed for the actor’s session at action time.\n\nBacked by community_platform_admin_actions.ip. Stored as string without strict IP validation to preserve original format."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional user agent string observed for the actor’s session at action time.\n\nBacked by community_platform_admin_actions.user_agent."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin action snapshot was recorded (UTC, ISO 8601).\n\nMaps to community_platform_admin_actions.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Administrative timestamp for the snapshot record (UTC, ISO 8601).\n\nMaps to community_platform_admin_actions.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp when the entry was logically removed from active views.\n\nPrisma: community_platform_admin_actions.deleted_at (nullable)."}},"required":["id","actor_user_id","action","created_at","updated_at"],"description":"Administrative action snapshot entity mirrored from Prisma model community_platform_admin_actions.\n\nCaptures immutable audit details about policy enforcement events, including the performing administrator, optional target resources, canonical action key, contextual metadata, and lifecycle timestamps. Designed for read operations in admin consoles and investigative tooling, with no exposure of authentication secrets."},"ICommunityPlatformAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the audit record.\n\nMaps to community_platform_audit_logs.id (UUID)."},"actor_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Authenticated actor who triggered the event, when applicable.\n\nPrisma: community_platform_audit_logs.actor_user_id (nullable UUID)."},"session_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Correlated application session for the event, if tracked.\n\nPrisma: community_platform_audit_logs.session_id (nullable UUID)."},"guestvisitor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Guest visitor identity for unauthenticated events.\n\nPrisma: community_platform_audit_logs.guestvisitor_id (nullable UUID)."},"community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Related community for the event, if applicable.\n\nPrisma: community_platform_audit_logs.community_id (nullable UUID)."},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Related post for the event, if applicable.\n\nPrisma: community_platform_audit_logs.post_id (nullable UUID)."},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Related comment for the event, if applicable.\n\nPrisma: community_platform_audit_logs.comment_id (nullable UUID)."},"membership_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Related community membership (join/leave) for the event, if applicable.\n\nPrisma: community_platform_audit_logs.membership_id (nullable UUID)."},"event_type":{"type":"string","description":"Canonical event type key (e.g., \"join_community\", \"leave_community\", \"post_created\", \"comment_deleted\", \"vote_toggled\", \"login\", \"logout\").\n\nPrisma: community_platform_audit_logs.event_type."},"success":{"type":"boolean","description":"Outcome of the attempted event. true for success, false for failure.\n\nPrisma: community_platform_audit_logs.success."},"details":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional free-text details providing context such as validation messages or policy notes.\n\nPrisma: community_platform_audit_logs.details (nullable)."},"ip":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Observed IP address for the actor’s session/request, recorded for security and forensics.\n\nPrisma: community_platform_audit_logs.ip (nullable)."},"user_agent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Observed user-agent string for the client at event time.\n\nPrisma: community_platform_audit_logs.user_agent (nullable)."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp when the audit log entry was recorded (UTC).\n\nPrisma: community_platform_audit_logs.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Administrative timestamp for the record (typically equal to created_at in append-only usage).\n\nPrisma: community_platform_audit_logs.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp when this entry was logically removed from active views.\n\nPrisma: community_platform_audit_logs.deleted_at (nullable)."}},"required":["id","event_type","success","created_at","updated_at"],"description":"Administrative audit trail entry reflecting significant user/system events.\n\nThis schema represents the community_platform_audit_logs table from the Audits namespace. It captures actor identity references, optional resource targets, event classification, success flag, request metadata (IP and user agent), and lifecycle timestamps. As noted in the Prisma comments, records are append-only snapshots for investigations and compliance.\n\nRelationships include optional links to users, sessions, guest visitors, communities, posts, comments, and memberships via nullable UUIDs. Items with deleted_at should be considered logically removed from active views."},"ICommunityPlatformAuditLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination.\n\nDefault behavior targets standard page-based navigation (>= 1)."},"limit":{"type":"integer","minimum":1,"description":"Maximum number of records per page.\n\nBusiness defaults typically use 20–100 depending on UI needs."},"me_only":{"type":"boolean","description":"Filter results to the authenticated actor only (no direct actor IDs in the request).\n\nSecurity policy: replaces disallowed actor_user_id filter; actor identity is taken from authentication context."},"actor_username":{"type":"string","description":"Optional filter by actor’s username for administrative queries without using direct user_id values.\n\nJoins to community_platform_users.username when supported by provider logic; avoids passing actor IDs in the request body."},"session_id":{"type":"string","format":"uuid","description":"Filter by correlated session id.\n\nReferences community_platform_audit_logs.session_id."},"community_id":{"type":"string","format":"uuid","description":"Filter by target community id.\n\nReferences community_platform_audit_logs.community_id."},"post_id":{"type":"string","format":"uuid","description":"Filter by target post id.\n\nReferences community_platform_audit_logs.post_id."},"comment_id":{"type":"string","format":"uuid","description":"Filter by target comment id.\n\nReferences community_platform_audit_logs.comment_id."},"membership_id":{"type":"string","format":"uuid","description":"Filter by related membership id.\n\nReferences community_platform_audit_logs.membership_id."},"event_types":{"type":"array","items":{"type":"string"},"description":"Filter by a list of canonical event_type keys (e.g., [\"login\",\"logout\",\"post_created\"]).\n\nReferences community_platform_audit_logs.event_type."},"success":{"type":"boolean","description":"Filter by success outcome (true/false).\n\nReferences community_platform_audit_logs.success."},"created_at_from":{"type":"string","format":"date-time","description":"Lower bound of created_at time range (inclusive) in ISO 8601.\n\nReferences community_platform_audit_logs.created_at."},"created_at_to":{"type":"string","format":"date-time","description":"Upper bound of created_at time range (inclusive) in ISO 8601.\n\nReferences community_platform_audit_logs.created_at."},"order_by":{"oneOf":[{"const":"created_at","description":"Primary sort key for results. Defaults commonly to created_at.\n\nSupported fields reflect indexed columns and common investigative needs."},{"const":"event_type","description":"Primary sort key for results. Defaults commonly to created_at.\n\nSupported fields reflect indexed columns and common investigative needs."},{"const":"success","description":"Primary sort key for results. Defaults commonly to created_at.\n\nSupported fields reflect indexed columns and common investigative needs."},{"const":"actor_username","description":"Primary sort key for results. Defaults commonly to created_at.\n\nSupported fields reflect indexed columns and common investigative needs."}],"description":"Primary sort key for results. Defaults commonly to created_at.\n\nSupported fields reflect indexed columns and common investigative needs."},"direction":{"oneOf":[{"const":"asc","description":"Sort direction for the given order_by key. Defaults to desc when order_by is created_at."},{"const":"desc","description":"Sort direction for the given order_by key. Defaults to desc when order_by is created_at."}],"description":"Sort direction for the given order_by key. Defaults to desc when order_by is created_at."}},"required":[],"description":"Search, filter, and pagination request for administrative audit logs.\n\nThis request type targets the community_platform_audit_logs table and complies with security policy by avoiding actor identity IDs in the request body. Use me_only to scope to the authenticated actor and actor_username for administrative queries. Resource-scoped filters (session_id, community_id, post_id, comment_id, membership_id) remain available for investigative use-cases. Pagination and sorting enable efficient list views for audit and compliance workflows.\n\nSecurity note: access to this search is typically restricted to system administrators as described by business requirements. This request does not modify any data."},"ICommunityPlatformCategory.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the category record.\n\nMaps to community_platform_categories.id (UUID primary key). Used as the stable reference key across relationships (e.g., communities link to categories by this id)."},"code":{"type":"string","description":"Business code (slug-like) of the category.\n\nCorresponds to community_platform_categories.code which is unique and used for URLs, filters, and stable configuration references."},"name":{"type":"string","description":"Human-readable category name.\n\nMaps to community_platform_categories.name. Must be unique to avoid ambiguous labels in the platform UI and filters."},"display_order":{"type":"integer","description":"Ordering hint for UI presentation.\n\nReflects community_platform_categories.display_order (lower values appear earlier). Enables deterministic ordering of category chips and lists."},"active":{"type":"boolean","description":"Whether the category is currently enabled for selection and display.\n\nBased on community_platform_categories.active. Inactive categories may be hidden unless explicitly requested."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the category (ISO 8601 date-time).\n\nMaps to community_platform_categories.created_at and is used for audit and sorting (e.g., Recently Created)."}},"required":["id","code","name","display_order","active","created_at"],"description":"Category summary for list/grid views.\n\nThis summary schema represents the essential, public-facing fields of a category from Prisma table community_platform_categories. It includes stable identifiers and display-critical properties used in Explore and filtering.\n\nLong-form text such as description is intentionally excluded from the summary per interface guidelines to keep list payloads concise."},"ICommunityPlatformReservedTerm.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the reserved term.\n\nMaps to community_platform_reserved_terms.id (UUID primary key)."},"term":{"type":"string","description":"Original reserved term as entered by an administrator.\n\nCorresponds to community_platform_reserved_terms.term and is used for display and validation previews."},"applies_to":{"type":"string","description":"Target context to which this reservation applies (e.g., 'community_name', 'global').\n\nMaps to community_platform_reserved_terms.applies_to and scopes where the term is enforced."},"active":{"type":"boolean","description":"Whether enforcement of this reserved term is currently active.\n\nBased on community_platform_reserved_terms.active. Inactive terms are retained for history or future reactivation."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of this reserved term (ISO 8601 date-time).\n\nMaps to community_platform_reserved_terms.created_at and supports chronological sorting/filtering."}},"required":["id","term","applies_to","active","created_at"],"description":"Reserved term summary for administrative list views.\n\nSummarizes key fields from Prisma table community_platform_reserved_terms for quick review and filtering. It avoids long-form fields like reason and term_normalized to keep the payload concise while providing essential auditability and filtering attributes."},"ICommunityPlatformAppSetting.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the setting record (community_platform_app_settings.id).\n\nPrisma column type: String @db.Uuid. This is the stable unique identifier for the configuration entry."},"key":{"type":"string","description":"Unique configuration key name (community_platform_app_settings.key).\n\nUsed to retrieve the setting programmatically. Uniqueness is enforced at the database level."},"value_type":{"type":"string","description":"Semantic type of the setting value (community_platform_app_settings.value_type).\n\nExamples include: 'string', 'int', 'boolean', 'duration'. Used by admin tools and validators to interpret the stored value."},"active":{"type":"boolean","description":"Whether this setting is currently effective (community_platform_app_settings.active).\n\nDisabled settings may be retained for historical/audit purposes but not applied by the platform."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp (community_platform_app_settings.updated_at) in ISO 8601 date-time format.\n\nUseful for admin list sorting and change tracking."}},"required":["id","key","value_type","active","updated_at"],"description":"Application Setting Summary (community_platform_app_settings).\n\nThis summary type provides a compact, list-ready view of configuration entries defined in the Prisma model community_platform_app_settings. It includes essential fields for administrative list pages and omits potentially sensitive or verbose fields (like value and description) for brevity and safety.\n\nAll timestamps use ISO 8601 date-time format (UTC)."},"ICommunityPlatformCommunity.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the community.\n\nMaps to Prisma column community_platform_communities.id (UUID)."},"name":{"type":"string","description":"Immutable unique name (slug) of the community.\n\nMaps to Prisma column community_platform_communities.name. Business rule: immutable after creation; case-insensitive uniqueness service-wide."},"community_platform_category_id":{"type":"string","format":"uuid","description":"Foreign key referencing the assigned category.\n\nMaps to Prisma column community_platform_communities.community_platform_category_id (UUID)."},"logo":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"Optional logo image URI for the community.\n\nMaps to Prisma column community_platform_communities.logo (nullable string)."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the community (UTC).\n\nMaps to Prisma column community_platform_communities.created_at (timestamptz)."},"last_active_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent activity relevant to the community (UTC).\n\nMaps to Prisma column community_platform_communities.last_active_at (timestamptz). Used for explore sorting."}},"required":["id","name","community_platform_category_id","created_at","last_active_at"],"description":"Community summary for list and reference surfaces.\n\nDerived from Prisma model community_platform_communities. Includes immutable name, category linkage, and key timestamps suitable for compact cards. Excludes large text and banners for performance.\n\nSecurity: Contains only public-safe fields and no sensitive credentials."},"ICommunityPlatformCommunityMembership.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the membership row (community_platform_community_memberships.id).\n\nEach row represents a join relationship between a user and a community."},"community_platform_community_id":{"type":"string","format":"uuid","description":"Parent community ID (community_platform_community_memberships.community_platform_community_id).\n\nReferences community_platform_communities.id."},"community_platform_user_id":{"type":"string","format":"uuid","description":"Member user ID (community_platform_community_memberships.community_platform_user_id).\n\nReferences community_platform_users.id."},"created_at":{"type":"string","format":"date-time","description":"Membership creation timestamp (join time) (community_platform_community_memberships.created_at).\n\nISO 8601 date-time string."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for the membership row (community_platform_community_memberships.updated_at).\n\nUsed for auditing and historical analysis."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp (leave time) (community_platform_community_memberships.deleted_at).\n\nNull indicates an active membership; non-null indicates the membership has ended."}},"required":["id","community_platform_community_id","community_platform_user_id","created_at","updated_at"],"description":"Community Membership Summary (community_platform_community_memberships).\n\nProvides roster-ready identifiers and lifecycle timestamps for membership records, aligned with the Prisma junction table. Designed for list and admin views that focus on membership state without embedding large user/community payloads."},"ICommunityPlatformPost.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the post (community_platform_posts.id).\n\nPrisma type: String @db.Uuid."},"community_platform_community_id":{"type":"string","format":"uuid","description":"Owning community ID (community_platform_posts.community_platform_community_id).\n\nReferences community_platform_communities.id."},"community_name":{"type":"string","description":"Immutable community name (/c/{name}) derived from the related community record.\n\nThis is a denormalized display field for convenience in list cards; it is not persisted on the post row."},"author_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Author user ID (community_platform_posts.author_user_id), nullable for anonymization on account deletion.\n\nWhen null, display fallback like \"Anonymous\" is recommended."},"title":{"type":"string","description":"Post title (community_platform_posts.title).\n\nBusiness constraints (application-level): length 5–120 characters."},"author_display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional presentation-only display name provided by the author (community_platform_posts.author_display_name).\n\nWhen null or empty, clients may display a default such as \"Anonymous\"."},"created_at":{"type":"string","format":"date-time","description":"Post creation timestamp (community_platform_posts.created_at) in ISO 8601 format.\n\nUsed for Newest sorting and tie-breakers."},"score":{"type":"integer","description":"Derived score: upvotes − downvotes computed from community_platform_post_votes.\n\nNot stored on the post row; calculated by queries or materialized views."},"comment_count":{"type":"integer","description":"Derived total number of comments for the post.\n\nNot stored on the post row; computed via queries or materialized views."}},"required":["id","community_platform_community_id","title","created_at","score","comment_count"],"description":"Post Summary (community_platform_posts).\n\nCompact list/feed representation with essential fields. Includes derived counters (score, comment_count) and optional denormalized display helpers (community_name). Sensitive fields are excluded by design, and ownership/author-only fields are represented by identifiers or presentation-safe values only."},"ICommunityPlatformRecentCommunity.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the recent-community mapping.\n\nMaps to Prisma column community_platform_recent_communities.id (UUID)."},"last_activity_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent eligible activity between the user and the community (UTC).\n\nMaps to Prisma column community_platform_recent_communities.last_activity_at (timestamptz). Drives list ordering."},"community":{"$ref":"#/components/schemas/ICommunityPlatformCommunity.ISummary","description":"Nested summary of the related community for quick rendering in sidebars and menus.\n\nResolved from community_platform_recent_communities.community_platform_community_id → community_platform_communities."}},"required":["id","last_activity_at","community"],"description":"Summary of a user's recent community record.\n\nBased on Prisma model community_platform_recent_communities. Enriched with the referenced community summary for presentation while keeping the mapping identity for deduplication and reconciliation.\n\nSecurity: Contains no sensitive credentials or session data."},"ICommunityPlatformGlobalLatestPost.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the materialized view row.\n\nMaps to MV column mv_community_platform_global_latest_posts.id (UUID)."},"community_platform_post_id":{"type":"string","format":"uuid","description":"Identifier of the referenced post.\n\nMaps to MV column community_platform_post_id (UUID)."},"community_platform_community_id":{"type":"string","format":"uuid","description":"Identifier of the owning community.\n\nMaps to MV column community_platform_community_id (UUID)."},"community_platform_user_id":{"type":"string","format":"uuid","description":"Identifier of the author user.\n\nMaps to MV column community_platform_user_id (UUID)."},"created_at":{"type":"string","format":"date-time","description":"Original post creation timestamp used for Newest ordering (UTC).\n\nMaps to MV column created_at (timestamptz)."},"refreshed_at":{"type":"string","format":"date-time","description":"Timestamp when this MV row was last refreshed/materialized (UTC).\n\nMaps to MV column refreshed_at (timestamptz)."},"title":{"type":"string","description":"Denormalized post title for sidebar display.\n\nMaps to MV column title."},"author_display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional author display name as captured in the MV.\n\nMaps to MV column author_display_name (nullable). Presentation-only; does not affect authorship."},"community_name":{"type":"string","description":"Denormalized immutable community name used for display like /c/{name}.\n\nMaps to MV column community_name."},"score":{"type":"integer","description":"Denormalized score (upvotes − downvotes) at refresh time.\n\nMaps to MV column score (integer)."},"comment_count":{"type":"integer","description":"Denormalized total number of comments at refresh time.\n\nMaps to MV column comment_count (integer)."}},"required":["id","community_platform_post_id","community_platform_community_id","community_platform_user_id","created_at","refreshed_at","title","community_name","score","comment_count"],"description":"Compact summary of a Global Latest entry.\n\nDerived from MV mv_community_platform_global_latest_posts to support fast public sidebar rendering. Includes only essential, denormalized fields and timestamps.\n\nSecurity: Public-safe; excludes sensitive credential or token data."},"ICommunityPlatformAdminAction.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the administrative action.\n\nMaps to Prisma column community_platform_admin_actions.id (UUID)."},"action":{"type":"string","description":"Canonical action identifier (e.g., \"disable_community\", \"delete_post\", \"remove_comment\").\n\nMaps to Prisma column community_platform_admin_actions.action."},"actor_user_id":{"type":"string","format":"uuid","description":"Administrator user identifier who performed the action.\n\nMaps to Prisma column community_platform_admin_actions.actor_user_id (UUID)."},"target_community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional target community identifier.\n\nMaps to Prisma column community_platform_admin_actions.target_community_id (nullable UUID)."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional target post identifier.\n\nMaps to Prisma column community_platform_admin_actions.target_post_id (nullable UUID)."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional target comment identifier.\n\nMaps to Prisma column community_platform_admin_actions.target_comment_id (nullable UUID)."},"reason":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional free-text reason or notes describing policy context.\n\nMaps to Prisma column community_platform_admin_actions.reason (nullable)."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp when the admin action snapshot was recorded (UTC).\n\nMaps to Prisma column community_platform_admin_actions.created_at (timestamptz)."}},"required":["id","action","actor_user_id","created_at"],"description":"Administrative action summary for audit and policy review lists.\n\nBased on Prisma model community_platform_admin_actions. Provides minimal, high-signal fields for index views and omits sensitive transport metadata (ip, user_agent). Targets are optional depending on the action type.\n\nSecurity: Administrator-only surfaces typically consume this schema; nevertheless, no secrets or credential hashes are included."},"ICommunityPlatformAuditLog.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the audit log entry.\n\nMaps to Prisma column community_platform_audit_logs.id (UUID)."},"event_type":{"type":"string","description":"Canonical event type key (e.g., \"join_community\", \"post_created\", \"vote_toggled\", \"login\").\n\nMaps to Prisma column community_platform_audit_logs.event_type."},"success":{"type":"boolean","description":"Outcome indicator: true if the event succeeded; false if it failed.\n\nMaps to Prisma column community_platform_audit_logs.success."},"actor_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional authenticated actor user id.\n\nMaps to Prisma column community_platform_audit_logs.actor_user_id (nullable UUID)."},"session_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional session id for correlation.\n\nMaps to Prisma column community_platform_audit_logs.session_id (nullable UUID)."},"guestvisitor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional guest visitor id when the actor was unauthenticated.\n\nMaps to Prisma column community_platform_audit_logs.guestvisitor_id (nullable UUID)."},"community_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional related community id.\n\nMaps to Prisma column community_platform_audit_logs.community_id (nullable UUID)."},"post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional related post id.\n\nMaps to Prisma column community_platform_audit_logs.post_id (nullable UUID)."},"comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional related comment id.\n\nMaps to Prisma column community_platform_audit_logs.comment_id (nullable UUID)."},"membership_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional related membership id for join/leave events.\n\nMaps to Prisma column community_platform_audit_logs.membership_id (nullable UUID)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the audit entry was recorded (UTC).\n\nMaps to Prisma column community_platform_audit_logs.created_at (timestamptz)."}},"required":["id","event_type","success","created_at"],"description":"Audit log summary for investigative list views.\n\nDerived from Prisma model community_platform_audit_logs. Captures the event type, outcome, and lightweight relational pointers without heavy details, ip, or user-agent for list performance.\n\nSecurity: Intended for administrator-only audit tooling; no credential or token data is exposed."},"ICommunityPlatformComment.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nMaps to Prisma column community_platform_comments.id."},"community_platform_post_id":{"type":"string","format":"uuid","description":"Post association identifier.\n\nReferences community_platform_posts.id via community_platform_comments.community_platform_post_id."},"community_platform_user_id":{"type":"string","format":"uuid","description":"Author association identifier.\n\nReferences community_platform_users.id via community_platform_comments.community_platform_user_id."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional parent comment identifier for nested threading.\n\nMaps to community_platform_comments.parent_id (nullable)."},"content":{"type":"string","minLength":2,"maxLength":2000,"description":"Plain-text comment content for display.\n\nBusiness rules: 2–2,000 characters; plain text with line breaks only (no scripts/executable code). Maps to Prisma column community_platform_comments.content."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (UTC, ISO 8601).\n\nMaps to community_platform_comments.created_at. Used for Newest sorting and relative-time display."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp (UTC, ISO 8601).\n\nMaps to community_platform_comments.updated_at. Updated when the comment content changes and for audit/versioning behaviors."}},"required":["id","community_platform_post_id","community_platform_user_id","content","created_at","updated_at"],"description":"Summary type for comment entities sourced from Prisma model community_platform_comments.\n\nFor list/search views, this includes essential public fields only: identifiers, author/post linkage, optional parent threading reference, plain-text content (with enforced length constraints), and timestamps."},"I":{"type":"object","properties":{},"required":[],"description":"Generic placeholder entity type used by generic page schemas.\n\nThis definition exists solely to satisfy $ref dependencies introduced by generic container types (e.g., IPageI). It has no fixed properties and should not be used for concrete DTO design."},"I.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number.\n\nUnsigned integer semantics (0-based or 1-based depending on caller context)."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per page.\n\nUnsigned integer semantics; providers commonly default this value when omitted."},"records":{"type":"integer","minimum":0,"description":"Total records in the dataset matching the query."},"pages":{"type":"integer","minimum":0,"description":"Total pages (ceil(records / limit))."}},"required":["current","limit","records","pages"],"description":"Generic pagination information placeholder.\n\nThis schema mirrors the standard pagination structure to maintain compatibility where generic references were used. Prefer IPage.IPagination for concrete APIs."},"I.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Optional page number for pagination.\n\nUse explicit null to indicate the default."},"limit":{"oneOf":[{"type":"integer","minimum":0},{"type":"null"}],"description":"Optional limit (max items per page).\n\nUse explicit null to indicate the default."}},"required":[],"description":"Generic page request placeholder carrying optional page and limit controls.\n\nPrefer concrete request types (e.g., IPage.IRequest or entity-specific IRequest variants) for real endpoints."},"IECommunityPlatformCategorySortBy":{"oneOf":[{"const":"display_order","description":"Sort keys for community categories (Prisma: community_platform_categories).\n\n- display_order: UI presentation hint (lower values appear earlier)\n- name: human-readable category name\n- created_at: creation timestamp"},{"const":"name","description":"Sort keys for community categories (Prisma: community_platform_categories).\n\n- display_order: UI presentation hint (lower values appear earlier)\n- name: human-readable category name\n- created_at: creation timestamp"},{"const":"created_at","description":"Sort keys for community categories (Prisma: community_platform_categories).\n\n- display_order: UI presentation hint (lower values appear earlier)\n- name: human-readable category name\n- created_at: creation timestamp"}],"description":"Sort keys for community categories (Prisma: community_platform_categories).\n\n- display_order: UI presentation hint (lower values appear earlier)\n- name: human-readable category name\n- created_at: creation timestamp"},"IECommunityPlatformCommunityRuleOrderBy":{"oneOf":[{"const":"order_index","description":"Allowed sort keys for Community Rule listings.\n\n- order_index: Deterministic display order within a community, unique per community.\n- created_at: Creation timestamp to support Newest ordering.\n- updated_at: Last modified timestamp to surface recently edited rules."},{"const":"created_at","description":"Allowed sort keys for Community Rule listings.\n\n- order_index: Deterministic display order within a community, unique per community.\n- created_at: Creation timestamp to support Newest ordering.\n- updated_at: Last modified timestamp to surface recently edited rules."},{"const":"updated_at","description":"Allowed sort keys for Community Rule listings.\n\n- order_index: Deterministic display order within a community, unique per community.\n- created_at: Creation timestamp to support Newest ordering.\n- updated_at: Last modified timestamp to surface recently edited rules."}],"description":"Allowed sort keys for Community Rule listings.\n\n- order_index: Deterministic display order within a community, unique per community.\n- created_at: Creation timestamp to support Newest ordering.\n- updated_at: Last modified timestamp to surface recently edited rules."},"IEPostVoteState":{"oneOf":[{"const":"up","description":"Post vote state enumeration.\n\nThis enum captures canonical voting values for Prisma model community_platform_post_votes.state. The application standardizes lower-case values aligned with comment votes for cross-domain consistency.\n\nValues:\n- \"up\": Upvote selection by the current user\n- \"down\": Downvote selection by the current user\n\nBusiness context: The \"None\" state is represented by absence of an active vote record (or an inactive record with deleted_at set) and is effected via the DELETE vote endpoint. Scores are computed as upvotes minus downvotes across active records."},{"const":"down","description":"Post vote state enumeration.\n\nThis enum captures canonical voting values for Prisma model community_platform_post_votes.state. The application standardizes lower-case values aligned with comment votes for cross-domain consistency.\n\nValues:\n- \"up\": Upvote selection by the current user\n- \"down\": Downvote selection by the current user\n\nBusiness context: The \"None\" state is represented by absence of an active vote record (or an inactive record with deleted_at set) and is effected via the DELETE vote endpoint. Scores are computed as upvotes minus downvotes across active records."}],"description":"Post vote state enumeration.\n\nThis enum captures canonical voting values for Prisma model community_platform_post_votes.state. The application standardizes lower-case values aligned with comment votes for cross-domain consistency.\n\nValues:\n- \"up\": Upvote selection by the current user\n- \"down\": Downvote selection by the current user\n\nBusiness context: The \"None\" state is represented by absence of an active vote record (or an inactive record with deleted_at set) and is effected via the DELETE vote endpoint. Scores are computed as upvotes minus downvotes across active records."},"IECommunityPlatformCommentSort":{"const":"Newest","description":"Sorting options for comments.\n\nPer business and search requirements, comments support the canonical Newest ordering only (created_at descending; ties by larger identifier). This enum constrains the allowed sort option to a single value for deterministic behavior."},"IEPostSnapshotOrderBy":{"oneOf":[{"const":"created_at","description":"Ordering keys for listing post snapshots.\n\n- created_at: order by snapshot creation timestamp (default)\n- id: deterministic ordering by identifier\n- title: alphabetical ordering by recorded title\n\nUsed by ICommunityPlatformPostSnapshot.IRequest.orderBy."},{"const":"id","description":"Ordering keys for listing post snapshots.\n\n- created_at: order by snapshot creation timestamp (default)\n- id: deterministic ordering by identifier\n- title: alphabetical ordering by recorded title\n\nUsed by ICommunityPlatformPostSnapshot.IRequest.orderBy."},{"const":"title","description":"Ordering keys for listing post snapshots.\n\n- created_at: order by snapshot creation timestamp (default)\n- id: deterministic ordering by identifier\n- title: alphabetical ordering by recorded title\n\nUsed by ICommunityPlatformPostSnapshot.IRequest.orderBy."}],"description":"Ordering keys for listing post snapshots.\n\n- created_at: order by snapshot creation timestamp (default)\n- id: deterministic ordering by identifier\n- title: alphabetical ordering by recorded title\n\nUsed by ICommunityPlatformPostSnapshot.IRequest.orderBy."},"IECommunityPlatformRecentCommunityOrderBy":{"oneOf":[{"const":"last_activity_at","description":"Order-by fields for recent communities listing.\n\nThese values map directly to columns in Prisma table community_platform_recent_communities: last_activity_at, created_at, and updated_at. Use together with IESortDirection to build deterministic sorting."},{"const":"created_at","description":"Order-by fields for recent communities listing.\n\nThese values map directly to columns in Prisma table community_platform_recent_communities: last_activity_at, created_at, and updated_at. Use together with IESortDirection to build deterministic sorting."},{"const":"updated_at","description":"Order-by fields for recent communities listing.\n\nThese values map directly to columns in Prisma table community_platform_recent_communities: last_activity_at, created_at, and updated_at. Use together with IESortDirection to build deterministic sorting."}],"description":"Order-by fields for recent communities listing.\n\nThese values map directly to columns in Prisma table community_platform_recent_communities: last_activity_at, created_at, and updated_at. Use together with IESortDirection to build deterministic sorting."},"IECommunityPlatformAdminActionOrderBy":{"oneOf":[{"const":"created_at","description":"Order-by fields for administrative action listings.\n\nValues correspond to columns in community_platform_admin_actions and enable predictable sorting in audit/review tools."},{"const":"action","description":"Order-by fields for administrative action listings.\n\nValues correspond to columns in community_platform_admin_actions and enable predictable sorting in audit/review tools."},{"const":"actor_user_id","description":"Order-by fields for administrative action listings.\n\nValues correspond to columns in community_platform_admin_actions and enable predictable sorting in audit/review tools."}],"description":"Order-by fields for administrative action listings.\n\nValues correspond to columns in community_platform_admin_actions and enable predictable sorting in audit/review tools."}}}}