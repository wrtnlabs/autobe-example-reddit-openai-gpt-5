{"operations":[{"specification":"Create an authentication operation for the guestVisitor role that provisions a minimal user account and an initial session record. The endpoint will create a new row in Actors.community_platform_users (id, email, email_normalized, username, username_normalized, password_hash, display_name?, last_login_at, created_at, updated_at, deleted_at?) and immediately establish a long-lived session in Sessions.community_platform_sessions (id, community_platform_user_id, hashed_token, user_agent?, ip?, client_platform?, client_device?, session_type?, created_at, updated_at, last_seen_at?, expires_at, revoked_at?, deleted_at?). Because role.kind is \"guest\", no login operation is produced and no role-assignment records are created in Actors.community_platform_registeredmembers or Actors.community_platform_siteadmins. The API returns an authorization payload suitable for clients to treat the caller as a guest-authenticated identity with long-lived session semantics.","authorizationType":"join","description":"Purpose and scope: This endpoint registers a temporary guest identity and issues a session for smooth resume-after-login experiences without full member credentials. A new account is created in the Prisma model Actors.community_platform_users using required columns email, email_normalized, username, username_normalized, and password_hash, with optional display_name and last_login_at set on successful issuance. The account timestamps created_at and updated_at are recorded for audit and ordering. No membership privilege rows are created; specifically, Actors.community_platform_registeredmembers and Actors.community_platform_siteadmins remain absent for this account.\n\nImplementation details: After creating the user row, the service persists a session in Sessions.community_platform_sessions with a securely generated hashed_token (plaintext never stored), an absolute expires_at to satisfy long-lived session targets, and optional user_agent/ip/client_platform/client_device metadata. Timestamps created_at/updated_at are set, and last_seen_at is recorded or initialized. The session is returned to the client through the authorized response payload so the UI can proceed with guarded actions that require being signed in as a guest identity (e.g., preparing to upgrade flow, resuming blocked actions after prompt).\n\nRole-specific integration: The guestVisitor role indicates an unauthenticated browsing state prior to registration. Upon guest join, the user is represented by the newly created community_platform_users row but remains a guest (not a registered member). No entries are inserted into Actors.community_platform_registeredmembers or Actors.community_platform_siteadmins. Content write permissions remain restricted per product rules; however, the session enables long-lived identity for resume-after-login behavior and state continuity.\n\nSecurity considerations: Credentials are not reused from other roles. The system must honor uniqueness via email_normalized and username_normalized, and store only password_hash. Session tokens are represented only by community_platform_sessions.hashed_token, never plaintext. Session expiry is controlled by community_platform_sessions.expires_at, with renewal performed via the companion refresh endpoint for this role. Optionally, last_login_at in community_platform_users can be set to the current timestamp on successful issuance.\n\nValidation and business logic: Minimal validation should respect the database constraints and uniqueness enforced by email_normalized and username_normalized. The application may auto-generate ephemeral values to satisfy required columns in Actors.community_platform_users when the client does not provide them. On uniqueness conflicts, return a suitable error according to service conventions. No soft deletion semantics are applied during creation; deleted_at columns remain null.\n\nRelated operations and workflow: This join operation is typically followed by the refresh endpoint for token renewal (Sessions.community_platform_sessions rotation/extension). There is no login endpoint for the guestVisitor role by design. Upgrading to member-level capabilities would be handled by separate role-specific flows unrelated to this operation.","summary":"Register guestVisitor in community_platform_users and create session in community_platform_sessions.","parameters":[],"requestBody":{"description":"Guest join payload (ephemeral identity inputs or empty; server may auto-generate required fields).","typeName":"ICommunityPlatformGuestVisitor.IJoin"},"responseBody":{"description":"Authorized session information for a guestVisitor after join.","typeName":"ICommunityPlatformGuestVisitor.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/guestVisitor/join","method":"post"},{"specification":"Create a token/session refresh operation for the guestVisitor role. It locates an existing session in Sessions.community_platform_sessions (by secure token material provided via request or cookie) and updates or rotates it, extending expires_at and updating last_seen_at. The operation does not interact with role-assignment tables (Actors.community_platform_registeredmembers or Actors.community_platform_siteadmins). It references the owning account in Actors.community_platform_users to ensure the associated user remains valid (not deactivated). Returns an authorization payload that reflects the new session state for guest-level access.","authorizationType":"refresh","description":"Purpose and scope: This endpoint renews guestVisitor authentication by refreshing a session represented in Prisma by Sessions.community_platform_sessions. It validates the presented token (e.g., via a provided refresh token or secure cookie mapped to community_platform_sessions.hashed_token), ensures the session is not revoked (revoked_at is null) and not expired beyond renewal policy, and then rotates or extends the session by updating expires_at and last_seen_at. The corresponding user record in Actors.community_platform_users remains unchanged beyond an optional update to last_login_at.\n\nImplementation details: A valid session row is required in community_platform_sessions. On success, the endpoint may create a new session record with a new hashed_token or update the existing one depending on the rotation policy, always avoiding plaintext token storage. The response returns an authorized structure that clients can use to continue guarded flows after renewal. The actor’s role remains guest; no rows are created in Actors.community_platform_registeredmembers or Actors.community_platform_siteadmins.\n\nRole-specific integration: This operation is specific to the guestVisitor role and exists because kind is \"guest\". It complements the guest join flow by extending long-lived sessions without requiring a member login. It must enforce the association to Actors.community_platform_users via community_platform_user_id, ensuring the user has not been deactivated (e.g., users.deleted_at is null) prior to renewal.\n\nSecurity considerations: Validate that community_platform_sessions.revoked_at is null and community_platform_sessions.expires_at permits renewal. Always store only the hashed token (community_platform_sessions.hashed_token). Update last_seen_at to reflect the renewal activity, and set a new expires_at within platform-defined bounds. Any invalid or expired token should result in an appropriate unauthorized response per service conventions.\n\nValidation and business logic: The refresh request must supply sufficient token context to locate the session (header/cookie or request body field). The system must handle race conditions idempotently so the final state contains exactly one active, non-revoked session for the guest account. No soft deletion is performed by this operation; deleted_at columns remain null.\n\nRelated operations and workflow: Paired with the guestVisitor join endpoint. There is no login for this role. Member/admin authentication flows are separate and out of scope here.","summary":"Refresh guestVisitor session by rotating/updating community_platform_sessions.","parameters":[],"requestBody":{"description":"Refresh payload carrying token context to renew the guest session.","typeName":"ICommunityPlatformGuestVisitor.IRefresh"},"responseBody":{"description":"Authorized session information for a guestVisitor after successful refresh.","typeName":"ICommunityPlatformGuestVisitor.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/guestVisitor/refresh","method":"post"},{"specification":"Implement registration endpoint for member role. Creates a new account record in Actors.community_platform_users and assigns the member role by inserting into Actors.community_platform_registeredmembers. On success, establishes a long-lived session in Sessions.community_platform_sessions to support resume-after-login. Enforce case-insensitive uniqueness using users.email_normalized and users.username_normalized as per schema constraints. Persist credential in users.password_hash and optionally set users.display_name. Initialize users.last_login_at and audit timestamps (created_at/updated_at). The session record should set hashed_token, expires_at, user_agent/ip when available, and last_seen_at for activity tracking. This operation maps to three Prisma tables: community_platform_users (core user account), community_platform_registeredmembers (role assignment), and community_platform_sessions (session token).","authorizationType":"join","description":"This operation registers a new member account and issues initial authorization tokens. It creates a row in community_platform_users, populating email, email_normalized, username, username_normalized, password_hash, and optionally display_name. The schema enforces case-insensitive uniqueness through email_normalized and username_normalized unique indexes, which the application must populate from the provided human-readable values. The last_login_at timestamp may be set at successful issuance time to support security analytics.\n\nUpon successful user creation, the operation assigns the member capability by inserting into community_platform_registeredmembers using community_platform_user_id, with registered_at set to the current timestamp. The role assignment table serves as the canonical indicator that the user is an active registered member and includes created_at and updated_at for auditability.\n\nFor session management aligned with long-lived sessions and resume-after-login, the endpoint creates a record in community_platform_sessions linked by community_platform_user_id. The session record stores hashed_token (never plaintext), expires_at within the absolute lifetime window, and can capture user_agent, ip, client_platform, and client_device when provided. The record also maintains last_seen_at for session renewal behavior and updated_at for audit.\n\nSecurity considerations follow the schema’s guidance that password_hash is the only stored credential derivative and that normalized uniqueness must be used for conflicts. The operation should return an authorization payload enabling immediate authenticated actions consistent with member permissions.\n\nRelated operations include login for returning users and refresh for renewing tokens. Clients typically call refresh in background to preserve long sessions. Name and email normalization must be handled consistently so that subsequent login comparisons can rely on email_normalized and username_normalized.","summary":"Register a new account in community_platform_users and grant member role via community_platform_registeredmembers.","parameters":[],"requestBody":{"description":"Registration payload for creating a member account.","typeName":"ICommunityPlatformRegisteredMember.IJoin"},"responseBody":{"description":"Authorized session with user and role context.","typeName":"ICommunityPlatformRegisteredMember.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/registeredMember/join","method":"post"},{"specification":"Authenticate a member by verifying credentials against Actors.community_platform_users (password_hash) and resolving identity via email_normalized or username_normalized. Requires that the account has an active role assignment in Actors.community_platform_registeredmembers. On success, writes a new session into Sessions.community_platform_sessions (hashed_token, expires_at, last_seen_at). Updates users.last_login_at and users.updated_at. Primary tables involved: community_platform_users, community_platform_registeredmembers, community_platform_sessions.","authorizationType":"login","description":"This operation signs in an existing registered member using an identifier (email or username) and password. The system locates the account via the normalized columns email_normalized or username_normalized as defined in community_platform_users, then validates the supplied password against password_hash. When credentials are valid and the account is a registered member (row exists in community_platform_registeredmembers), a fresh session is established.\n\nA new record in community_platform_sessions is created using community_platform_user_id with a securely generated token hash in hashed_token and an expires_at timestamp that respects the absolute lifetime requirement. The session may also store user_agent and ip strings, as well as client_platform or client_device when available. The last_seen_at field can be initialized or updated to the current time to facilitate idle-timeout renewal policies.\n\nThe operation updates users.last_login_at upon successful authentication to support security and analytics. Audit timestamps such as created_at and updated_at are maintained by the application layer consistent with the Prisma model definitions.\n\nFrom a security perspective, the endpoint never returns or stores plaintext credentials or tokens; only token material suitable for client storage is returned and only hashed_token is persisted server-side. The response includes authorization details enabling posting, commenting, voting, joining/leaving communities, and editing/deleting authored content, consistent with the registered member role.\n\nClients should use the refresh endpoint to renew sessions and maintain long-lived access without user friction. If the user does not have a corresponding row in community_platform_registeredmembers, the application should deny sign-in for member scope or prompt the registration flow.","summary":"Sign in a registered member and create a session in community_platform_sessions.","parameters":[],"requestBody":{"description":"Login credentials for member authentication.","typeName":"ICommunityPlatformRegisteredMember.ILogin"},"responseBody":{"description":"Authorized session with user and role context.","typeName":"ICommunityPlatformRegisteredMember.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/registeredMember/login","method":"post"},{"specification":"Renew an authenticated session for a member role using Sessions.community_platform_sessions as the authoritative store. Validates the presented refresh/session token by matching against hashed_token and ensures not revoked and not expired (revoked_at null, expires_at in the future). On success, rotates or extends session by updating last_seen_at and issuing a new client token if applicable. Tables involved: community_platform_sessions and community_platform_users for linkage and audit.","authorizationType":"refresh","description":"This operation renews a member session to support long-lived authentication with resume-after-login behavior. The server validates the presented token context against community_platform_sessions by comparing a hash with hashed_token, verifying that expires_at has not passed and revoked_at is null. When valid, the operation may rotate the client-facing token and updates last_seen_at to reflect recent activity per long-session policy.\n\nThe session remains linked to the account via community_platform_user_id, enabling downstream permission checks consistent with the registered member’s capabilities across posting, commenting, voting, community creation, and join/leave actions. No credential re-entry is required when a valid refresh token is provided.\n\nSecurity considerations include ensuring that only hashed_token is stored, observing absolute lifetime constraints (expires_at), and recording updated_at to reflect the modification. The endpoint’s response returns a fresh authorization payload consistent with the member role.\n\nRelated operations include login for initial credential authentication and logout endpoints for revocation. If validation fails because the session is expired or revoked, the application should require a full login.","summary":"Refresh a member session using community_platform_sessions as source of truth.","parameters":[],"requestBody":{"description":"Refresh token or session renewal payload.","typeName":"ICommunityPlatformRegisteredMember.IRefresh"},"responseBody":{"description":"Refreshed authorized session for the member.","typeName":"ICommunityPlatformRegisteredMember.IAuthorized"},"authorizationRole":"registeredMember","name":"refresh","prerequisites":[],"path":"/auth/registeredMember/refresh","method":"post"},{"specification":"Invalidate the current authenticated session for the member by marking Sessions.community_platform_sessions.revoked_at and, if rotating tokens, ensuring the client token is no longer accepted. Uses community_platform_user_id from the authenticated context to identify the correct session. Primary table: community_platform_sessions; also touches community_platform_users for linkage and audit when needed.","authorizationType":null,"description":"This operation logs the member out from the current device by revoking the active session. It targets the corresponding row in community_platform_sessions associated with the authenticated community_platform_user_id and marks it as revoked by setting revoked_at. The record may also update updated_at and last_seen_at to reflect the action.\n\nThe users table community_platform_users is not modified for credential data during logout; password_hash and identity fields remain unchanged. This endpoint complements login and refresh by allowing users to explicitly end a session while keeping reading access to public content.\n\nIf the session is already revoked or expired (based on expires_at), the system should treat the operation as idempotent and return success without error to simplify client logic. Related operations include logoutAll to end all sessions and revokeSession for targeted session management.","summary":"Log out from the current session by revoking community_platform_sessions record.","parameters":[],"requestBody":{"description":"Optional metadata for logout (e.g., client hints).","typeName":"ICommunityPlatformRegisteredMember.ILogoutRequest"},"responseBody":{"description":"Logout result status for the current session.","typeName":"ICommunityPlatformRegisteredMember.ILogoutResult"},"authorizationRole":"registeredMember","name":"logout","prerequisites":[],"path":"/auth/registeredMember/logout","method":"post"},{"specification":"Invalidate all sessions for the authenticated member by updating Sessions.community_platform_sessions rows belonging to the user (community_platform_user_id) and setting revoked_at. Ensures continued read-only access for public content post-logout. Primary table: community_platform_sessions.","authorizationType":null,"description":"This operation signs the member out of all devices by revoking every active session linked to the account. It identifies sessions via community_platform_user_id in community_platform_sessions and sets revoked_at on each currently valid session. The action is idempotent; repeating it after all sessions are already revoked produces no side effects.\n\nNo changes are made to credentials in community_platform_users such as password_hash, and the role assignment in community_platform_registeredmembers remains intact. This complements the single-session logout and can be offered as a security control in profile settings.\n\nIf some sessions are already expired based on expires_at, they can be included in the revocation sweep without error. Clients typically return to read-only state after completion.","summary":"Revoke all active sessions for the member in community_platform_sessions.","parameters":[],"requestBody":null,"responseBody":{"description":"Bulk logout result summary.","typeName":"ICommunityPlatformRegisteredMember.ILogoutAllResult"},"authorizationRole":"registeredMember","name":"logoutAll","prerequisites":[],"path":"/auth/registeredMember/logoutAll","method":"post"},{"specification":"Targeted revocation of a specific session by its identifier in Sessions.community_platform_sessions. Allows a member to manage device sessions (e.g., sign out a lost device). Verifies ownership via community_platform_user_id to prevent revoking another user’s session. Updates revoked_at and audit timestamps for the specified session row.","authorizationType":null,"description":"This operation revokes a specific session by ID for the authenticated member. It operates on community_platform_sessions by locating the row with id equal to the provided sessionId and verifying that its community_platform_user_id matches the caller. If matched, the endpoint sets revoked_at and updates updated_at for audit consistency. If the session is already revoked or expired per expires_at, the operation is treated as success to keep the behavior idempotent.\n\nThe endpoint does not modify credential data in community_platform_users and does not affect the member role assignment in community_platform_registeredmembers. It can be used alongside session listings in account management UIs to remove individual devices.\n\nIf the session does not belong to the caller, the server should return a permission error consistent with role-based access policies. Clients may pair this with logoutAll to provide complete session hygiene tools.","summary":"Revoke one session in community_platform_sessions by ID for the current member.","parameters":[{"name":"sessionId","description":"Target session’s ID (UUID) to revoke.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Per-session revocation result.","typeName":"ICommunityPlatformRegisteredMember.ISessionRevocationResult"},"authorizationRole":"registeredMember","name":"revokeSession","prerequisites":[],"path":"/auth/registeredMember/sessions/{sessionId}","method":"delete"},{"specification":"Change the authenticated member’s password by verifying the current credential and updating Actors.community_platform_users.password_hash. Ensures that audit fields updated_at are refreshed and may optionally update sessions per policy (e.g., revoke others). Does not alter role assignment in Actors.community_platform_registeredmembers. Primary table: community_platform_users; optionally affects community_platform_sessions for session hygiene.","authorizationType":null,"description":"This operation updates the member’s password by replacing password_hash in community_platform_users after verifying the supplied current password. The account is identified by the authenticated context (community_platform_user_id). Upon success, updated_at should be set to the current timestamp. Depending on security policy, the server may choose to revoke other sessions by setting revoked_at in community_platform_sessions, while keeping the current session valid or rotating its token.\n\nThe endpoint does not modify identity fields such as email, email_normalized, username, or username_normalized, and does not affect the presence of the role assignment in community_platform_registeredmembers. It strictly focuses on credential rotation in alignment with schema fields and business requirements for long-lived sessions and smooth re-login.\n\nIf the current password fails validation against the existing password_hash, the operation should fail gracefully without changing any data. On success, the client may receive refreshed authorization context if token rotation is applied.","summary":"Update password by writing a new password_hash in community_platform_users.","parameters":[],"requestBody":{"description":"Current and new password values for rotation.","typeName":"ICommunityPlatformRegisteredMember.IUpdatePassword"},"responseBody":{"description":"Outcome and possibly refreshed authorization context.","typeName":"ICommunityPlatformRegisteredMember.IUpdatePasswordResult"},"authorizationRole":"registeredMember","name":"updatePassword","prerequisites":[],"path":"/auth/registeredMember/password","method":"put"},{"specification":"Create an admin registration endpoint that creates a new administrator account and issues initial authorization artifacts. This operation touches two Prisma DB tables: community_platform_users (core credentials and identity) and community_platform_siteadmins (role grant). It must also persist a long-lived session in community_platform_sessions for resume-after-login flows, updating last_login_at on success.","authorizationType":"join","description":"This endpoint registers a new platform administrator by inserting a user record into the community_platform_users table and immediately granting admin privileges through the community_platform_siteadmins table. The users table contains email, email_normalized, username, username_normalized, and password_hash columns that must be populated according to business rules. The application is responsible for normalizing email and username into email_normalized and username_normalized to satisfy the unique constraints, and for hashing the password into password_hash before persistence.\n\nUpon successful creation, the system should also initialize a long-lived session in the community_platform_sessions table. The session record records hashed_token, created_at, last_seen_at, expires_at, and optionally user_agent and ip to support the long-session experience and audit trails. The user record’s last_login_at should be updated to the current time to reflect an initial sign-in at registration when auto-login is enabled.\n\nThis operation is intended for establishing an administrator (siteAdmin) role using the community_platform_siteadmins table by inserting a row with community_platform_user_id and granted_at. The unique index across community_platform_siteadmins ensures one admin grant per user.\n\nSecurity considerations include: creating password_hash from a plaintext password, not storing plaintext secrets, and enforcing uniqueness via email_normalized/username_normalized. The users model also provides deleted_at for deactivation scenarios, which should be honored by downstream systems, but this endpoint does not manipulate that field.\n\nThis endpoint is typically followed by the token/session refresh endpoint for extending session lifetime and by sign-out endpoints that revoke sessions via community_platform_sessions.revoked_at. Errors include uniqueness violations based on email_normalized or username_normalized and general validation failures tied to required fields.","summary":"Register a new admin account in community_platform_users and grant admin via community_platform_siteadmins, issuing initial authorization.","parameters":[],"requestBody":{"description":"New admin registration payload with identifier and password information.","typeName":"ICommunityPlatformSiteAdminJoin.ICreate"},"responseBody":{"description":"Authorized admin information and session tokens after successful registration.","typeName":"ICommunityPlatformSiteAdmin.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/siteAdmin/join","method":"post"},{"specification":"Create an admin login endpoint that authenticates against community_platform_users and issues an authorized session using community_platform_sessions. This operation reads normalized identity columns (email_normalized and username_normalized) and updates last_login_at on success.","authorizationType":"login","description":"This endpoint authenticates a platform administrator using the credentials stored in community_platform_users. The table provides email/email_normalized and username/username_normalized pairs to support case-insensitive lookup by either identifier. The provided password is verified against password_hash; if valid, a new session is persisted in community_platform_sessions with hashed_token, created_at, expires_at, and optional user_agent/ip metadata. On success, last_login_at in community_platform_users is updated.\n\nThe response returns an authorized representation for the SiteAdmin role, enabling long-lived sessions per business requirements. Session lifecycle is governed by community_platform_sessions.expires_at and may later be extended through the refresh operation. The system should ensure that any user flagged as an administrator has a row in community_platform_siteadmins for authorization decisions.\n\nSecurity considerations include strictly comparing the hashed credential, never returning password_hash, and ensuring that deleted_at in community_platform_users is respected by rejecting logins for deactivated accounts. Additionally, use of email_normalized/username_normalized prevents case-based duplication.\n\nThis operation is commonly used in conjunction with /auth/siteAdmin/refresh to maintain the long-session experience, and with /auth/siteAdmin/logout or /auth/siteAdmin/logoutAll to revoke sessions by setting community_platform_sessions.revoked_at.","summary":"Authenticate admin via community_platform_users and create a session in community_platform_sessions, returning authorized admin info.","parameters":[],"requestBody":{"description":"Admin login payload containing identifier and password.","typeName":"ICommunityPlatformSiteAdminLogin.ICreate"},"responseBody":{"description":"Authorized admin information and session tokens after successful login.","typeName":"ICommunityPlatformSiteAdmin.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/siteAdmin/login","method":"post"},{"specification":"Create an admin session refresh endpoint that rotates or renews session artifacts anchored by community_platform_sessions. The operation verifies an existing session (hashed_token, revoked_at, expires_at) and issues renewed authorization.","authorizationType":"refresh","description":"This endpoint refreshes the administrator’s session, extending the long-lived experience mandated by the product requirements. It validates the current session using the community_platform_sessions table, ensuring that revoked_at is null and expires_at has not lapsed. On success, the system may rotate tokens and update last_seen_at and possibly expires_at to renew the idle timeout window.\n\nThe user identity remains sourced from community_platform_users, which includes last_login_at for analytics and audit. While this endpoint does not alter the user’s password_hash, it must ensure the associated user is still eligible for access (e.g., no deactivation indicated via deleted_at). If required by policy, it can also verify the presence of an admin grant in community_platform_siteadmins for the user.\n\nSecurity considerations include avoiding disclosure of hashed_token and never persisting plaintext secrets. The refresh process should be idempotent per session token and comply with the absolute lifetime boundaries represented by community_platform_sessions.expires_at. The system may update last_seen_at in community_platform_sessions to reflect activity.\n\nThis operation is typically paired with /auth/siteAdmin/login and /auth/siteAdmin/join to establish sessions initially, and with /auth/siteAdmin/logout or /auth/siteAdmin/logoutAll to end sessions by setting revoked_at.","summary":"Refresh an admin’s session using community_platform_sessions to issue renewed authorization.","parameters":[],"requestBody":{"description":"Refresh request containing data needed to validate and renew the session.","typeName":"ICommunityPlatformSiteAdminRefresh.IRequest"},"responseBody":{"description":"Authorized admin information and refreshed session tokens.","typeName":"ICommunityPlatformSiteAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/siteAdmin/refresh","method":"post"},{"specification":"Create an admin logout endpoint that revokes the current session by updating community_platform_sessions.revoked_at for the authenticated admin’s active session. This operation ensures proper session termination without affecting other sessions.","authorizationType":null,"description":"This endpoint logs out the current administrator by revoking the in-use session in the community_platform_sessions table. The session record includes hashed_token, created_at, last_seen_at, expires_at, and revoked_at. Setting revoked_at indicates that the session is no longer valid for future requests. This operation does not delete user records in community_platform_users nor modify password_hash.\n\nThe endpoint requires an authenticated SiteAdmin context. It targets only the currently authenticated session, leaving any other sessions for the same user intact. It complements the long-lived session model by enabling explicit termination, and pairs with /auth/siteAdmin/logoutAll for broader revocation across devices.\n\nError behavior should handle cases where the session is already revoked or missing, updating idempotently. The users table includes last_login_at and deleted_at for audit and deactivation semantics respectively; those fields are not changed by this operation.","summary":"Revoke the current admin session by setting revoked_at in community_platform_sessions.","parameters":[],"requestBody":null,"responseBody":null,"authorizationRole":"siteAdmin","name":"logout","prerequisites":[],"path":"/auth/siteAdmin/logout","method":"post"},{"specification":"Create an admin password change endpoint for the authenticated administrator. It updates community_platform_users.password_hash after validating the current credential, with no changes to role grants. The operation ensures security hygiene and auditability via updated_at.","authorizationType":null,"description":"This endpoint allows an authenticated administrator to change their password. The application must validate the current password against community_platform_users.password_hash and, upon success, produce a new password_hash for storage. The users table also tracks updated_at and last_login_at; updated_at should be set to the current time when the password is changed.\n\nNo rows in community_platform_siteadmins are modified by this operation, and the user identity in community_platform_users remains the same. Depending on policy, existing sessions in community_platform_sessions may be left intact or selectively revoked; this endpoint by itself does not require session revocation unless specified by business rules.\n\nSecurity considerations include strong hashing of the new password, never exposing password_hash, and ensuring deactivated accounts (deleted_at set) cannot change credentials. Clients should re-authenticate seamlessly using the long-lived session model or perform a fresh login if required by policy.\n\nRelated operations include /auth/siteAdmin/login for subsequent sign-in and /auth/siteAdmin/logout or /auth/siteAdmin/logoutAll if session invalidation is desired after the password change.","summary":"Change the authenticated admin’s password by updating password_hash in community_platform_users.","parameters":[],"requestBody":{"description":"Password change payload including current and new password values.","typeName":"ICommunityPlatformSiteAdminPassword.IUpdate"},"responseBody":{"description":"Updated admin profile summary after password change.","typeName":"ICommunityPlatformSiteAdmin"},"authorizationRole":"siteAdmin","name":"changePassword","prerequisites":[],"path":"/auth/siteAdmin/password","method":"put"},{"specification":"Create an endpoint to revoke all sessions for the authenticated administrator by setting community_platform_sessions.revoked_at across all active sessions owned by the user. This supports the business requirement \"log out of all devices\".","authorizationType":null,"description":"This endpoint logs the administrator out of all devices by revoking every active session found in the community_platform_sessions table for the current user. For each session, revoked_at is set to the current time, rendering the session unusable. This operation does not delete the user’s account in community_platform_users nor alter password_hash.\n\nThe users table fields updated_at and last_login_at are unaffected directly by this endpoint. The action is auditable using session timestamps (created_at, last_seen_at) and can be combined with security UIs that list sessions by device (user_agent, ip, client_platform) before revocation.\n\nRelated operations include /auth/siteAdmin/logout for single-session termination, /auth/siteAdmin/login for subsequent sign-in, and /auth/siteAdmin/refresh to re-establish a session after revocation.","summary":"Revoke all admin sessions by updating revoked_at for all of the user’s community_platform_sessions.","parameters":[],"requestBody":null,"responseBody":null,"authorizationRole":"siteAdmin","name":"logoutAll","prerequisites":[],"path":"/auth/siteAdmin/logoutAll","method":"post"},{"specification":"List and search user accounts from the community_platform_users table with advanced filtering, sorting, and cursor-based pagination. This collection-read operation exposes user-managed business entities (accounts) and is intended for administrative or support tooling. It must never expose sensitive fields like password_hash or normalized keys directly in responses. It may filter by case-insensitive username/email using the human-readable columns (username, email) and leverage internal normalized columns (username_normalized, email_normalized) for exact/CI lookups. Sorting should support created_at (Newest), last_login_at (recently active), or username. The response returns paginated user summaries; details include id, username, email, optional display_name, created_at, updated_at, last_login_at, and high-level role flags derived from role-assignment tables (community_platform_registeredmembers, community_platform_siteadmins) where applicable.","description":"Retrieve a filtered, sorted, and paginated list of user accounts stored in the Prisma model community_platform_users. The underlying table includes id (UUID), email, email_normalized, username, username_normalized, password_hash, optional display_name, last_login_at, created_at, updated_at, and optional deleted_at. Per the schema comments, email_normalized and username_normalized enforce case-insensitive uniqueness at the database layer; these are not user-facing fields but can be used for exact/CI matches in search logic.\n\nSecurity and permissions: This operation is intended for administrative back-office usage. Only authorized operators should be able to list arbitrary accounts. The operation must never include password_hash or other sensitive columns in the payload. Business logic may also mask portions of email for privacy. Deleted accounts (deleted_at set) should be excluded by default unless an explicit filter is provided for compliance views.\n\nEntity relationships: Users relate to role assignment tables community_platform_registeredmembers (member state) and community_platform_siteadmins (administrative state), to session records in community_platform_sessions (long-lived sessions), and to content tables (communities they created, posts, comments, votes). When producing summaries, you can derive boolean flags like isMember or isSiteAdmin by probing the existence of related role rows.\n\nValidation and business logic: Support free-text search over username/display_name using trigram indices (as declared in Prisma indexes) and optional exact/CI match on email/username via normalized columns. Sorting typically includes created_at (Newest), last_login_at (recent activity), or username ascending. Pagination follows cursor-based continuation using the active sort’s tiebreakers (e.g., created_at + id for Newest). Respect minimal validation to keep flows smooth.\n\nRelated operations: Use GET /users/{userId} to fetch a single account detail. Use PUT /users/{userId} to update allowed profile fields (e.g., display_name, username/email with uniqueness checks). Use DELETE /users/{userId} to deactivate an account (sets deleted_at) when policy requires.\n\nExpected behavior and error handling: Return a stable page of up to 20 items by default with pageInfo.nextCursor when more data exists. Reject unsupported sort values. Do not expose password_hash or normalized keys. If a temporary error occurs, return a standardized transient error message. Ownership rules do not apply to this admin-level index, so enforce authorization globally.","summary":"Search and list accounts from community_platform_users with pagination and sorting","parameters":[],"requestBody":{"description":"Search, filter, sort, and pagination parameters for user listing","typeName":"ICommunityPlatformUser.IRequest"},"responseBody":{"description":"Paginated list of user summaries that match the filters and sort order","typeName":"IPageICommunityPlatformUser.ISummary"},"authorizationType":null,"authorizationRole":"siteAdmin","name":"index","path":"/communityPlatform/siteAdmin/users","method":"patch","prerequisites":[]},{"specification":"Fetch a single user’s detailed profile from the community_platform_users table by its id (UUID). This read operation returns non-sensitive fields only (e.g., id, username, email, optional display_name, created_at, updated_at, last_login_at). It must never return password_hash or internal normalized keys (email_normalized, username_normalized). Implement ownership checks at the business layer so a regular authenticated user can retrieve only their own record, while administrators may access any user.","description":"Return one user account record from the Prisma model community_platform_users identified by id. The model contains id, email, email_normalized, username, username_normalized, password_hash, display_name?, last_login_at?, created_at, updated_at, and deleted_at?. Per schema comments, email_normalized and username_normalized enforce case-insensitive uniqueness; they are internal and should not be exposed. The password_hash column is strictly confidential and must never appear in responses.\n\nSecurity and permissions: Any authenticated user may retrieve only their own account; enforcement occurs in provider logic by comparing the path userId to the authenticated principal. Site administrators may be allowed to read any account according to policy. Soft-deleted accounts (deleted_at set) should typically be inaccessible to regular users unless policy requires otherwise.\n\nRelationships and context: Although a user is related to sessions, role flags, communities, posts, comments, and votes, this endpoint focuses on the primary account entity. Additional aggregates or flags (e.g., isSiteAdmin) may be computed by looking up rows in community_platform_siteadmins and community_platform_registeredmembers.\n\nValidation and errors: The path parameter userId must be a valid UUID. If the record does not exist or is not accessible to the caller, return a not-found or permission-denied error consistent with platform standards. Temporary errors should produce the standard recoverable message for clients.","summary":"Get a single account detail from community_platform_users by ID","parameters":[{"name":"userId","description":"Target user’s unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed user profile fields (excluding sensitive data)","typeName":"ICommunityPlatformUser"},"authorizationType":null,"authorizationRole":"registeredMember","name":"at","path":"/communityPlatform/registeredMember/users/{userId}","method":"get","prerequisites":[]},{"specification":"Update selected, non-sensitive fields of a user account in community_platform_users identified by id (UUID). Typical updates include display_name and profile basics; username/email changes must respect case-insensitive uniqueness using normalized columns (username_normalized, email_normalized) maintained by the application. This endpoint must not accept or return password_hash changes; password changes should be handled by a dedicated credential endpoint.","description":"Modify an existing user record in Prisma model community_platform_users addressed by id. The table contains id, email, email_normalized, username, username_normalized, password_hash, optional display_name, last_login_at, created_at, updated_at, and optional deleted_at. Based on schema comments, normalized columns enforce CI uniqueness; when updating email or username, the application should compute and persist the normalized forms consistently while validating uniqueness.\n\nSecurity and permissions: Only the account owner should be allowed to update their own profile fields under normal policy; a site administrator may override when necessary for compliance. This API must ignore attempts to modify password_hash and never echo it back. It must also prevent updates to immutable identifiers such as id and to server-managed timestamps (created_at, updated_at) except for system logic.\n\nRelationships and constraints: This operation does not directly manipulate sessions, role assignment tables, or content authored by the user. If username/email changes are permitted, ensure downstream references and caches reconcile appropriately. Soft-deleted users (deleted_at set) should be considered inactive/uneditable unless reactivation is implemented separately.\n\nError handling: Validate UUID format for userId. Enforce email/username case-insensitive uniqueness; on conflict return 409 with a suitable message. For forbidden ownership cases, return 403. On transient failures, return the standard temporary error message.","summary":"Update a user profile in community_platform_users by ID","parameters":[{"name":"userId","description":"Target user’s unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the user profile (e.g., display_name, optional username/email per policy)","typeName":"ICommunityPlatformUser.IUpdate"},"responseBody":{"description":"Updated user profile after applying changes","typeName":"ICommunityPlatformUser"},"authorizationType":null,"authorizationRole":"registeredMember","name":"update","path":"/communityPlatform/registeredMember/users/{userId}","method":"put","prerequisites":[]},{"specification":"Deactivate (soft-delete) a user account by setting deleted_at on the community_platform_users row identified by id (UUID). Because the model defines a nullable deleted_at, deletion should not physically remove the row; instead, mark it inactive for compliance and auditability. Downstream relations (sessions, role assignments, memberships, content) are preserved unless separate policies apply. Restoration would require a dedicated endpoint to clear deleted_at.","description":"Permanently remove a user account from normal visibility by marking it as deleted in the community_platform_users table. The Prisma schema defines deleted_at as an optional timestamp, enabling a soft deletion pattern. This operation should set deleted_at to the current timestamp to deactivate the account without dropping related records. The record will be excluded from standard queries unless explicitly included for compliance.\n\nSecurity and permissions: Typically, an authenticated user may request deactivation for their own account, and a site administrator may deactivate any account when required for policy/legal reasons. Business logic must verify authority before proceeding. After deactivation, existing sessions should be revoked via community_platform_sessions according to policy, and write actions must be blocked for the deactivated account.\n\nRelationships and behavior: Content authored by the user (communities, posts, comments, votes) remains in place per platform policy; this API does not cascade hard deletions. If additional cleanup is required, perform it in service logic while maintaining auditability. To reverse deactivation, implement a separate restore process that clears deleted_at under strict authorization.\n\nError handling: Validate userId as UUID. If the account is already deactivated (deleted_at not null), the operation may be idempotent. On success, return 204 No Content with no response body. For forbidden actions, return 403. For transient errors, surface the standard temporary error message.","summary":"Deactivate a user (set deleted_at) in community_platform_users by ID","parameters":[{"name":"userId","description":"Target user’s unique identifier (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"registeredMember","name":"erase","path":"/communityPlatform/registeredMember/users/{userId}","method":"delete","prerequisites":[]},{"specification":"Retrieve the authenticated account profile from the Prisma table community_platform_users. The operation returns canonical user properties (id, email, username, display_name, created_at, updated_at, last_login_at) and may enrich with role flags derived from related tables community_platform_registeredmembers and community_platform_siteadmins to help clients render guards. Records with users.deleted_at set are considered deactivated; provider logic should avoid exposing deactivated profiles as active. This endpoint is strictly read-only and does not modify any user data.","authorizationType":null,"authorizationRole":"registeredMember","description":"Fetch the current authenticated user’s profile based on the session context. The primary data source is the community_platform_users table, which stores account identity and profile basics including id (UUID), email/username (with case-insensitive uniqueness enforced via email_normalized and username_normalized), optional display_name, and audit timestamps created_at and updated_at. The last_login_at column reflects the most recent successful sign-in.\n\nSecurity and permissions: this endpoint requires an authenticated registered member session. The response is scoped to the caller only; no cross-account access is permitted. If the underlying user record has deleted_at populated, the account is considered deactivated and should not be treated as an active profile for write actions.\n\nEntity relationships: role assignment tables community_platform_registeredmembers and community_platform_siteadmins are related to community_platform_users for permission evaluation elsewhere. While their raw rows are not required in this response, providers can derive boolean flags (e.g., isRegisteredMember, isSiteAdmin) for client convenience if included in the DTO type. This endpoint is read-only and does not write to any tables.\n\nValidation and behavior: the provider should rely on the authenticated session for user identity and should not accept external identifiers. Errors should follow standardized copy for authentication failures (401 with “Please sign in to continue.”).","summary":"Get the authenticated user profile (community_platform_users).","parameters":[],"requestBody":null,"responseBody":{"description":"Authenticated user profile details sourced from community_platform_users (and optionally derived role flags).","typeName":"ICommunityPlatformUser"},"name":"at","path":"/communityPlatform/registeredMember/me","method":"get","prerequisites":[]},{"specification":"List the caller’s authentication sessions from the Prisma table community_platform_sessions. Each session represents a long-lived login with hashed_token, device/user agent hints, timestamps (created_at, updated_at, last_seen_at), lifecycle fields (expires_at, revoked_at), and optional deleted_at. The endpoint returns a paginated collection for account session management UIs (e.g., showing devices or recent activity).","authorizationType":null,"authorizationRole":"registeredMember","description":"Return the authenticated user’s sessions as stored in community_platform_sessions. Columns include id (UUID primary key), hashed_token (stored hash only; never expose plaintext), user_agent and ip (optional client hints), created_at/updated_at, last_seen_at for activity, expires_at for absolute lifetime, and revoked_at for explicit invalidation. A deleted_at column exists for retention workflows.\n\nSecurity and permissions: requires an authenticated registered member and returns only sessions where community_platform_user_id matches the caller. Providers should not expose hashed_token or any sensitive materials beyond what’s necessary for device identification; hashed_token remains opaque.\n\nPagination and ordering: sessions are typically listed by last_seen_at or created_at descending. Even though this is a GET endpoint, implementations should support pagination via query parameters (e.g., cursor and limit) consistent with platform patterns. Revoked or expired sessions may be included to improve transparency; clients can filter or label accordingly.\n\nError handling: 401 responses use the standardized message “Please sign in to continue.”. The endpoint is read-only and does not mutate session state (separate revoke/sign-out APIs can be used to invalidate sessions).","summary":"List authenticated user’s sessions (community_platform_sessions).","parameters":[],"requestBody":null,"responseBody":{"description":"Paginated list of the caller’s sessions with device and lifecycle metadata.","typeName":"IPageICommunityPlatformSession"},"name":"index","path":"/communityPlatform/registeredMember/me/sessions","method":"get","prerequisites":[]},{"specification":"Search and retrieve user restriction assignments from the Prisma table community_platform_guestvisitors. This table records account-level restriction states (e.g., read_only, suspended) for a community_platform_users account, with fields for restriction_type, restricted_until, restriction_reason, assigned_at, revoked_at, and audit timestamps. The operation supports administrative discovery with pagination, filtering, and sorting.","authorizationType":null,"authorizationRole":"siteAdmin","description":"This administrative operation returns a filtered, paginated set of user restriction records sourced from community_platform_guestvisitors. Each record links to a target user via community_platform_user_id and captures enforcement state including restriction_type (business allowed values include “read_only” and “suspended”), optional restricted_until (expiry), optional restriction_reason, assigned_at when the restriction was applied, and revoked_at when lifted. Standard audit fields include created_at and updated_at, while deleted_at may be used for retention without immediate physical removal.\n\nSecurity and permissions: access is limited to site administrators. The provider MUST validate the caller’s administrative role (related to community_platform_siteadmins). Non-admin callers must receive a 403 or 401 according to authentication/authorization status, using standardized copies.\n\nRequest and response structure: use the request body to supply filters such as by restriction_type, active-only (revoked_at is null), time windows using assigned_at or restricted_until, and pagination inputs (cursor, limit). Sorting commonly defaults to Newest by created_at (desc, then id desc). The response returns a page object containing data[] and pagination info for continuation.\n\nRelated operations: use GET /userRestrictions/{restrictionId} to retrieve a single record by ID when deeper inspection is required. Creation or updates of restriction states should be handled by dedicated admin workflows and are not part of this read/search endpoint.","summary":"Search user restriction assignments (community_platform_guestvisitors).","parameters":[],"requestBody":{"description":"Search criteria, filters, sorting, and pagination parameters for user restrictions.","typeName":"ICommunityPlatformUserRestriction.IRequest"},"responseBody":{"description":"Paginated results of user restriction assignments matching the criteria.","typeName":"IPageICommunityPlatformUserRestriction"},"name":"index","path":"/communityPlatform/siteAdmin/userRestrictions","method":"patch","prerequisites":[]},{"specification":"Retrieve a single user restriction assignment by ID from the Prisma table community_platform_guestvisitors. Returns canonical properties including restriction_type, restricted_until, restriction_reason, assigned_at, revoked_at, and audit timestamps, along with the associated community_platform_user_id.","authorizationType":null,"authorizationRole":"siteAdmin","description":"Get detailed information for a specific restriction record stored in community_platform_guestvisitors. The record includes id (UUID), community_platform_user_id (the affected account), restriction_type (values such as “read_only” or “suspended”), restricted_until (optional), restriction_reason (optional), assigned_at (start), and revoked_at (optional). Standard audit fields created_at and updated_at are present, and deleted_at may be used for retention without immediate physical removal.\n\nSecurity and permissions: this detail retrieval is restricted to site administrators due to the sensitive nature of account-level restrictions. Authentication failures should return 401 with the standard message, while authorization failures should return 403. The operation is read-only and does not modify any records.\n\nError handling: if the provided restrictionId does not correspond to an existing record, return an appropriate not-found response. This endpoint complements PATCH /userRestrictions, which provides search capabilities across many records.","summary":"Get a specific user restriction (community_platform_guestvisitors).","parameters":[{"name":"restrictionId","description":"Target restriction’s UUID.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"User restriction assignment details.","typeName":"ICommunityPlatformUserRestriction"},"name":"at","path":"/communityPlatform/siteAdmin/userRestrictions/{restrictionId}","method":"get","prerequisites":[]},{"specification":"Search, filter, sort, and paginate assignment records in the community_platform_registeredmembers table. This endpoint exposes administrative retrieval of membership status that grants write capabilities (post, comment, vote, join/leave). It returns summaries suitable for a management grid and supports deterministic ordering and cursor pagination based on (created_at desc, id desc). Consumers can filter by community_platform_user_id, active visibility (exclude rows where deleted_at is not null), and time ranges.","authorizationType":null,"description":"Retrieve a paginated, filterable list of registered member assignments from the community_platform_registeredmembers table. Per the Prisma schema comments, each row marks a community_platform_users account as an active registered member with write capabilities. The model defines: id (UUID primary key), community_platform_user_id (FK), registered_at (assignment time), created_at/updated_at for audit and ordering, and a nullable deleted_at used to hide deactivated records. A unique constraint on (community_platform_user_id) ensures a single assignment per user.\n\nSecurity and authorization: This is an administrative read operation intended for privileged operators. Access is restricted to users with the platform’s administrative privileges (siteAdmin). Read access should exclude deactivated rows by default by checking deleted_at is null, unless an explicit administrative filter is provided by business logic. No personal credentials are exposed; only assignment metadata is returned in summary form.\n\nRelationship to underlying entities: community_platform_registeredmembers.user references community_platform_users via community_platform_user_id with onDelete: Cascade, reflecting that removing a user account will also remove the member assignment. This endpoint is read-only; it does not modify user role state.\n\nValidation, sorting, and pagination: The request supports optional filters including community_platform_user_id and time windows (e.g., registered_at, created_at). Deterministic ordering follows platform rules: default sort by created_at descending, breaking ties with id descending. Cursor-based pagination uses the last item’s ordering tuple to continue without duplicates or gaps.\n\nRelated operations: Use GET /communityPlatform/siteAdmin/registeredMembers/{registeredMemberId} to retrieve a single assignment’s full detail. Administrative workflows that grant or revoke member capability are handled elsewhere and are not part of this read API.\n\nError handling: Invalid filters yield 400 responses. If the caller lacks permission, respond with 401/403 according to authentication/authorization checks. Temporary backend issues return a generic recoverable error message.","summary":"List/search registered member assignments (table: community_platform_registeredmembers).","parameters":[],"requestBody":{"description":"Search, filter, sort, and paginate registered members list.","typeName":"ICommunityPlatformRegisteredMember.IRequest"},"responseBody":{"description":"Paginated collection of registered member assignment summaries.","typeName":"IPageICommunityPlatformRegisteredMember.ISummary"},"authorizationRole":"siteAdmin","name":"index","prerequisites":[],"path":"/communityPlatform/siteAdmin/registeredMembers","method":"patch"},{"specification":"Retrieve a single registered member assignment from the community_platform_registeredmembers table by its primary key id. Returns full details of the assignment, including community_platform_user_id, registered_at, created_at, updated_at, and visibility status via deleted_at.","authorizationType":null,"description":"This operation fetches one record from community_platform_registeredmembers using its UUID id. The Prisma model marks a user as a registered member with fields: id (PK), community_platform_user_id (FK to community_platform_users), registered_at (when the capability was granted), created_at/updated_at, and deleted_at (nullable). The referenced user is linked with onDelete: Cascade.\n\nSecurity and permissions: Access is limited to administrators with siteAdmin privileges. Applications commonly hide records where deleted_at is not null; provider logic may treat such rows as inactive. This endpoint is strictly read-only and does not alter membership state.\n\nBehavior and errors: If the id does not correspond to an existing row or the row is hidden by policy, respond with 404. Invalid UUID formats result in 400. Authentication failures return 401, and authorization failures return 403. Transient errors should return a recoverable error response.","summary":"Get details of a registered member assignment by id (table: community_platform_registeredmembers).","parameters":[{"name":"registeredMemberId","description":"Target registered member assignment’s UUID.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Registered member assignment detail.","typeName":"ICommunityPlatformRegisteredMember"},"authorizationRole":"siteAdmin","name":"at","prerequisites":[],"path":"/communityPlatform/siteAdmin/registeredMembers/{registeredMemberId}","method":"get"},{"specification":"Search, filter, sort, and paginate administrator role assignments stored in the community_platform_siteadmins table. This endpoint serves administrative visibility into who holds site-wide privileges, exposing summaries and supporting deterministic ordering and cursor pagination using (granted_at desc, id desc). Filter options include community_platform_user_id, grant/revocation windows, and current active status via revoked_at nullity (and excluding rows where deleted_at is not null by default).","authorizationType":null,"description":"Retrieve a paginated list of site administrator assignments from the community_platform_siteadmins table. Per Prisma schema comments, this model grants administrative privileges to a community_platform_users account and records audit timestamps: id (PK), community_platform_user_id (FK), granted_at, optional revoked_at, created_at, updated_at, and deleted_at (nullable). A unique constraint on community_platform_user_id ensures a single assignment record per user (revocation tracked by updating revoked_at).\n\nSecurity and authorization: Only privileged administrators should access this listing. The endpoint requires siteAdmin role. By default, return only currently visible rows (e.g., where deleted_at is null). Clients may filter by active assignments (revoked_at is null) or include historical records by specifying filters defined in the request DTO.\n\nSorting and pagination: The default sort is granted_at descending, with a deterministic tie-breaker on id descending. Cursor-based pagination uses the last item’s (granted_at, id) tuple to continue the sequence without overlap or omission, aligned with platform-wide pagination rules.\n\nRelated operations: Use GET /communityPlatform/siteAdmin/siteAdmins/{siteAdminId} when a single assignment’s detail is needed. Role-granting and revocation actions are outside the scope of this read API and are handled by separate administrative workflows.\n\nError handling: Invalid filters return 400. Authentication/authorization failures return 401/403. Transient backend conditions return a recoverable error message.","summary":"List/search site administrator assignments (table: community_platform_siteadmins).","parameters":[],"requestBody":{"description":"Search criteria, sorting, and pagination for site admin assignments.","typeName":"ICommunityPlatformSiteAdmin.IRequest"},"responseBody":{"description":"Paginated collection of site admin assignment summaries.","typeName":"IPageICommunityPlatformSiteAdmin.ISummary"},"authorizationRole":"siteAdmin","name":"index","prerequisites":[],"path":"/communityPlatform/siteAdmin/siteAdmins","method":"patch"},{"specification":"Retrieve a single administrator role assignment from the community_platform_siteadmins table by its primary key id. Provides full details, including community_platform_user_id, granted_at, revoked_at (if any), created_at, updated_at, and deleted_at.","authorizationType":null,"description":"Fetch one site administrator assignment by id from community_platform_siteadmins. The Prisma schema defines: id (PK), community_platform_user_id (FK to community_platform_users), granted_at (when admin privileges were granted), optional revoked_at (revocation time), created_at/updated_at for audit, and a nullable deleted_at flag used to hide removed records. The FK relation cascade behavior ensures referential integrity with the owning user.\n\nSecurity: Access requires siteAdmin privileges. Records with deleted_at set are typically hidden; this endpoint is read-only and does not alter privileges.\n\nBehavior and errors: Return 404 if the id is not found or is hidden by policy. Return 400 for invalid UUID formats. Return 401/403 for authentication/authorization failures. Temporary failures return a recoverable error response.","summary":"Get details of a site administrator assignment by id (table: community_platform_siteadmins).","parameters":[{"name":"siteAdminId","description":"Target site administrator assignment’s UUID.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Site administrator assignment detail.","typeName":"ICommunityPlatformSiteAdmin"},"authorizationRole":"siteAdmin","name":"at","prerequisites":[],"path":"/communityPlatform/siteAdmin/siteAdmins/{siteAdminId}","method":"get"},{"specification":"Provide a cursor-based, filterable index of authentication sessions for the currently authenticated user. Operates on the community_platform_sessions table in Prisma. Returns session summaries ordered for management UIs, supporting pagination (page size ~20 by convention), optional lastSeen/expiry windows, and sorting consistent with long-lived session UX. Output excludes records where revoked_at is set or where expires_at has passed unless explicitly requested by business logic. Uses ISO-8601 timestamps.","authorizationType":null,"description":"Retrieve a paginated list of the current user’s authentication sessions sourced from the community_platform_sessions table. The schema defines core columns used for session management and audit, including id (UUID), community_platform_user_id, hashed_token (never exposed in plaintext), user_agent, ip, client_platform, client_device, session_type, created_at, updated_at, last_seen_at, expires_at, revoked_at, and deleted_at. Client UIs typically show device hints and last activity while masking sensitive internals.\n\nSecurity and permissions: access is restricted to authenticated users viewing their own sessions. Provider logic must enforce that only sessions belonging to the requester’s community_platform_user_id are returned. Revoked or expired sessions may be excluded by default to align with a clean “active sessions” view; administrative or troubleshooting tools can include them when appropriate.\n\nRelationship to underlying entities: each session belongs to a community_platform_users record via community_platform_user_id (onDelete: Cascade). Listing sessions is often paired with endpoints to revoke a specific session or to refresh the current one. Records where revoked_at is not null or expires_at is reached should be treated as inactive; records where deleted_at is not null are considered deactivated for retention reasons and should be filtered from normal results.\n\nValidation and business rules: this index supports pagination using a cursor derived from created_at and id (for deterministic Newest ordering) and may support filtering by session_type, last_seen_at windows, or status (active vs revoked/expired). Timestamps must be returned in ISO-8601 UTC. Sensitive fields like hashed_token are never returned.\n\nRelated operations: GET /sessions/{sessionId} returns an individual session detail. Authentication refresh and sign-out flows are implemented elsewhere and may leverage this listing for device/session management UIs. Error handling should return a standardized 401 message when unauthenticated and generic temporary error copy for transient failures.","summary":"List authentication sessions for current user (community_platform_sessions)","parameters":[],"requestBody":{"description":"Search, filter, sort, and pagination criteria for listing the user’s sessions.","typeName":"ICommunityPlatformSession.IRequest"},"responseBody":{"description":"Paginated session summaries for the authenticated user, suitable for a sessions management UI.","typeName":"IPageICommunityPlatformSession.ISummary"},"authorizationRole":"registeredMember","name":"index","prerequisites":[],"path":"/communityPlatform/registeredMember/sessions","method":"patch"},{"specification":"Retrieve a single authentication session by its identifier from the community_platform_sessions table. Intended for session management UIs where a user inspects details of a specific session (e.g., device info, last activity, expiry). Enforces ownership by verifying the session belongs to the authenticated user.","authorizationType":null,"description":"Fetch one session from community_platform_sessions using its id (UUID). The table includes fields id, community_platform_user_id, hashed_token (hash only), user_agent, ip, client_platform, client_device, session_type, created_at, updated_at, last_seen_at, expires_at, revoked_at, and deleted_at. Presentation should include device and timing metadata; never expose raw tokens.\n\nSecurity: only authenticated users may call this endpoint, and only for sessions associated with their own community_platform_user_id. Sessions where revoked_at is set or expires_at is in the past are considered inactive and may still be shown for history depending on product requirements; records with deleted_at set are treated as deactivated and should not be returned in normal flows.\n\nBehavior and errors: Return the full session view object for valid ownership checks. If the identifier does not belong to the caller, respond with authorization failure. Use ISO-8601 UTC timestamps and preserve exact stored values for created_at, updated_at, last_seen_at, and expires_at. This detail API is often used in concert with a revoke operation to invalidate a specific session.","summary":"Get a session by ID (community_platform_sessions)","parameters":[{"name":"sessionId","description":"Target session’s ID (UUID) to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed session information for the requested identifier, owned by the current user.","typeName":"ICommunityPlatformSession"},"authorizationRole":"registeredMember","name":"at","prerequisites":[],"path":"/communityPlatform/registeredMember/sessions/{sessionId}","method":"get"},{"specification":"Search and paginate sub-communities from the community_platform_communities table. Supports discovery use cases (Explore and Search tabs) with optional category filtering and deterministic ordering. Returns summary cards with essential branding, counts, and timing. The request model carries the query, sorting preferences (e.g., recently created vs name-driven strategies handled by higher-level search), and cursor pagination.\n","authorizationType":null,"description":"This operation returns a paginated list of communities based on the community_platform_communities table. Key columns include id, community_platform_user_id (creator), name, name_key (normalized uniqueness), category, description, logo_uri, banner_uri, last_active_at, created_at, updated_at, and deleted_at. Client UIs commonly present name, short description, logo/banner (when present), created timing, and membership count (computed from community_platform_community_members) without exposing underlying IDs.\n\nSecurity and visibility: the endpoint is public for reading. Normal responses should exclude records where deleted_at is set, ensuring only active communities are listed. Content is readable to all roles.\n\nOrdering and pagination: default ordering for Explore lists is by recently created (created_at desc, then id desc for ties). Category filtering is supported via the category column, and name-based matching may be applied at the application layer using name/name_key and trigram indexes defined in the schema. Use cursor-based pagination derived from the active sort’s key tuple to return 20 items per page by default, with deterministic continuation.\n\nRelated tables and counts: memberCount in cards can be derived from community_platform_community_members per community, counting rows where deleted_at is null. Rules shown in the right sidebar originate from community_platform_community_rules; only the top 5 rules (by order_index) are commonly displayed on detail pages and are not required in this listing response.\n\nError handling: transient failures return standard temporary error copy; validation errors on filters return 400-series responses with clear messages. Timestamps are ISO-8601 in UTC.","summary":"Search and list communities (community_platform_communities)","parameters":[],"requestBody":{"description":"Search, filter, sort, and pagination parameters for communities discovery.","typeName":"ICommunityPlatformCommunity.IRequest"},"responseBody":{"description":"Paginated collection of community summary cards matching the request criteria.","typeName":"IPageICommunityPlatformCommunity.ISummary"},"authorizationRole":null,"name":"index","prerequisites":[],"path":"/communityPlatform/communities","method":"patch"},{"specification":"Create a new sub-community record in the community_platform_communities table and, when provided, its initial rules in community_platform_community_rules. Enforces immutable name via name/name_key conventions and ensures a single category is selected. The authenticated creator is recorded via community_platform_user_id, and application logic may auto-join the creator by inserting into community_platform_community_members.","authorizationType":null,"description":"This operation creates a community backed by the community_platform_communities table. Fields include name (immutable at the application level), name_key (lowercased/normalized for uniqueness), category (single selection), optional description, logo_uri, banner_uri, and timestamps created_at/updated_at. The creator is stored in community_platform_user_id with a relation to community_platform_users. If rules are provided, they are stored in community_platform_community_rules with order_index and text, linked via community_platform_community_id.\n\nSecurity and permissions: creation requires authentication. Only the authenticated user is set as creator (community_platform_user_id). After creation, business logic may insert a membership row into community_platform_community_members for the creator so the community appears in personalized feeds and counts; member counts are computed from membership rows where deleted_at is null.\n\nValidation and business rules: enforce name formatting and case-insensitive uniqueness (name_key). The name is immutable after creation; category must be selected from the allowed set at the application level. Optional branding URIs (logo_uri, banner_uri) can be stored as URI strings. Records with deleted_at set are considered inactive and should not be created through this API; instead, create only active communities. On success, return the full community representation, including timestamps and any initial rules created.\n\nRelated operations: community discovery via PATCH /communities and community detail retrieval endpoints (not shown here) commonly follow creation. Error handling returns standardized messages for name conflicts and invalid name formats, with generic temporary error copy for transient failures.","summary":"Create a community (community_platform_communities)","parameters":[],"requestBody":{"description":"Community creation payload including immutable name, category, optional description/branding, and optional initial rules.","typeName":"ICommunityPlatformCommunity.ICreate"},"responseBody":{"description":"Newly created community with persisted fields and creator linkage.","typeName":"ICommunityPlatformCommunity"},"authorizationRole":"registeredMember","name":"create","prerequisites":[],"path":"/communityPlatform/registeredMember/communities","method":"post"},{"specification":"Retrieve a single community record by immutable name from the community_platform_communities table. The endpoint accepts the human-friendly community name in the path, normalizes it to the case-insensitive key (name_key), and returns the community’s detailed DTO including core branding fields (description, logo_uri, banner_uri), category, activity timestamps (created_at, last_active_at, updated_at), and derived flags (e.g., isOwner/isMember computed at application layer) and member count based on community_platform_community_members. Clients use this for Community Home and Post Detail right-sidebar “Community Info + Rules”, typically pairing this with a rules listing call to show the top 5 numbered rules (from community_platform_community_rules).","authorizationType":null,"description":"Purpose and Overview:\nFetch detailed information for a single sub‑community identified by its immutable name. The underlying Prisma model is community_platform_communities, which defines an owner via community_platform_user_id, the display/URL name (name) and a normalized case-insensitive uniqueness key (name_key), a single category, optional description, and optional branding URIs (logo_uri, banner_uri). Timestamps include created_at, updated_at, and an optional last_active_at for recent activity displays. Records that have been removed from visibility are excluded by the application using the deleted_at column.\n\nSecurity and Permissions:\nThis read operation is public and requires no authentication. Ownership does not affect read access; however, the application may compute isOwner or isMember flags in the response for the current session context using community_platform_users and community_platform_community_members. Administrative overrides (community_platform_siteadmins) affect write operations, not reads.\n\nDatabase Relationships:\nCommunity rules are stored in community_platform_community_rules with order_index and text fields, and posts in community_platform_posts. Both are associated via the community’s id. Member counts derive from community_platform_community_members (distinct user rows for the community), while the left sidebar “Recent Communities” uses community_platform_recent_communities to record per-user last_activity_at for up to five items.\n\nValidation and Business Logic:\nThe path parameter communityName represents the user-facing name (name). The server normalizes it to name_key to enforce case-insensitive lookup, rejecting reserved names by business rule and returning a not-found result when no active record exists (e.g., deleted_at is set). The name is immutable after creation per requirements; this endpoint never changes it.\n\nRelated Operations and Usage:\nUse this endpoint to populate Community Home (/c/[name]) and Post Detail sidebars. For the numbered “Community Rules” section, clients typically call the rules listing endpoint to retrieve ordered rule items limited to the top 5 by order_index.\n\nError Handling:\nIf the community does not exist or is not visible, return a not-found response. Transient errors should use the platform’s standard temporary error message, and clients may retry.","summary":"Get a community by name from community_platform_communities.","parameters":[{"name":"communityName","description":"Immutable community name used to locate the record (normalized to name_key for lookup).","schema":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$"}}],"requestBody":null,"responseBody":{"description":"Detailed community information for the provided name.","typeName":"ICommunityPlatformCommunity"},"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/communities","method":"post"},"description":"A community must be created before it can be retrieved by its immutable name. If no community exists for the provided name, the GET operation would return not found."}],"path":"/communityPlatform/communities/{communityName}","method":"get"},{"specification":"Update mutable metadata for a community stored in the community_platform_communities table, identified by its immutable name. Fields eligible for modification per schema comments include description, logo_uri, banner_uri, and category. The name and its case-insensitive key (name_key) are immutable. The operation enforces ownership by comparing the authenticated user to community_platform_user_id; site-level administrators (community_platform_siteadmins) may override. On success, the endpoint returns the updated community DTO.","authorizationType":null,"description":"Purpose and Overview:\nThis operation updates a community’s mutable metadata in community_platform_communities. The model defines name (immutable at the application layer) and name_key (normalized CI uniqueness). Other columns include category (single value), optional description, optional logo_uri and banner_uri, last_active_at (optional), and standard timestamps (created_at, updated_at). The update targets description, logo_uri, banner_uri, and category; it never changes name or name_key.\n\nSecurity and Permissions:\nAuthentication is required (registered member). Only the creator (matched via community_platform_user_id) or a site administrator (recorded in community_platform_siteadmins) may perform this update. Authorization is enforced in business logic; unauthorized requests must be rejected with the platform’s standard ownership message. This endpoint is restricted to metadata editing and does not grant moderation rights through membership.\n\nDatabase and Relationships:\nThe target record is located by normalizing the path communityName to name_key. The community remains linked to rule items in community_platform_community_rules, memberships in community_platform_community_members, and posts in community_platform_posts. Editing metadata does not affect those relationships. The updated_at field should reflect the modification time; last_active_at is typically maintained by activity signals (e.g., posting/commenting) rather than by this endpoint.\n\nValidation and Business Logic:\nInput values must respect business rules: category must be chosen from the fixed set defined by requirements; description length (≤ 500 chars) should be enforced application-side; logo_uri and banner_uri are string URIs. The record must be active (deleted_at null) and identifiable by name_key. Name immutability is enforced; attempts to rename are invalid.\n\nRelated Operations and Usage:\nCombine with GET /communities/{communityName} to fetch current values and with the rules listing endpoint to manage or display rules. Deletion (DELETE /communities/{communityName}) permanently removes the community and its dependent data.\n\nError Handling:\nUnauthorized callers receive a forbidden response with the standard copy. Nonexistent or removed communities return not-found. Invalid inputs yield bad-request with clear messages. Transient issues return the platform’s standard temporary error message.","summary":"Update community metadata in community_platform_communities (name immutable).","parameters":[{"name":"communityName","description":"Immutable community name identifying the target community (normalized to name_key).","schema":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$"}}],"requestBody":{"description":"Fields to update for the community (description, logoUri, bannerUri, category).","typeName":"ICommunityPlatformCommunity.IUpdate"},"responseBody":{"description":"Updated community details after applying changes.","typeName":"ICommunityPlatformCommunity"},"authorizationRole":"registeredMember","name":"update","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/communities","method":"post"},"description":"The community must be created first so that it exists and can be located by its immutable name before updating its metadata."}],"path":"/communityPlatform/registeredMember/communities/{communityName}","method":"put"},{"specification":"Permanently delete a community identified by immutable name from the community_platform_communities table. This hard delete cascades to dependent entities through relational constraints: community_platform_posts, community_platform_community_rules, community_platform_community_members, and community_platform_recent_communities all reference the community id and are removed by onDelete: Cascade behaviors. The operation is reserved for the community’s creator (community_platform_user_id) and site administrators (community_platform_siteadmins).","authorizationType":null,"description":"Purpose and Overview:\nRemove a community and all associated data from user-visible surfaces by deleting the record in community_platform_communities. The model includes name (immutable), name_key (normalized uniqueness), category, description, branding URIs, activity timestamps, and standard auditing timestamps. This operation performs a hard delete: records are completely removed and cannot be recovered.\n\nSecurity and Permissions:\nOnly the creator (matched via community_platform_user_id) or a site administrator may perform the deletion. Authentication as a registered member is required; business logic must enforce ownership checks and administrative overrides using community_platform_siteadmins. Non-owners must receive the standard ownership denial message.\n\nRelationship and Cascade Behavior:\nDeleting a community cascades to related data: posts in community_platform_posts (and their votes/comments), community rules in community_platform_community_rules, memberships in community_platform_community_members, and recent entries in community_platform_recent_communities are removed via relational onDelete: Cascade definitions. From a user perspective, the deletion appears atomic; after success, the community and its posts no longer appear in feeds, search, or sidebars.\n\nValidation and Business Logic:\nThe target is located by normalizing communityName to name_key. If the community cannot be found, return not-found. Once deletion succeeds, the name may be reusable per business policy since the prior record is gone. Because this is a permanent removal, clients should confirm destructive intent before invoking.\n\nRelated Operations and Usage:\nUse GET /communities/{communityName} to verify the target before deletion. After deletion, subsequent reads of the same name must return not-found. For metadata edits instead of removal, use PUT /communities/{communityName}.\n\nError Handling:\nUnauthorized requests are forbidden with the platform’s standard copy. Nonexistent targets return not-found. Transient failures use the standard temporary error message. Successful deletion returns no content.","summary":"Delete a community (hard delete) from community_platform_communities and cascade dependent data.","parameters":[{"name":"communityName","description":"Immutable community name identifying the target to remove (normalized to name_key).","schema":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$"}}],"requestBody":null,"responseBody":null,"authorizationRole":"registeredMember","name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/communities","method":"post"},"description":"The community must exist (created beforehand) to be found by name and eligible for deletion."}],"path":"/communityPlatform/registeredMember/communities/{communityName}","method":"delete"},{"specification":"List and search ordered rule items for a community from the community_platform_community_rules table. The endpoint accepts a community name, resolves it to the community id, and returns a paginated, optionally filtered set of rules (text up to ~100 chars each) ordered by order_index. This is a read operation for the “Community Rules” box shown on Community Home and Post Detail, typically returning the top 5 numbered rules. Supports cursor-based pagination, optional text search, and sort direction by order_index or created_at as needed for moderation views.","authorizationType":null,"description":"Purpose and Overview:\nRetrieve rule items associated with a community for display in the right‑sidebar “Community Rules” section. The underlying model community_platform_community_rules stores per‑community ordered rules with order_index (starting at 1) and text. The parent community is identified via community_platform_communities by normalizing communityName to name_key and resolving its id. This endpoint returns a list with pagination suited for showing the top 5 rules by order, while also supporting larger lists for management views.\n\nSecurity and Permissions:\nThis is a public read operation. No authentication is required to list rules belonging to a visible community. Administrative or owner permissions are only required when creating, editing, or reordering rules (handled by separate write endpoints, not this read operation).\n\nDatabase Relationships:\nEach rule row belongs to exactly one community via community_platform_community_id. The rules are typically rendered in numeric order (order_index ascending). The rule text column (text) is concise (~≤100 chars), and timestamps (created_at, updated_at) exist for audit. Soft deletion is supported via deleted_at; the read operation should exclude removed items by default unless explicitly requested via filters.\n\nValidation and Business Logic:\nRequests include pagination parameters (e.g., cursor and limit), sort options (default order_index ascending for display; created_at for maintenance), and optional text search filtered against the text field. The community must exist and be active (deleted_at null) for results to be returned. The API enforces deterministic ordering and stable cursor windows so that paging avoids duplicates or omissions.\n\nRelated Operations and Usage:\nClients commonly call GET /communities/{communityName} to render community header details and then this endpoint to fetch rule items (top 5 for the box). Owner‑level edits to community metadata use PUT /communities/{communityName}; rule creation or reordering is outside the scope of this read operation.\n\nError Handling:\nIf the community is not found or not visible, return not-found. Transient errors use the standard temporary error message. Pagination cursors that are malformed should return a bad-request response with a clear message.","summary":"List community rules from community_platform_community_rules for a given community.","parameters":[{"name":"communityName","description":"Immutable community name whose rules will be listed (normalized to name_key).","schema":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$"}}],"requestBody":{"description":"Search and pagination parameters for listing community rules (cursor, limit, sort, text filter).","typeName":"ICommunityPlatformCommunityRule.IRequest"},"responseBody":{"description":"Paginated list of rule items for the target community.","typeName":"IPageICommunityPlatformCommunityRule"},"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/communities","method":"post"},"description":"The parent community must be created so {communityName} can resolve to a valid community before listing its rules."}],"path":"/communityPlatform/communities/{communityName}/rules","method":"patch"},{"specification":"Retrieve a single Community Rule record by its identifier within the context of a specific Community. This operation reads from the Communities schema tables: community_platform_community_rules (rule items) and community_platform_communities (parent community). It validates that the rule (community_platform_community_rules.id) belongs to the community identified by {communityName} (matched to community_platform_communities via name/name_key at the application layer). Returns the full Community Rule entity for use in management UIs and Right Sidebar rendering logic.","authorizationType":null,"description":"Fetch one rule item that appears under the \"Community Rules\" section for a given community. The underlying Prisma table community_platform_community_rules stores short ordered rules associated with a community (columns: id, community_platform_community_id, order_index, text, created_at, updated_at, deleted_at). Business rules specify concise text (≈ ≤100 chars) and ordered presentation; only the top five by order_index are commonly displayed on the Community Info + Rules box.\n\nSecurity and permissions: This is a read-only operation on public community metadata and is accessible to all users, including unauthenticated visitors. Authoring constraints (only the community owner or siteAdmin may modify rules) do not restrict reads. Implementers should still ensure that if a community or rule has been marked deleted (deleted_at set), the resource is not returned in normal listings and is treated as unavailable.\n\nDatabase relationships: Each rule is tied to a parent community via community_platform_community_rules.community_platform_community_id referencing community_platform_communities.id. The community itself has immutable name and a normalized key (name_key) for case-insensitive uniqueness, as described in the community_platform_communities model. The operation must ensure the requested ruleId belongs to the community identified by communityName before returning it.\n\nValidation and expected behavior: The path parameter communityName follows the platform’s naming policy (alphanumeric with hyphen/underscore, length 3–30, immutable post-creation). The ruleId is a UUID. If either the community does not exist, has been removed (deleted_at set), or the rule does not exist within that community (including when deleted_at is set), respond with a not-found outcome per provider conventions. Related operations include: POST to create a rule for a community, PUT to modify an existing rule, and DELETE to mark a rule as deleted while preserving history.","summary":"Get a community rule (community_platform_community_rules) by ID within a named community","parameters":[{"name":"communityName","description":"Immutable community name used to resolve the parent community","schema":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$"}},{"name":"ruleId","description":"Target rule identifier (UUID) within the specified community","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete community rule entity","typeName":"ICommunityPlatformCommunityRule"},"authorizationRole":null,"name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/communities","method":"post"},"description":"The parent community must be created to resolve {communityName} and scope the rule lookup."},{"endpoint":{"path":"/communityPlatform/registeredMember/communities/{communityName}/rules","method":"post"},"description":"The specific rule must be created under the given community before it can be retrieved by its ID."}],"path":"/communityPlatform/communities/{communityName}/rules/{ruleId}","method":"get"},{"specification":"Create a new Community Rule under a specific Community. This operation writes to the community_platform_community_rules table and associates the new rule to the parent community resolved from {communityName} (community_platform_communities). It expects an ICommunityPlatformCommunityRule.ICreate payload with rule text and order, and returns the created ICommunityPlatformCommunityRule entity.","authorizationType":null,"description":"This endpoint creates a concise, ordered rule item for display in the \"Community Rules\" section. In the Prisma schema, community_platform_community_rules defines: id (UUID), community_platform_community_id (FK to the parent community), order_index (Int for display order starting at 1), text (short content ~≤100 chars), created_at, updated_at, and deleted_at (for visibility control). The unique constraint on (community_platform_community_id, order_index) ensures that no two rules share the same order within a community; note that this uniqueness applies even to rows with deleted_at set unless the application purges or adjusts them.\n\nSecurity and permissions: Only authenticated users who own the target community (or a siteAdmin) may add rules. Assign this endpoint to registered members at the controller level (authorizationRole \"registeredMember\") and enforce ownership/administrator checks in the provider. Guests receive an authentication-required outcome per platform conventions. If the parent community is not found or is removed (deleted_at set), the operation must fail appropriately.\n\nRelationship and validation: The {communityName} path parameter identifies the community via name/name_key in community_platform_communities. The request body provides order and text that map to order_index and text in community_platform_community_rules. Enforce business constraints: order_index must be a positive integer and unique within the community; text should be concise (≈ ≤100 chars). On success, the response returns the created rule with timestamps. If the order_index conflicts with an existing rule for the same community (including soft-deleted rows if they remain), return a conflict outcome. This operation complements GET (read), PUT (update), and DELETE (mark as deleted) for complete lifecycle management of rules.","summary":"Create a community rule (community_platform_community_rules) under a named community","parameters":[{"name":"communityName","description":"Immutable community name used to resolve the parent community","schema":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$"}}],"requestBody":{"description":"New rule data to create under the specified community","typeName":"ICommunityPlatformCommunityRule.ICreate"},"responseBody":{"description":"Created community rule entity","typeName":"ICommunityPlatformCommunityRule"},"authorizationRole":"registeredMember","name":"create","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/communities","method":"post"},"description":"Parent Community must exist before a rule can be created under it. If no community matches {communityName}, rule creation will fail with a not-found or validation error."}],"path":"/communityPlatform/registeredMember/communities/{communityName}/rules","method":"post"},{"specification":"Update an existing Community Rule belonging to a specific Community. This operation targets the community_platform_community_rules record identified by {ruleId} after verifying it belongs to the community resolved by {communityName}. It accepts an ICommunityPlatformCommunityRule.IUpdate payload to modify fields such as order_index and text, and returns the updated ICommunityPlatformCommunityRule.","authorizationType":null,"description":"Modify the text and/or order of a rule item displayed in a community’s \"Community Rules\" section. The Prisma table community_platform_community_rules tracks fields: id, community_platform_community_id (FK), order_index, text, created_at, updated_at, and deleted_at. Update operations should not allow changing the parent community; instead, they update only mutable attributes (e.g., text, order_index). The uniqueness constraint on (community_platform_community_id, order_index) remains enforced, including for rows with deleted_at set unless altered by application logic.\n\nSecurity and permissions: Only the community owner or siteAdmin can update rules. Configure endpoint access for authenticated members (authorizationRole \"registeredMember\") with an ownership/administrator check in business logic. If the user lacks permission, return a forbidden outcome per the platform’s standardized message. Rules marked deleted (deleted_at set) are considered unavailable for normal edits.\n\nValidation and behavior: Confirm the ruleId is a UUID and that the rule belongs to the community derived from {communityName}. Validate that text remains concise (≈ ≤100 chars) and that order_index remains a positive integer and unique within the community. If attempting to set an order_index that duplicates another existing rule for the same community (including soft-deleted rows if they remain), return a conflict outcome. On success, return the updated rule including updated_at. Related endpoints: GET retrieves the rule, POST creates a new rule, and DELETE marks the rule as deleted while preserving history.","summary":"Update a community rule (community_platform_community_rules) within a named community","parameters":[{"name":"communityName","description":"Immutable community name used to resolve the parent community","schema":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$"}},{"name":"ruleId","description":"Identifier of the rule to update (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for the specified rule","typeName":"ICommunityPlatformCommunityRule.IUpdate"},"responseBody":{"description":"Updated community rule entity","typeName":"ICommunityPlatformCommunityRule"},"authorizationRole":"registeredMember","name":"update","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/communities","method":"post"},"description":"The target Community must be created first to resolve {communityName}; otherwise the rule update cannot locate its parent and will fail."},{"endpoint":{"path":"/communityPlatform/registeredMember/communities/{communityName}/rules","method":"post"},"description":"A rule must already exist to be updated. This creates the rule (providing ruleId) so the PUT can succeed; without it, the update would fail as not found."}],"path":"/communityPlatform/registeredMember/communities/{communityName}/rules/{ruleId}","method":"put"},{"specification":"Remove a Community Rule associated with a given Community by marking it deleted. This operation locates the community_platform_community_rules record by {ruleId}, verifies ownership via the parent community resolved from {communityName}, and performs a soft deletion by setting deleted_at. No response body is returned.","authorizationType":null,"description":"This operation marks a rule as deleted by setting the deleted_at timestamp in community_platform_community_rules, making it invisible to normal reads while preserving historical integrity. The model’s columns include id, community_platform_community_id, order_index, text, created_at, updated_at, and deleted_at. Because rules are ordered snippets used for the \"Community Rules\" box, soft deletion maintains referential consistency while allowing recovery or audit if required by policy.\n\nSecurity and permissions: Only the community owner or siteAdmin may delete (mark as deleted) a rule. Gate this endpoint to authenticated members (authorizationRole \"registeredMember\") and enforce ownership/administrator checks in business logic. Guests should receive an authentication-required outcome. If the rule or community does not exist—or the rule is not part of the specified community—return a not-found outcome.\n\nExpected behavior and errors: Ensure the rule belongs to the community resolved from {communityName} before applying deletion. After marking deleted, subsequent reads must exclude it from standard lists and counts. If the rule is already deleted, the operation may be treated as idempotent. Related operations: POST to create a rule, GET to read a specific rule, and PUT to edit existing rules.","summary":"Delete (mark deleted_at) a community rule in community_platform_community_rules","parameters":[{"name":"communityName","description":"Immutable community name used to resolve the parent community","schema":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$"}},{"name":"ruleId","description":"Identifier of the rule to remove (UUID)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"registeredMember","name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/communities","method":"post"},"description":"The parent Community identified by {communityName} must exist to validate ownership and locate the rule; deletion otherwise fails."},{"endpoint":{"path":"/communityPlatform/registeredMember/communities/{communityName}/rules","method":"post"},"description":"The rule must exist before it can be deleted. This creates the rule so the DELETE can target an existing record; otherwise it would return not found."}],"path":"/communityPlatform/registeredMember/communities/{communityName}/rules/{ruleId}","method":"delete"},{"specification":"Retrieve up to five most recent communities for the authenticated user based on the Memberships component. This operation reads from the community_platform_recent_communities table (primary entity) and joins to community_platform_communities to obtain display fields such as name, logo_uri, banner_uri, category, and to community_platform_users via the user foreign key for ownership linkage. Ordering follows last_activity_at descending, capped to five items as defined by the business rules for the Left Sidebar Recent Communities.\n\nThe result is intended to power the Left Sidebar’s “Recent Communities” module. Only rows where recent_communities.deleted_at is null and communities.deleted_at is null are considered visible. Implementations should ensure the name_key normalization of communities is respected when constructing response DTOs.\n\nDTO namespace uses the CommunityPlatform service prefix. Response DTO type ICommunityPlatformRecentCommunity.IList encapsulates an array of recent community cards and auxiliary metadata if needed.","authorizationType":null,"description":"Return the current user’s most recently active communities to render the Left Sidebar list. According to the Prisma schema, the community_platform_recent_communities table tracks per-user recency with last_activity_at, and enforces uniqueness per (community_platform_user_id, community_platform_community_id). The operation filters out any rows where either the recency record or the referenced community has a non-null deleted_at and sorts by last_activity_at in descending order.\n\nSecurity and permissions: Access requires an authenticated session associated with a row in community_platform_users. The result is scoped to the calling user and does not expose another user’s recency list. Rate-limiting may be applied for defensive purposes but should preserve responsiveness.\n\nDatabase relationships: Each record links to community_platform_users via community_platform_user_id and to community_platform_communities via community_platform_community_id. For each returned item, clients commonly display community name (from community_platform_communities.name), optional logo_uri, and last_activity_at from community_platform_recent_communities. Implementations may also include a derived memberCount computed from community_platform_community_members where deleted_at is null to align with display needs, though the primary source table for this list is community_platform_recent_communities.\n\nValidation and business logic: The list is capped to a maximum of five most recent items as described in the requirements. When a community is removed from visibility, its appearance should disappear from this list immediately by virtue of the deleted_at filter on the community reference. Timestamps in the response should be ISO-8601 in UTC; clients render relative time in the user’s locale.\n\nRelated operations: Joining/leaving communities and other actions like visiting a community, posting, commenting, or voting are expected to update last_activity_at via application signals. See the membership update operation for how join/leave affects this list.\n\nError handling: If the caller is unauthenticated, return an authorization error consistent with the platform’s standardized copy. Transient errors should return a temporary error message allowing retry.","summary":"Get the current user’s recent communities from community_platform_recent_communities","parameters":[],"requestBody":null,"responseBody":{"description":"Container holding up to five recent community items ordered by last_activity_at descending for the authenticated user.","typeName":"ICommunityPlatformRecentCommunity.IList"},"authorizationRole":"registeredMember","name":"index","path":"/communityPlatform/registeredMember/me/recentCommunities","method":"get","prerequisites":[]},{"specification":"Search and paginate posts within a specific sub-community using the Posts component. This operation targets the community_platform_posts table and filters rows by the community identified via the path parameter {communityName}. The community match uses community_platform_communities.name (application should normalize to name_key for case-insensitive uniqueness). Sorting supports Newest (created_at desc, then id desc) and Top (score desc, then created_at desc, then id desc), where score is derived from community_platform_post_votes (sum of value where value ∈ {-1, 1} and deleted_at is null).\n\nThe request body follows ICommunityPlatformPost.IRequest to carry sort, cursor, and limit for deterministic, cursor-based pagination. The response uses IPageICommunityPlatformPost.ISummary to return a page of post cards and pageInfo with next cursor, optimized for list displays.\n\nOnly posts where community_platform_posts.deleted_at is null are included. The community itself must also be active (community_platform_communities.deleted_at null).","authorizationType":null,"description":"Provide a paginated, sortable list of posts for the target community. In the Prisma schema, community_platform_posts contains title, body, author_display_name, created_at, and updated_at, as well as foreign keys to community_platform_communities (community scope) and community_platform_users (author). This operation filters by the target community resolved from {communityName} and excludes posts that are not visible by checking deleted_at.\n\nSecurity considerations: Reading is public; no authentication is required to fetch community posts. However, if the client supplies an authenticated context, additional personalization fields like myVote may be included by application logic using community_platform_post_votes for the calling user.\n\nSorting and tie-breakers: When sort=newest, order by created_at descending and break ties by id descending as per deterministic rules. When sort=top, compute score from community_platform_post_votes (sum of value), order by score descending; if scores are equal, order by created_at descending; if still equal, order by id descending. Pagination cursors must encode the active sort’s ordering tuple to ensure stable continuation without duplicates or omissions.\n\nValidation and business rules: The request body ICommunityPlatformPost.IRequest includes sort, limit (default 20), and an opaque cursor string. Implementations should validate the community exists (community_platform_communities.name_key) and is visible. Title/body length constraints are enforced at creation/update time, not here.\n\nRelated operations: Use GET /communities/{communityName} for the community’s details and rules, and GET /posts/{postId} for individual post detail. Home feed and Global Latest are separate endpoints with their own scopes.\n\nError handling: If the community is not found or not visible, return an appropriate not-found response. Transient failures should return the platform’s standardized temporary error message and allow retry.","summary":"Search and paginate community posts using community_platform_posts (with votes for Top)","parameters":[{"name":"communityName","description":"Immutable community name used to resolve community_platform_communities (application normalizes to name_key).","schema":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]*[A-Za-z0-9])$"}}],"requestBody":{"description":"Search and pagination parameters: { sort: \"newest\"|\"top\", cursor?: string, limit?: number (default 20) }. Cursor encodes the active sort’s boundary tuple.","typeName":"ICommunityPlatformPost.IRequest"},"responseBody":{"description":"Paginated page of post summaries for the target community with pageInfo (nextCursor) and data[] items.","typeName":"IPageICommunityPlatformPost.ISummary"},"authorizationRole":null,"name":"index","path":"/communityPlatform/communities/{communityName}/posts","method":"patch","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/communities","method":"post"},"description":"Community must exist before listing its posts; {communityName} resolves to a community created by this operation. If the community does not exist, the listing would return a not-found error."}]},{"specification":"List all active community memberships for a given user. This operation reads from the community_platform_community_members table keyed by community_platform_user_id and joins to community_platform_communities for display fields and to community_platform_users for ownership validation. Only membership rows with deleted_at null are included. The endpoint is intended for retrieving the caller’s own memberships (ownership check in business logic) and may include created_at to present when a community was joined.\n\nResponse DTO type ICommunityPlatformCommunityMember.IList encapsulates the collection of memberships for the specified user.","authorizationType":null,"description":"Return the list of communities a user is currently joined to. The Prisma model community_platform_community_members links users (community_platform_users.id) to communities (community_platform_communities.id) and records created_at and updated_at timestamps. This operation filters by the path parameter {userId} and includes only visible memberships (deleted_at is null) and communities that are still visible.\n\nSecurity considerations: Authorization requires an authenticated session. The provider should enforce that the requesting user matches {userId} for privacy, or apply elevated privileges in administrative contexts per policy. This documentation assigns the generic “registeredMember” role and expects ownership enforcement in provider logic.\n\nRelationships and data shape: Each returned membership references the community entity for fields such as name, description, logo_uri, and category. Member count shown in cards, if included, should be computed from active rows in community_platform_community_members for the referenced community.\n\nValidation rules and business logic: The path parameter {userId} must be a valid UUID present in community_platform_users. Records with a non-null deleted_at are not returned. Timestamps should be emitted in ISO-8601 UTC format.\n\nRelated operations: /me/recentCommunities for the recency-based list, and PUT /communities/{communityName}/membership to toggle membership. Community discovery is handled by /communities endpoints.\n\nError handling: Unauthenticated access should result in an authorization error with standardized copy. If the user id does not exist, return not-found; temporary issues should surface the standardized temporary error.","summary":"List a user’s current community memberships from community_platform_community_members","parameters":[{"name":"userId","description":"Target user’s ID (community_platform_users.id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"List container of memberships for the specified user with community card fields and joinedAt timestamps.","typeName":"ICommunityPlatformCommunityMember.IList"},"authorizationRole":"registeredMember","name":"index","path":"/communityPlatform/registeredMember/users/{userId}/memberships","method":"get","prerequisites":[]},{"specification":"Idempotently set the authenticated user’s membership state for a community identified by {communityName}. The operation targets community_platform_community_members (primary), joining community_platform_communities to resolve the community by name/name_key and community_platform_users to identify the actor. When joining, create a membership row if none exists (or reactivate an existing one by clearing removal markers) and set created_at/updated_at. When leaving, remove or mark the membership record so it is excluded from active queries that require deleted_at to be null. Update or insert a corresponding row in community_platform_recent_communities to reflect last_activity_at. Return the resulting membership state and the community’s current member count.\n\nThe request body adheres to ICommunityPlatformCommunityMember.IUpdate and should include a boolean-like intent (e.g., { join: true|false }) to express the desired final state. The response uses ICommunityPlatformCommunityMember to represent the up-to-date membership snapshot.","authorizationType":null,"description":"Update the calling user’s membership in a specific community. The Prisma schema models communities with community_platform_communities, including immutable name, name_key for case-insensitive uniqueness, and timestamps like created_at and last_active_at. Memberships are represented by community_platform_community_members with references to users and communities, and include created_at/updated_at timestamps and a deleted_at column that should be respected by queries.\n\nSecurity and permissions: Authentication is required. Any registered member may join or leave a community. Joining does not convey moderation privileges. Ownership checks are not required beyond validating the acting user’s identity.\n\nValidation and business logic: Resolve the community using {communityName} (normalize to name_key). If the body indicates join=true and no active membership exists, insert a row and set created_at. If a historical row exists that is not considered active, reactivate it by clearing removal markers and updating updated_at. If join=false and an active membership exists, remove it from active consideration so that it no longer appears in membership queries that require deleted_at to be null. Update community_platform_recent_communities.last_activity_at for the caller to ensure the Left Sidebar reflects the latest state. Compute and return the current memberCount as the number of active membership rows for the community.\n\nRelated operations: /me/recentCommunities for recency display; GET /communities/{communityName} for community details; and the user memberships listing endpoint. This write is idempotent relative to the intended final state.\n\nError handling: If unauthenticated, return an authorization error aligned with standardized copy. If the target community does not exist or is not visible, return not-found. Temporary failures should return the standardized temporary error and no partial state should be exposed to clients.","summary":"Update current user’s community membership via community_platform_community_members","parameters":[{"name":"communityName","description":"Immutable community name used to resolve the target community (application normalizes to name_key).","schema":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]*[A-Za-z0-9])$"}}],"requestBody":{"description":"Desired membership state payload, e.g., { join: true } to join or { join: false } to leave.","typeName":"ICommunityPlatformCommunityMember.IUpdate"},"responseBody":{"description":"Membership snapshot including the final joined state and updated memberCount for the community.","typeName":"ICommunityPlatformCommunityMember"},"authorizationRole":"registeredMember","name":"update","path":"/communityPlatform/registeredMember/communities/{communityName}/membership","method":"put","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/communities","method":"post"},"description":"Community must exist before the caller can join or leave it; {communityName} maps to the community created by this operation. Without an existing community, the membership update would fail with not-found."}]},{"specification":"Remove a user’s membership from a target sub-community by name. This DELETE operation operates primarily on the community_platform_community_members table, which models join relationships between community_platform_users and community_platform_communities. The path parameter communityName identifies the target community by its immutable display/URL name (resolved via the name/name_key pair on community_platform_communities). The operation deletes the single unique membership row (enforced by a composite unique key on [community_platform_user_id, community_platform_community_id]) for the authenticated user, making the Join ↔ Joined toggle idempotent. No request body or response body is returned.","description":"This endpoint removes the authenticated user’s membership link to a target community. The relationship is stored in the community_platform_community_members table, which contains foreign keys to community_platform_users (as the joining account) and community_platform_communities (as the target community). The community is resolved by the provided communityName path parameter, which maps to the immutable name field and its normalized name_key for case-insensitive uniqueness. The membership table enforces a unique constraint on [community_platform_user_id, community_platform_community_id], ensuring a single row represents membership and enabling idempotent join/leave semantics.\n\nSecurity and permissions follow the business rules that joining and leaving communities require authentication. Only the currently authenticated account may create or remove its own membership rows. Administrative roles are not required for this operation, and leaving a community never alters moderation or ownership rights. The controller/provider resolves the caller from the session and executes the deletion against the appropriate membership row when present.\n\nFrom a data and relationship standpoint, removal of the membership may influence personalization features such as the Home feed (which is derived from joined communities) and can update auxiliary records like community_platform_recent_communities for last-activity ordering. Community existence is validated against community_platform_communities; if the community name does not resolve, the operation fails with a not-found outcome. If the user is not currently a member, the operation is effectively a no-op but still succeeds to preserve idempotence and responsive UI flows.\n\nError handling and behavior expectations: the operation returns no response body on success. Providers should implement standard error mappings (e.g., 401 when unauthenticated) and may return a not-found error when the community cannot be resolved by name. Rate limiting may be applied to protect service stability during bursts of toggling. The underlying foreign key relations in community_platform_community_members use Cascade delete toward both the user and community entities, but this endpoint itself performs a straightforward membership unlink for the current user.","summary":"Leave a community by deleting the caller’s membership row (community_platform_community_members).","parameters":[{"name":"communityName","description":"Immutable community name used to resolve the target community.","schema":{"type":"string"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"registeredMember","name":"erase","path":"/communityPlatform/registeredMember/communities/{communityName}/membership","method":"delete","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/communities","method":"post"},"description":"Community must exist to resolve the target membership for removal; this creates the community referenced by {communityName}. If the community cannot be resolved, the delete would result in not-found."}]},{"specification":"Retrieve a paginated, sortable collection of post summaries with optional filtering and search. This PATCH operation centers on community_platform_posts and derives score from community_platform_post_votes and comment counts from community_platform_comments. It supports deterministic Newest (created_at desc, id desc) and Top (score desc, created_at desc, id desc) ordering and returns a cursor-based page for “Load more” UX. The request body follows ICommunityPlatformPost.IRequest and the response returns a paginated page of summaries IPageICommunityPlatformPost.ISummary.","description":"This operation lists posts from community_platform_posts with advanced search/sort capabilities aligned to the product’s deterministic rules. The posts table stores the core fields (title, body, author_display_name, created_at, updated_at) and references community_platform_communities and community_platform_users via foreign keys. Trigram indexes on title and body support efficient text matching when queries are provided. Sorting by Newest must use the tuple (created_at desc, id desc). Sorting by Top requires computing score as upvotes minus downvotes using community_platform_post_votes and then applying the tie-breakers (created_at desc, id desc) when scores are equal.\n\nSecurity considerations follow the platform’s read-open model: anyone can read public posts without authentication. Implementations may still look up the authenticated user to provide per-user signals like myVote, but authorization is not required for basic listing. The endpoint is read-only and does not modify data in any table. Business logic should exclude posts that are not visible per product policies and maintain stable cursor pagination across repeated requests.\n\nThe request body ICommunityPlatformPost.IRequest typically includes optional filters such as community name, a free-text query for title/body matching, a sort parameter (newest or top), and pagination properties (cursor, limit with a default of 20). The response IPageICommunityPlatformPost.ISummary returns page-level metadata (e.g., next cursor) and a compact list of post summaries suitable for cards, including fields like community name, title, author label, created timestamp, derived score, and visible comment counts.\n\nError handling covers invalid parameters (e.g., unsupported sort or malformed cursor) and transient read failures. Providers should map short queries to appropriate validation messages where search is enabled and apply tie-breakers exactly as defined to avoid duplicates or gaps between consecutive pages.","summary":"Search and paginate post summaries from community_platform_posts using deterministic Newest/Top ordering.","parameters":[],"requestBody":{"description":"Filtering, search, sorting, and pagination parameters for post listing.","typeName":"ICommunityPlatformPost.IRequest"},"responseBody":{"description":"Paginated collection of post summaries with cursor info for continuation.","typeName":"IPageICommunityPlatformPost.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","path":"/communityPlatform/posts","method":"patch","prerequisites":[]},{"specification":"Fetch a single post by identifier from community_platform_posts, including related details needed for Post Detail views. This GET operation returns the full post entity (ICommunityPlatformPost) enriched with derived score from community_platform_post_votes and visible comment counts from community_platform_comments. The postId path parameter is a UUID string referencing community_platform_posts.id.","description":"This operation retrieves one post from community_platform_posts identified by its primary key id. The table defines author and community relationships via foreign keys to community_platform_users and community_platform_communities. Core columns include title, body, optional author_display_name, created_at, and updated_at—used for detail display and deterministic ordering in lists elsewhere.\n\nSecurity model is read-open: all users, including guests, may retrieve public post content. Implementations may optionally tailor fields such as the caller’s current vote state by consulting community_platform_post_votes for the (post, user) pair. The provider computes score as upvotes minus downvotes from community_platform_post_votes and counts visible comments from community_platform_comments for display. If the post is not found or not eligible for display, the provider returns a not-found outcome consistent with platform rules.\n\nError handling includes validation of the postId format (UUID), not-found for missing records, and generic temporary error mapping when underlying reads fail. This endpoint returns a full post representation ICommunityPlatformPost to support Post Detail rendering, including nested objects such as community basics and author label for UI use.","summary":"Get a single post (community_platform_posts) by UUID with score and comment count.","parameters":[{"name":"postId","description":"Target post identifier (UUID) referencing community_platform_posts.id.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed post information suitable for Post Detail rendering.","typeName":"ICommunityPlatformPost"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/communityPlatform/posts/{postId}","method":"get","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/posts","method":"post"},"description":"A post must exist before it can be retrieved by its ID. This ensures the referenced community_platform_posts record is present."}]},{"specification":"Create a new text-only post in a specific community. This POST operation writes to community_platform_posts using the authenticated user as the author (community_platform_user_id) and a resolved community via community_platform_communities (by name/name_key). The request body ICommunityPlatformPost.ICreate enforces business constraints: community selection required; title 5–120 chars; body 10–10,000 chars; optional author display name 0–32 chars. The response returns the created post entity ICommunityPlatformPost.","description":"This operation inserts a new row into community_platform_posts with foreign keys to community_platform_users (author) and community_platform_communities (target community). The community is resolved from the client-supplied community identity (e.g., name mapped to name_key for case-insensitive lookup). The posts table stores title and body as plain text and an optional author_display_name for presentation, along with created_at/updated_at timestamps used for Newest ordering and relative time displays across the product.\n\nSecurity and permissions require authentication. Posting does not require the user to be a member of the target community, but authorship and subsequent edit/delete ownership checks derive from community_platform_user_id. Providers must validate required input ranges as per business rules—title between 5 and 120 characters; body between 10 and 10,000 characters; author display name up to 32 characters—and must ensure that a valid community exists; otherwise, creation is rejected with appropriate error messaging.\n\nRelated behaviors include updating the community’s last_active_at for freshness and enabling downstream lists (Home/Community feeds, Global Latest) to surface the content under the defined deterministic sorts. On success, the endpoint returns the created entity ICommunityPlatformPost that includes identifiers and display-ready fields used by clients to render cards or detail views immediately after submission.","summary":"Create a text-only post (community_platform_posts) under a resolved community.","parameters":[],"requestBody":{"description":"New post data (community, title, body, optional author display name).","typeName":"ICommunityPlatformPost.ICreate"},"responseBody":{"description":"The created post with identifiers and display fields.","typeName":"ICommunityPlatformPost"},"authorizationType":null,"authorizationRole":"registeredMember","name":"create","path":"/communityPlatform/registeredMember/posts","method":"post","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/communities","method":"post"},"description":"The target community must exist so the server can resolve communityName to a valid community_platform_communities record when creating a post."}]},{"specification":"Update an existing post record in the community_platform_posts table. This operation modifies author-managed fields (title, body, author_display_name) while preserving immutable properties such as the owning community (community_platform_community_id), author (community_platform_user_id), identifier (id), and creation timestamp (created_at). It refreshes updated_at and excludes posts where deleted_at is set. Relationships to community_platform_users (author), community_platform_communities (container), community_platform_post_votes (for score), and community_platform_comments (for comment counts) inform validation and derived fields shown to clients. Business validation enforces title 5–120 chars, body 10–10,000 chars (plain text), and author_display_name 0–32 chars.","authorizationType":null,"description":"Purpose and overview: Update a text-only post the user previously authored. The underlying Prisma model is community_platform_posts with columns: id (UUID, PK), community_platform_community_id (FK), community_platform_user_id (FK), title, body, author_display_name (nullable), created_at, updated_at, and deleted_at (nullable). Clients use this operation to change title/body/author_display_name only. The owning community reference and author linkage remain unchanged to respect business immutability. On success, updated_at reflects the modification time and the updated post is returned.\n\nSecurity and permissions: Only the post’s author may edit, with a possible administrative override handled by business logic. Implementations must verify the caller maps to community_platform_posts.community_platform_user_id and deny others with the standard author-guard message. Although membership is not required to post, ownership is required to edit. Attempts from unauthenticated users should be rejected with the standard login-required message.\n\nDatabase relationships: The post belongs to a community via community_platform_community_id and to a user via community_platform_user_id. Voting state is stored in community_platform_post_votes and comment threads in community_platform_comments; these related tables supply derived fields like score or comment counts to clients but are not directly mutated by this update. The record must not be edited when deleted_at is non-null; such posts are excluded from normal operations.\n\nValidation and business rules: Enforce title length 5–120 and body length 10–10,000 (plain text with line breaks, no executable content). Enforce author_display_name length 0–32 when provided. The target community is immutable and cannot be changed by this operation. The identifier and created_at are immutable. Inputs contrary to these rules should be rejected with appropriate 400 errors and standard messages.\n\nRelated operations: Use GET post detail to read a single post, DELETE to remove it from public visibility, list endpoints to fetch feeds, and comment endpoints for threaded discussions. Error handling includes 401 for unauthenticated users, 403 for non-owners, 404 if the post does not exist or is no longer visible, and 503/500 for temporary failures.","summary":"Update a post in community_platform_posts (title/body/display name) with ownership checks","parameters":[{"name":"postId","description":"Target post identifier (UUID) to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to modify for the post; community and author are immutable","typeName":"ICommunityPlatformPost.IUpdate"},"responseBody":{"description":"Updated post entity with relationships materialized as per response schema","typeName":"ICommunityPlatformPost"},"authorizationRole":"registeredMember","name":"update","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/posts","method":"post"},"description":"The post must be created first so there is an existing community_platform_posts record to update."}],"path":"/communityPlatform/registeredMember/posts/{postId}","method":"put"},{"specification":"Remove a post managed in the community_platform_posts table by marking it as deleted using the deleted_at timestamp and excluding it from public reads thereafter. The post is identified by its id (UUID). Related entities include community_platform_comments and community_platform_post_votes; once a post is marked deleted, clients must treat associated threads and votes as non-interactable and removed from public surfaces. The author (community_platform_user_id), community reference (community_platform_community_id), and created_at remain recorded for auditability.","authorizationType":null,"description":"Purpose and overview: Delete an existing post so it no longer appears on Home feeds, community lists, search, or post detail. This operation targets the community_platform_posts table which defines columns id, community_platform_community_id, community_platform_user_id, title, body, author_display_name, created_at, updated_at, and deleted_at. Deletion sets deleted_at to the current time to ensure the record is treated as removed from public views.\n\nSecurity and permissions: Only the post’s author is allowed to delete, with a business-level administrative override possible. Implementations must enforce ownership by matching the authenticated user to community_platform_user_id for the post. Unauthenticated requests should result in a login-required response; non-owners receive an author-guard denial.\n\nRelationships and effects: The post has relationships to community_platform_comments and community_platform_post_votes. After deletion, further interactions (comments, votes) must be blocked. Clients should not surface the post in feeds or detail views when deleted_at is present. If application logic performs cascaded cleanup, it must preserve referential integrity; however, the primary behavior is to mark the post as deleted and exclude it from reads.\n\nValidation and error handling: Return 404 if the post does not exist or has already been marked as deleted. Use 401 for unauthenticated access and 403 for non-owner attempts. Temporary errors should surface a retryable message.","summary":"Delete a post in community_platform_posts by marking deleted_at and removing it from public views","parameters":[{"name":"postId","description":"Target post identifier (UUID) to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"registeredMember","name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/posts","method":"post"},"description":"A post must exist before it can be deleted. This creates the post and provides the required postId referenced by the delete operation."}],"path":"/communityPlatform/registeredMember/posts/{postId}","method":"delete"},{"specification":"Retrieve the sitewide list of exactly 10 newest posts from community_platform_posts for the \"Global Latest\" module. Results are filtered to exclude rows where deleted_at is not null and are strictly ordered by Newest using (created_at DESC, id DESC) tie-breakers. This endpoint is read-only and public. It surfaces summary/card fields derived from community_platform_posts and may include minimal community metadata via community_platform_communities for display purposes.","authorizationType":null,"description":"Purpose and overview: Return a compact, fixed-size collection of the 10 most recent posts sitewide to populate the Home right sidebar. The underlying model is community_platform_posts with key columns created_at (for ordering) and id (for final tie-breaking), plus title and optional author_display_name. Only active records (deleted_at is null) are eligible.\n\nSecurity considerations: This is a public read endpoint; no authentication is required. It must not leak non-public content. Membership status does not filter results, and administrative roles are irrelevant for access.\n\nOrdering and limits: Apply deterministic Newest ordering defined by created_at DESC with ties broken by id DESC. Return exactly 10 items with no pagination or cursor support. Newer content can appear on subsequent refreshes as expected.\n\nRelationships: While the response may include minimal community identity for display (community_platform_communities.name, optional logo_uri), this endpoint does not modify any data. Voting and comment aggregates (from community_platform_post_votes and community_platform_comments) may be included as derived read-only fields per the response schema but are not persisted by this operation.\n\nError handling: Temporary errors should return a transient failure response. If no eligible posts exist, return an empty data list with a well-formed payload.","summary":"Fetch exactly 10 newest posts (Newest by created_at, id) from community_platform_posts for Global Latest","parameters":[],"requestBody":null,"responseBody":{"description":"Container object holding the 10 newest post summaries for the Global Latest module","typeName":"ICommunityPlatformPost.IGlobalLatest"},"authorizationRole":null,"name":"index","prerequisites":[],"path":"/communityPlatform/posts/globalLatest","method":"get"},{"specification":"List comments for a specific post from the community_platform_comments table with Newest ordering and cursor-based pagination. This operation returns visible comments (deleted_at is null) for the given post id, including nested reply handling by parent_id where relevant to clients. It may include derived fields such as score computed from community_platform_comment_votes and author display information via community_platform_users. Page size defaults to 20 with continuation via an opaque cursor aligned to (created_at DESC, id DESC).","authorizationType":null,"description":"Purpose and overview: Retrieve a paginated, sorted collection of comments for a post using the community_platform_comments model (columns include id, community_platform_post_id, community_platform_user_id, parent_id, content, created_at, updated_at, deleted_at). The response focuses on visible comments (where deleted_at is null) and follows Newest ordering semantics.\n\nSecurity and access: Reading comments is public and requires no authentication. Clients may optionally map the current user to per-item vote state using community_platform_comment_votes, but this operation does not require login to view. Content flagged as deleted (deleted_at not null) should be omitted from the listing and from counts presented by clients.\n\nOrdering, pagination, and structure: Apply deterministic Newest ordering by created_at DESC with ties broken by id DESC. The request supports cursor-based pagination with a default size of 20. The cursor should encode the last item’s ordering tuple to ensure stable continuation without duplicates or gaps. Although comments support nesting via parent_id (self-relation), this endpoint returns items for the target post; clients may use parent_id to group replies into threads.\n\nValidation and related operations: Validate that the target post exists and is visible; otherwise return a not-found result. Related endpoints include post detail retrieval, comment creation/edit/delete, and vote state toggles. Temporary errors should expose retry guidance without losing client state.","summary":"Paginated Newest-ordered comments for a post from community_platform_comments","parameters":[{"name":"postId","description":"Post identifier (UUID) whose comments are requested","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Query parameters for listing comments with Newest ordering and cursor pagination","typeName":"ICommunityPlatformComment.IRequest"},"responseBody":{"description":"Paginated page of comments for the specified post using Newest ordering","typeName":"IPageICommunityPlatformComment"},"authorizationRole":null,"name":"index","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/posts","method":"post"},"description":"The target post must exist before its comments can be listed; otherwise the endpoint should return 404. This creates the post and yields the postId required by the listing operation."}],"path":"/communityPlatform/posts/{postId}/comments","method":"patch"},{"specification":"Create a new comment resource under a specific post. This operation targets the community_platform_comments table as the primary entity, linking to community_platform_posts (via community_platform_post_id) and community_platform_users (via community_platform_user_id). It accepts plain-text content and optional parent reference to support threaded replies. On success, it returns the created comment including identifiers and timestamps suitable for Newest ordering (created_at) as described in the Prisma schema comments.","authorizationType":null,"description":"Create a new threaded comment for a given post. According to the community_platform_comments model description, each comment belongs to exactly one post (community_platform_post_id) and one author account (community_platform_user_id). The content field stores plain text with line breaks, and the model tracks created_at and updated_at timestamps for ordering and audit.\n\nSecurity and permissions follow the business rules: writing requires authentication. Only authenticated registered members are allowed to create comments. Guests receive an authentication prompt and, on successful sign-in, the original intent should resume. This endpoint requires role-based access consistent with registeredMember semantics while siteAdmin overrides are handled in business logic rather than endpoint-role multiplication.\n\nThe operation enforces validation rules derived from requirements and aligned with schema semantics: content length must be between 2 and 2,000 characters (plain text; no executable code). If parent_id is provided, it must reference an existing community_platform_comments row associated with the same community_platform_post_id, and the nesting depth must not exceed 8 levels (including root depth 1). Replies to a soft-deleted parent are rejected. The post referenced by postId must exist in community_platform_posts and not be removed from public view.\n\nRelationships and indexes in the schema support deterministic ordering and search: comments are indexed by (community_platform_post_id, created_at, id) for Newest ordering and by parent_id for hierarchical pagination. Although this endpoint only creates a single record, related read operations (e.g., GET /posts/{postId}/comments) will use these tuples for pagination and sorting. The response includes the created comment so clients can optimistically render it and reconcile with server-confirmed state.\n\nExpected behavior and error handling: return 201 with the created comment. Return 400 for validation failures (e.g., content length, invalid parent), 401 when unauthenticated with the standard message, 403 if the authenticated user is restricted from writing, and 404 if the post or parent cannot be found under the specified post. Transient failures respond with a generic temporary error message per platform copy.","summary":"Create a new comment (community_platform_comments) under a post","parameters":[{"name":"postId","description":"Identifier of the target post (community_platform_posts.id) to comment on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Comment creation payload including plain-text content and optional parent comment reference for threading","typeName":"ICommunityPlatformComment.ICreate"},"responseBody":{"description":"Newly created comment resource with identifiers, timestamps, and ownership fields","typeName":"ICommunityPlatformComment"},"authorizationRole":"registeredMember","name":"create","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/posts","method":"post"},"description":"The target post must exist and be visible before a comment can be created under it. This creates the post to supply the required postId."}],"path":"/communityPlatform/registeredMember/posts/{postId}/comments","method":"post"},{"specification":"Update an existing comment’s content within the context of its post. This operation manipulates the community_platform_comments table identified by {commentId} and constrained by the parent post {postId}. It edits the content and updates updated_at, preserving immutable associations (community_platform_post_id, community_platform_user_id, parent_id).","authorizationType":null,"description":"Modify a specific comment’s plain-text content. The community_platform_comments model maintains content as plain text and tracks updated_at for edits. Ownership is enforced by associating each comment with community_platform_user_id. This operation updates only editable fields and returns the full updated comment for client reconciliation.\n\nSecurity and permissions: only the comment’s author (or a siteAdmin via platform policy) may edit. Endpoint access requires an authenticated registered member role; siteAdmin overrides are handled in the provider logic to avoid multiplying role-specific endpoints. Guests receive 401 with the standard message and should be prompted to sign in and resume.\n\nDatabase relationships and immutability: the comment must belong to the specified post (community_platform_post_id equals the postId path parameter). The post association, author reference, and parent_id are immutable via this endpoint. The schema’s timestamps (created_at/updated_at) ensure deterministic Newest ordering for subsequent reads.\n\nValidation and business logic: content must remain within 2–2,000 characters, plain text with line breaks. Attempts to change post association or parent structure are rejected. Edits must not violate nesting constraints or target a deleted resource.\n\nRelated operations: creators use POST /posts/{postId}/comments to add new comments and DELETE /comments/{commentId} to remove. Clients retrieve details with GET /comments/{commentId} or paginated lists under the post. Error handling includes 400 for invalid content, 401 for unauthenticated access, 403 when the actor is not the author, and 404 if the post/comment pair does not exist or is no longer available.","summary":"Update an existing comment (community_platform_comments) content within a post","parameters":[{"name":"postId","description":"Identifier of the parent post (community_platform_posts.id) containing the comment","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Identifier of the comment (community_platform_comments.id) to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Comment update payload containing the new plain-text content","typeName":"ICommunityPlatformComment.IUpdate"},"responseBody":{"description":"Updated comment resource reflecting the latest content and timestamps","typeName":"ICommunityPlatformComment"},"authorizationRole":"registeredMember","name":"update","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/posts","method":"post"},"description":"The parent Post must be created before a comment under it can be updated; establishes a valid postId context for the scoped comment."},{"endpoint":{"path":"/communityPlatform/registeredMember/posts/{postId}/comments","method":"post"},"description":"The target Comment must exist before it can be updated; ensures commentId refers to a real comment under the given post."}],"path":"/communityPlatform/registeredMember/posts/{postId}/comments/{commentId}","method":"put"},{"specification":"Retrieve a single comment by identifier. This operation reads from the community_platform_comments table and returns one resource, including its identifiers, timestamps, and ownership fields. It is a public read operation that respects visibility rules (deleted_at handling).","authorizationType":null,"description":"Return detailed information for a specific comment. The community_platform_comments model includes fields: id, community_platform_post_id, community_platform_user_id, optional parent_id for threading, content (plain text), created_at, updated_at, and deleted_at for visibility. The endpoint exposes a single resource to support Post Detail threads, search result navigation, and moderation UIs.\n\nSecurity and visibility: reading comments is public. When deleted_at is set (soft-deleted), the API still returns 200 with the comment resource (including deleted_at) so clients can render a neutral placeholder while preserving thread position per business rules. Ownership and author guard apply to write actions, not reads.\n\nDatabase relationships and behavior: the comment’s parent and post associations allow clients to reconstruct thread context. Indexes on (community_platform_post_id, created_at, id) and (parent_id, created_at, id) support efficient retrieval and deterministic Newest ordering in list endpoints; while this endpoint returns a single item, the same model constraints apply.\n\nError handling: 404 is returned only if the comment does not exist. Transient failures return the standard temporary error copy. This operation is related to POST/PUT/DELETE comment endpoints used to manage lifecycle.","summary":"Get one comment (community_platform_comments) by ID","parameters":[{"name":"commentId","description":"Identifier of the target comment (community_platform_comments.id)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Comment resource with identifiers, content, author, and timestamps; includes deleted_at when soft-deleted for placeholder rendering","typeName":"ICommunityPlatformComment"},"authorizationRole":null,"name":"at","prerequisites":[],"path":"/communityPlatform/comments/{commentId}","method":"get"},{"specification":"Remove a comment by marking it as deleted. This operation performs a soft deletion on the community_platform_comments table by setting deleted_at, in alignment with the Prisma schema. It preserves thread structure while hiding content from public views.","authorizationType":null,"description":"Delete a comment by its identifier using soft deletion behavior defined in the community_platform_comments model (deleted_at nullable timestamp). When executed by the author (or siteAdmin per policy), the system sets deleted_at, hiding the comment body while keeping its position in the thread so replies remain visible and counts exclude the deleted item per business rules.\n\nSecurity and permissions: only the comment’s author may perform this action (siteAdmin overrides in business logic). Endpoint access requires an authenticated registered member. Guests receive 401 with the standard message and should be prompted to sign in and resume. Author guard denies non-owners with a 403 response using the standardized copy.\n\nDatabase and behavior details: the operation sets deleted_at on the target row in community_platform_comments without altering community_platform_post_id, community_platform_user_id, or parent relations. Post/comment visibility rules ensure soft-deleted comments are excluded from visible comment counts while preserving thread continuity. Related reads (GET single comment or post-thread lists) should render a neutral placeholder for deleted items.\n\nError handling: return 204 on success with no body. Return 401 for unauthenticated users, 403 for non-owners, and 404 if the comment is missing. Transient failures use the standard temporary error copy. Related operations include creation (POST), update (PUT), and retrieval (GET).","summary":"Delete a comment (community_platform_comments) via soft deletion (sets deleted_at)","parameters":[{"name":"commentId","description":"Identifier of the comment (community_platform_comments.id) to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"registeredMember","name":"erase","prerequisites":[],"path":"/communityPlatform/registeredMember/comments/{commentId}","method":"delete"},{"specification":"Set or change the authenticated member’s vote on a post. This operation targets the community_platform_post_votes table, which stores exactly one effective vote per (post, user) with value in {-1, 1}. PUT creates or updates the row to reflect an Upvote (1) or Downvote (-1) for the given postId. Clearing a vote (state None) is handled by the paired DELETE operation on the same path. The response returns updated aggregates (score and caller’s current vote) to support optimistic UI reconciliation.","authorizationType":null,"description":"This endpoint applies a vote from the currently authenticated registered member to a specific post identified by postId. In the Prisma schema, community_platform_post_votes records a single per-user vote on a post with columns: id (UUID), community_platform_post_id (UUID), community_platform_user_id (UUID), value (Int; allowed 1 for upvote, -1 for downvote), created_at, updated_at, and deleted_at (nullable). Uniqueness across (community_platform_post_id, community_platform_user_id) ensures only one effective vote per user per post.\n\nSecurity and permissions follow the business rules: voting requires authentication as a registered member, and users are prohibited from voting on their own posts. Attempts to vote on one’s own post must be rejected with copy “You can’t vote on your own posts/comments.” as a validation error. Authorization is enforced at the service layer using the caller’s user identity and the post’s author from community_platform_posts (which references community_platform_users via community_platform_user_id). The operation does not expose user identifiers in the request; it uses the authenticated session.\n\nThis operation writes to community_platform_post_votes by inserting a new row for first-time votes or updating the existing row’s value when toggling directly between Upvote and Downvote. A transition to the None state is not represented by value=0 in the schema; instead, the None transition is modeled by removing the row, which is performed by the DELETE /posts/{postId}/vote operation. After applying the vote, the service should compute the post’s new score (upvotes − downvotes) using the counts from community_platform_post_votes and return the caller’s current vote for UI reconciliation. Related operations commonly used together are: DELETE /posts/{postId}/vote to clear the vote; PUT/DELETE on /comments/{commentId}/vote for comment voting.\n\nValidation and error handling: if the target post does not exist in community_platform_posts or is not visible (e.g., has a deleted_at set), the operation must return an appropriate error. If the caller tries to vote on their own content, return a 400 with the standardized message. Transient failures should return a retriable error with the standardized message \"A temporary error occurred. Please try again in a moment.\".","method":"put","name":"update","parameters":[{"name":"postId","description":"UUID of the target post to vote on.","schema":{"type":"string","format":"uuid"}}],"path":"/communityPlatform/registeredMember/posts/{postId}/vote","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/posts","method":"post"},"description":"A Post must exist before a vote can be applied to it; provides the required postId for voting operations."}],"requestBody":{"description":"Desired vote state for this post. Only UPVOTE or DOWNVOTE are accepted here; use DELETE to clear (None).","typeName":"ICommunityPlatformPostVote.IUpdate"},"responseBody":{"description":"Updated vote outcome including current caller vote and the post’s new score.","typeName":"ICommunityPlatformPostVoteOutcome"},"summary":"Apply an Upvote or Downvote on a post (community_platform_post_votes).","authorizationRole":"registeredMember"},{"specification":"Clear the authenticated member’s vote on a post by removing their row from community_platform_post_votes for the given postId. This converts the vote state to None according to the business rules. No content is returned upon success.","authorizationType":null,"description":"This endpoint removes the caller’s effective vote on the specified post by deleting the corresponding row from community_platform_post_votes where (community_platform_post_id, community_platform_user_id) matches the caller and path parameter. The table enforces a single vote per user and includes columns id (UUID), community_platform_post_id (UUID), community_platform_user_id (UUID), value (Int in {-1, 1}), created_at, updated_at, and deleted_at (nullable). The None state is modeled by the absence of a vote row. After deletion, the post’s score (upvotes − downvotes) will change accordingly on subsequent reads.\n\nPermissions: Only authenticated registered members may perform this action. Users cannot clear votes on posts they authored if no prior vote exists (no-op), but attempting to clear a non-existent vote should be treated idempotently and return success with no content. Ownership checks for authoring are irrelevant here except for the global restriction that self-votes are not permitted; attempting to remove a non-existent vote on self-authored content simply results in no-op behavior.\n\nError handling: If the post does not exist or is not accessible (e.g., logically removed), respond with an appropriate error. Transient failures should return the standardized temporary error message. This DELETE endpoint is the inverse pair to the PUT /posts/{postId}/vote operation which sets a specific Upvote or Downvote value.","method":"delete","name":"erase","parameters":[{"name":"postId","description":"UUID of the target post to clear vote from.","schema":{"type":"string","format":"uuid"}}],"path":"/communityPlatform/registeredMember/posts/{postId}/vote","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/posts","method":"post"},"description":"The post must exist before the caller’s vote can be cleared; this creates the post so the provided postId references a valid resource."}],"requestBody":null,"responseBody":null,"summary":"Remove the caller’s vote (set to None) on a post (community_platform_post_votes).","authorizationRole":"registeredMember"},{"specification":"Set or change the authenticated member’s vote on a comment. This operation targets the community_platform_comment_votes table, which stores exactly one effective vote per (comment, user) with value in {-1, 1}. PUT creates or updates the row to reflect an Upvote (1) or Downvote (-1) for the given commentId. Clearing a vote (state None) is handled by the paired DELETE operation on the same path. The response returns updated aggregates (score and caller’s current vote) to support optimistic UI reconciliation.","authorizationType":null,"description":"This endpoint applies a vote from the currently authenticated registered member to a specific comment identified by commentId. In the Prisma schema, community_platform_comment_votes records a single per-user vote on a comment with columns: id (UUID), community_platform_comment_id (UUID), community_platform_user_id (UUID), value (Int; allowed 1 for upvote, -1 for downvote), created_at, updated_at, and deleted_at (nullable). A uniqueness constraint over (community_platform_user_id, community_platform_comment_id) guarantees only one effective vote per user per comment.\n\nSecurity and permissions follow business rules: voting requires authentication as a registered member, and users are prohibited from voting on their own comments. Attempts to vote on one’s own comment must be rejected with copy “You can’t vote on your own posts/comments.” The operation uses the caller’s authenticated identity; it does not accept user identifiers in the request body.\n\nThis operation writes to community_platform_comment_votes by inserting a new row for first-time votes or updating the existing row’s value when switching directly between Upvote and Downvote. A transition to the None state is represented by removing the vote row and is handled by the DELETE /comments/{commentId}/vote endpoint. After applying the vote, the service should compute the comment’s new score (upvotes − downvotes) using community_platform_comment_votes and return the caller’s current vote for UI reconciliation. Related operations commonly used together: DELETE /comments/{commentId}/vote to clear the vote; the post voting endpoints for post-level votes.\n\nValidation and error handling: if the target comment does not exist in community_platform_comments, or belongs to an unavailable post (e.g., the post has been removed), the operation must return an appropriate error. Transient failures should return the standardized message \"A temporary error occurred. Please try again in a moment.\".","method":"put","name":"update","parameters":[{"name":"commentId","description":"UUID of the target comment to vote on.","schema":{"type":"string","format":"uuid"}}],"path":"/communityPlatform/registeredMember/comments/{commentId}/vote","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/posts/{postId}/comments","method":"post"},"description":"The target comment must exist before a vote can be applied; this creates the comment so the provided commentId references a valid resource."}],"requestBody":{"description":"Desired vote state for this comment. Only UPVOTE or DOWNVOTE are accepted here; use DELETE to clear (None).","typeName":"ICommunityPlatformCommentVote.IUpdate"},"responseBody":{"description":"Updated vote outcome including current caller vote and the comment’s new score.","typeName":"ICommunityPlatformCommentVoteOutcome"},"summary":"Apply an Upvote or Downvote on a comment (community_platform_comment_votes).","authorizationRole":"registeredMember"},{"specification":"Clear the authenticated member’s vote on a comment by removing their row from community_platform_comment_votes for the given commentId. This converts the vote state to None. No content is returned upon success.","authorizationType":null,"description":"This endpoint removes the caller’s effective vote on the specified comment by deleting the row from community_platform_comment_votes matching (community_platform_comment_id, community_platform_user_id). The table captures a single effective vote with columns id (UUID), community_platform_comment_id (UUID), community_platform_user_id (UUID), value in {-1, 1}, timestamps, and a nullable deleted_at field. None is represented by the absence of a vote row. After deletion, the comment’s score updates accordingly on subsequent reads.\n\nPermissions: Only authenticated registered members may perform this action. Clearing a non-existent vote is idempotent and should succeed with no content. The global restriction against self-voting is enforced on the PUT operation; for DELETE, attempting to clear a non-existent vote is a no-op.\n\nError handling: If the comment does not exist or is not accessible (e.g., its parent post has been removed), respond with an appropriate error. Transient failures should return the standardized temporary error message. This DELETE endpoint complements PUT /comments/{commentId}/vote which sets a specific Upvote or Downvote value.","method":"delete","name":"erase","parameters":[{"name":"commentId","description":"UUID of the target comment to clear vote from.","schema":{"type":"string","format":"uuid"}}],"path":"/communityPlatform/registeredMember/comments/{commentId}/vote","prerequisites":[{"endpoint":{"path":"/communityPlatform/registeredMember/posts/{postId}/comments","method":"post"},"description":"The comment must exist before its vote can be cleared; this creates the comment so the provided commentId references a valid resource."}],"requestBody":null,"responseBody":null,"summary":"Remove the caller’s vote (set to None) on a comment (community_platform_comment_votes).","authorizationRole":"registeredMember"},{"specification":"Implements global posts search across public content with advanced filtering, sorting, and cursor-based pagination. Operates primarily on the community_platform_posts table (Posts namespace) while computing scores from community_platform_post_votes and joining community and author metadata via community_platform_communities and community_platform_users when shaping summary cards. The search normalizes queries, enforces minimum length (≥2 characters), and supports sort=newest|top with deterministic tie-breakers using (created_at desc, id desc) for Newest and (aggregated score desc, created_at desc, id desc) for Top. Records with deleted_at set are excluded. The request body uses ICommunityPlatformPost.IRequest and the response returns a paginated list of post summaries as IPageICommunityPlatformPost.ISummary.","authorizationType":null,"authorizationRole":null,"description":"Search public posts using text matching against the title and body columns of community_platform_posts, returning paginated results suitable for the Posts tab in global search. The underlying Prisma models define posts with fields including id (UUID), title, body, author_display_name, created_at, updated_at, and deleted_at. The posts table is indexed for search with GIN trigram indexes on title and body, and Newest ordering is supported via combined indexes on (created_at, id). This API excludes records where deleted_at is not null to align with visibility rules described in the schema comments.\n\nSecurity and access: This endpoint is public and requires no authentication. Reading is open to everyone, consistent with the business rules. Authorization checks are unnecessary for read-only search results. Standard copy and error handling apply for validation failures and temporary errors, but no sensitive data is exposed. Rate limiting and abuse prevention can be applied at the platform layer.\n\nDatabase relationships: While results come from community_platform_posts, this operation may expose related data commonly shown in cards (e.g., community name via community_platform_communities and author display name via community_platform_users fields). Score is computed from community_platform_post_votes by aggregating value (+1 for upvote, −1 for downvote) for each post while ignoring votes with deleted_at set. No score column exists in the posts table—scores are derived on the fly. For Top sorting, items are ordered by score desc, then by created_at desc, and finally by id desc when previous keys tie. For Newest, items are ordered by created_at desc and then id desc.\n\nValidation and business logic: The request enforces a minimum query length of 2 characters after normalization (trim/diacritics-insensitive, treat hyphen/underscore as token separators) and applies AND semantics across tokens with a prefix match allowed for the final token. Sorting supports sort=newest|top with Newest as the default. Pagination follows the platform’s 20-item page size using an opaque cursor derived from the sort key tuple to guarantee deterministic continuation without duplicates. Items with deleted_at set are excluded, and post visibility respects community deletion by virtue of cascading relationships (posts belong to community_platform_communities with onDelete: Cascade).\n\nRelated operations and behaviors: Clients often use this endpoint alongside search endpoints for communities and comments, and may also fetch post detail by id for a specific result. Tie-breaker consistency must match the Sorting and Pagination rules: (created_at desc, id desc) for Newest and (score desc, created_at desc, id desc) for Top. Error handling should surface “Please enter at least 2 characters.” for short queries (400) and “A temporary error occurred. Please try again in a moment.” for transient issues (5xx).","summary":"Search posts (community_platform_posts) with sorting and cursor pagination","parameters":[],"requestBody":{"description":"Search criteria for posts including query, sort (newest|top), and cursor-based pagination (limit defaults to 20).","typeName":"ICommunityPlatformPost.IRequest"},"responseBody":{"description":"Paginated post search results containing summary card fields per item and pageInfo for cursor continuation.","typeName":"IPageICommunityPlatformPost.ISummary"},"name":"index","path":"/communityPlatform/search/posts","method":"patch","prerequisites":[]},{"specification":"Provides global community search with Name Match ranking or Recently Created ordering. Operates on community_platform_communities and optionally includes rule previews from community_platform_community_rules and member counts from community_platform_community_members. Enforces case-insensitive uniqueness via name_key and excludes communities where deleted_at is set. Supports sort=nameMatch|recentlyCreated with deterministic tie-breakers and cursor-based pagination. The request body uses ICommunityPlatformCommunity.IRequest; the response is a paginated list IPageICommunityPlatformCommunity.ISummary.","authorizationType":null,"authorizationRole":null,"description":"Search sub-communities using the community_platform_communities table, which stores immutable name, name_key (normalized CI uniqueness), category, optional description, optional logo_uri/banner_uri, timestamps (created_at, updated_at, last_active_at), and deleted_at for visibility control. The API excludes records where deleted_at is set. Name-based ranking is performed according to business rules: exact case-insensitive match of name, then starts-with, then token containment, then fuzzy proximity, with tie-breakers on created_at desc then id desc. GIN trigram indexes on name and description support efficient matching as indicated by the schema indices.\n\nSecurity and access: This endpoint is public (no authentication required) and returns only non-deleted communities. Readers may also require per-item flags like isMember for the current user, which can be computed when authentication is present but does not change the public accessibility of the search itself.\n\nDatabase relationships and derived fields: Member count derives from the number of rows in community_platform_community_members referencing the target community with deleted_at null. Rules can be shown from community_platform_community_rules (top 5 by order_index) when the client chooses to display them in detail views. Sorting options include nameMatch (ranking as above) and recentlyCreated which orders by created_at desc and then id desc. Reserved name handling and name immutability are enforced at the application layer; uniqueness is maintained by name_key at the database level.\n\nValidation and business logic: The request validates that the query is at least 2 characters after normalization (trim, case-insensitive, diacritics-insensitive, hyphen/underscore as separators). Pagination uses a 20-item page size with an opaque cursor derived from the active sort’s ordering tuple to maintain deterministic continuation. Deleted communities (deleted_at not null) are excluded, and deletion cascades remove dependent entities from visibility (posts and memberships) due to onDelete: Cascade on relations.\n\nRelated operations: Often used with Explore pages or Community detail retrieval by name. Error handling includes 400 for too-short queries (“Please enter at least 2 characters.”) and 5xx for transient failures (“A temporary error occurred. Please try again in a moment.”).","summary":"Search communities (community_platform_communities) with Name Match or Recently Created sorting","parameters":[],"requestBody":{"description":"Community search parameters: normalized query, sort (nameMatch|recentlyCreated), optional category filter, and cursor pagination.","typeName":"ICommunityPlatformCommunity.IRequest"},"responseBody":{"description":"Paginated community search results with summary fields (name, description, logo URI presence, member count) and pageInfo cursor.","typeName":"IPageICommunityPlatformCommunity.ISummary"},"name":"index","path":"/communityPlatform/search/communities","method":"patch","prerequisites":[]},{"specification":"Executes global comments search over community_platform_comments with Newest sorting and cursor-based pagination. Matches text in the content column and excludes records where deleted_at is set. Includes related data such as the parent post (community_platform_posts) and author (community_platform_users) as needed for search snippets. The request body uses ICommunityPlatformComment.IRequest and returns IPageICommunityPlatformComment.ISummary.","authorizationType":null,"authorizationRole":null,"description":"Search comment content across the community platform using the community_platform_comments table. The schema defines id (UUID), content (plain text), optional parent_id for nesting, created_at/updated_at timestamps, and deleted_at to implement soft deletion. This endpoint filters out comments where deleted_at is set and can optionally include author display information and parent post context for result rendering. Efficient text search is supported via a GIN trigram index on content, and Newest ordering uses the (created_at, id) tuple indices present on post and parent scopes.\n\nSecurity and access: Public endpoint; no authentication is required to read comment search results. It returns only non-deleted comments and avoids exposing restricted data. Rate limits and abuse-prevention measures may be applied at the platform layer.\n\nDatabase relationships and ordering: Comments belong to posts (community_platform_posts) and users (community_platform_users); replies are represented via self-referencing parent_id with onDelete: Cascade. Ordering is Newest only: order by created_at desc and then id desc for deterministic tie-breaks. Scores for comments may be computed from community_platform_comment_votes by aggregating value where deleted_at is null; however, search ordering does not use score—only Newest is supported for this endpoint.\n\nValidation and business logic: The request enforces a minimum query length of 2 characters after normalization (trim/diacritics-insensitive; hyphen/underscore treated as separators). Pagination uses a default page size of 20 with an opaque cursor derived from (created_at desc, id desc). Deleted comments and comments whose parent post has been removed (via cascade) are excluded from results. Error handling follows platform standards: 400 for queries shorter than 2 characters with the copy “Please enter at least 2 characters.” and 5xx for transient failures with the copy “A temporary error occurred. Please try again in a moment.”\n\nRelated operations: Clients often follow up by fetching the associated post detail and locating the comment within the thread, or by loading the Post Detail comments endpoint using Newest ordering and per-thread pagination.","summary":"Search comments (community_platform_comments) ordered by Newest with cursor pagination","parameters":[],"requestBody":{"description":"Comment search parameters with normalized query (≥2 chars) and cursor pagination (newest order).","typeName":"ICommunityPlatformComment.IRequest"},"responseBody":{"description":"Paginated comments search results as summaries with pageInfo for cursor continuation.","typeName":"IPageICommunityPlatformComment.ISummary"},"name":"index","path":"/communityPlatform/search/comments","method":"patch","prerequisites":[]}],"components":{"authorization":[{"name":"guestVisitor","description":"Unauthenticated user who can browse and read public content across the platform, view global latest lists, and use search with read-only access. Cannot post, comment, vote, create or join communities, or edit/delete any content.","kind":"guest"},{"name":"registeredMember","description":"Authenticated user who can create sub-communities, post, comment, vote, and join/leave communities. Can edit or delete only content they authored. Can edit metadata of sub-communities they created and delete only communities they created (with cascading removal of all posts therein).","kind":"member"},{"name":"siteAdmin","description":"Platform-wide administrator with elevated permissions to manage users, communities, and content. Can remove or edit any content when necessary for policy or legal compliance and perform administrative operations not available to standard members.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageICommunityPlatformUser.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformUser.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformSession":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformSession"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformUserRestriction":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformUserRestriction"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformRegisteredMember.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformRegisteredMember.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformSiteAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformSiteAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformSession.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformSession.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunity.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunity.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunityRule":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunityRule"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformPost.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformPost.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformComment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformComment"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformComment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformComment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ICommunityPlatformGuestVisitor.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Human-readable email for the guest account, mapped to Prisma column community_platform_users.email.\n\nBusiness notes: The backend derives email_normalized for CI uniqueness. When omitted, the server may auto-generate a compliant placeholder to satisfy database constraints for a temporary guest identity."},"username":{"type":"string","description":"Preferred handle for the guest account, mapped to community_platform_users.username.\n\nBusiness notes: The backend maintains username_normalized for CI uniqueness. When omitted, the server may auto-generate a unique ephemeral value suitable for guest identities."},"password":{"type":"string","description":"Plaintext credential input. Server hashes into community_platform_users.password_hash and never stores plaintext.\n\nSecurity: This field is optional for guest flows. If omitted, the server can generate a random secret to fulfill storage constraints. Never echo back in responses."},"displayName":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional display label mapped to community_platform_users.display_name.\n\nPresentation: Clients may render this when available; otherwise UI can fall back to \"Anonymous\" per product rules."},"client":{"$ref":"#/components/schemas/IClientContext","description":"Optional client/session hints used to populate columns in Sessions.community_platform_sessions such as user_agent, ip, client_platform, client_device, and session_type.\n\nSecurity: These are metadata only and do not contain tokens."}},"required":[],"description":"Guest-join request payload for creating a minimal account and first session.\n\nPrisma mappings:\n- community_platform_users.email, email_normalized (derived), username, username_normalized (derived), password_hash (derived from password), display_name, last_login_at (set by server), created_at, updated_at.\n- community_platform_sessions fields set using the authenticated result and optional client hints.\n\nSecurity and validation:\n- Do not include identity fields like id or timestamps; the server manages them.\n- All properties are optional—server may auto-generate ephemeral values for guest identities.\n- Never transmit password hashes in requests or responses."},"ICommunityPlatformGuestVisitor.IRefresh":{"type":"object","properties":{"token":{"type":"string","description":"Opaque session token presented by client if not conveyed via cookie/header. Server validates by comparing its hash to Sessions.community_platform_sessions.hashed_token.\n\nSecurity: Plaintext token is accepted inbound only for validation. It is never persisted in plaintext."},"rotate":{"type":"boolean","description":"If true, server may rotate token while extending expiry according to long-session policy."},"client":{"$ref":"#/components/schemas/IClientContext","description":"Optional client/session hints (user agent, IP, device) to update session metadata during refresh."}},"required":[],"description":"Guest session refresh request.\n\nBehavior:\n- Locates an existing session in community_platform_sessions using token context (from header/cookie or this field), validates not revoked and within renewal policy, and updates last_seen_at/extends expires_at. Rotation may occur when rotate=true.\n\nSecurity:\n- No role-assignment tables are affected. The associated user must remain active (users.deleted_at null)."},"ICommunityPlatformGuestVisitor.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Identifier of the authenticated user (community_platform_users.id)."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"user":{"$ref":"#/components/schemas/ICommunityPlatformUser.ISummary","description":"Non-sensitive summary of the authenticated guest user for UI convenience. Excludes password_hash and normalized keys."}},"required":["id","token"],"description":"Authorization response for guestVisitor flows.\n\nContents:\n- id: UUID of community_platform_users row.\n- token: Standard authorization token container.\n- user: Optional profile summary for rendering guards.\n\nSecurity considerations:\n- Never include password_hash, email_normalized, or username_normalized.\n- Suitable for long-lived session UX and resume-after-login behaviors."},"ICommunityPlatformRegisteredMember.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User email mapped to community_platform_users.email. Backend derives and enforces CI uniqueness via email_normalized."},"username":{"type":"string","description":"Preferred handle mapped to community_platform_users.username. Backend derives and enforces CI uniqueness via username_normalized."},"password":{"type":"string","description":"Plaintext password to be hashed into community_platform_users.password_hash by the server.\n\nSecurity: Never store or echo plaintext."},"displayName":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional display label mapped to community_platform_users.display_name."},"client":{"$ref":"#/components/schemas/IClientContext","description":"Optional client/session hints used to populate fields in community_platform_sessions."}},"required":["email","username","password"],"description":"Member registration payload.\n\nPrisma mappings:\n- community_platform_users: email, email_normalized (derived), username, username_normalized (derived), password_hash (derived), display_name, last_login_at (set on issuance), created_at, updated_at.\n- community_platform_registeredmembers: community_platform_user_id with registered_at, created_at, updated_at.\n- community_platform_sessions: initial long-lived session associated to the new member.\n\nSecurity and validation:\n- Excludes identity fields (id, timestamps) and system-managed values.\n- Password is accepted only in plaintext for hashing server-side; never returned in responses."},"IClientContext":{"type":"object","properties":{"userAgent":{"type":"string","description":"Client-provided user agent string.\n\nMaps to Prisma Sessions model column community_platform_sessions.user_agent. Used for device identification and account session management UIs."},"ip":{"type":"string","description":"Last observed client IP address in textual form (IPv4/IPv6).\n\nMaps to Prisma Sessions model column community_platform_sessions.ip. Stored as a string for flexibility."},"clientPlatform":{"type":"string","description":"Optional client platform hint (e.g., OS/Browser summary).\n\nMaps to Prisma Sessions model column community_platform_sessions.client_platform for usability and security reviews."},"clientDevice":{"type":"string","description":"Optional device descriptor (e.g., device model or category).\n\nMaps to Prisma Sessions model column community_platform_sessions.client_device captured during session establishment."},"sessionType":{"type":"string","description":"Logical classification for the session (e.g., \"standard\", \"admin-console\").\n\nMaps to Prisma Sessions model column community_platform_sessions.session_type and may influence policy or routing."}},"required":[],"description":"Client/session context hints used to enrich session records.\n\nThis structure provides metadata used when creating or refreshing sessions in the Prisma table Sessions.community_platform_sessions. Properties correspond to columns user_agent, ip, client_platform, client_device, and session_type and are optional inputs that do not contain credentials or tokens."},"ICommunityPlatformUser.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the user.\n\nPrisma: community_platform_users.id (UUID)."},"username":{"type":"string","description":"Human-readable handle.\n\nPrisma: community_platform_users.username (case-insensitive uniqueness enforced via username_normalized, which is not exposed)."},"email":{"type":"string","description":"User’s email address in human-readable form.\n\nPrisma: community_platform_users.email (case-insensitive uniqueness enforced via email_normalized, which is not exposed)."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional display name shown in posts/comments.\n\nPrisma: community_platform_users.display_name (nullable)."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the most recent successful login, when present.\n\nPrisma: community_platform_users.last_login_at (nullable timestamptz). ISO-8601 (UTC)."},"created_at":{"type":"string","format":"date-time","description":"User creation timestamp for audit and ordering.\n\nPrisma: community_platform_users.created_at (timestamptz). ISO-8601 (UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for audit.\n\nPrisma: community_platform_users.updated_at (timestamptz). ISO-8601 (UTC)."}},"required":["id","username","email","created_at","updated_at"],"description":"User summary (public-facing fields only) derived from Actors.community_platform_users.\n\nThis compact view is suitable for embedding in authorization responses and list views. It intentionally excludes sensitive columns (password_hash) and internal normalized keys (email_normalized, username_normalized) as well as soft-delete markers. All timestamps are ISO-8601 UTC."},"ICommunityPlatformRegisteredMember.ILogin":{"type":"object","properties":{"identifier":{"type":"string","description":"Login identifier.\n\nHuman-entered value that identifies the account to authenticate. Application resolves this against community_platform_users.email_normalized or username_normalized derived from the user-facing email/username columns.\n\nSecurity note: plaintext passwords must never be stored; only password_hash exists in Prisma."},"password":{"type":"string","description":"Plain text password for verification only.\n\nCompared against community_platform_users.password_hash on the server. Never persisted as plaintext; the database stores only a strong hash."}},"required":["identifier","password"],"description":"Registered member login request body.\n\nMaps to authentication against Actors.community_platform_users using normalized identity columns (email_normalized or username_normalized) and password_hash as described in the Prisma schema comments. On success, a session row is created in Sessions.community_platform_sessions.\n\nSecurity: accepts only plaintext password for verification; never returns or stores password or password hashes."},"ICommunityPlatformRegisteredMember.IRefresh":{"type":"object","properties":{"sessionId":{"type":"string","format":"uuid","description":"Optional session identifier (Sessions.community_platform_sessions.id) to explicitly target a session for renewal.\n\nIf omitted, providers commonly infer the session from HTTP-only cookies."},"refreshToken":{"type":"string","description":"Optional opaque refresh or renewal token when not conveyed via cookie.\n\nServers MUST avoid storing plaintext tokens; only a hash is stored in Sessions.community_platform_sessions.hashed_token."}},"required":[],"description":"Registered member session refresh request body.\n\nRenews an existing session from Sessions.community_platform_sessions by validating the presented context (cookie/header or this DTO). Does not modify role-assignment tables. See Prisma schema: community_platform_sessions.hashed_token, expires_at, last_seen_at."},"ICommunityPlatformRegisteredMember.ILogoutRequest":{"type":"object","properties":{"userAgent":{"type":"string","description":"Optional client user agent hint recorded for audit in Sessions.community_platform_sessions.user_agent."},"clientPlatform":{"type":"string","description":"Optional client platform descriptor recorded in Sessions.community_platform_sessions.client_platform."},"clientDevice":{"type":"string","description":"Optional device descriptor recorded in Sessions.community_platform_sessions.client_device."}},"required":[],"description":"Logout request metadata (optional).\n\nUsed when revoking the current session for an authenticated registered member. Carries client hints that can be stored alongside community_platform_sessions for auditability.\n\nNo identity fields are accepted—the acting user is taken from the authenticated session context."},"ICommunityPlatformRegisteredMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated registered member.\n\nPrisma source: community_platform_users.id (UUID). Used by clients as the principal identifier for subsequent requests."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"user":{"$ref":"#/components/schemas/ICommunityPlatformUser.ISummary","description":"Optional lightweight profile snapshot for immediate UI use.\n\nDerived from Actors.community_platform_users and intentionally excludes sensitive fields (e.g., password_hash, normalized keys)."}},"required":["id","token"],"description":"Authorization response for a registered member after successful join/login/refresh.\n\nThis DTO follows the platform standard requiring the authenticated entity id and an authorization token. An optional user summary may be included for convenience. No internal foreign keys or system-managed timestamps are exposed here. References:\n- Actors.community_platform_users (profile identity fields)\n- Sessions.community_platform_sessions (session lifecycle; stores only hashed_token)\n\nSecurity:\n- Never returns password_hash, email_normalized, or username_normalized.\n- Adheres to least-privilege by limiting fields to those necessary for client authorization flows."},"ICommunityPlatformRegisteredMember.ILogoutAllResult":{"type":"object","properties":{"revoked_count":{"type":"integer","minimum":0,"description":"Number of sessions that were newly marked revoked (Sessions.community_platform_sessions.revoked_at set) for the authenticated user during this operation.\n\nIncludes only sessions affected by this request; previously revoked or expired sessions are not counted here."},"message":{"type":"string","description":"Optional informational note (e.g., that some sessions were already revoked or expired and thus not counted)."}},"required":["revoked_count"],"description":"Bulk logout result summary for a registered member.\n\nRepresents the effect of setting revoked_at across all active rows in Sessions.community_platform_sessions for the caller’s community_platform_user_id. Contains no sensitive fields and is suitable for security/account-management UIs."},"ICommunityPlatformRegisteredMember.ILogoutResult":{"type":"object","properties":{"session_id":{"type":"string","format":"uuid","description":"Identifier of the session in Sessions.community_platform_sessions that represents the caller's current authenticated session.\n\nMaps to Sessions.community_platform_sessions.id."},"status":{"oneOf":[{"const":"revoked","description":"Outcome of the single‑session logout operation.\n\n- revoked: the provider set Sessions.community_platform_sessions.revoked_at to a non‑null timestamp for this session.\n- already_revoked: the session was already inactive (revoked or expired), and the provider treated the request idempotently."},{"const":"already_revoked","description":"Outcome of the single‑session logout operation.\n\n- revoked: the provider set Sessions.community_platform_sessions.revoked_at to a non‑null timestamp for this session.\n- already_revoked: the session was already inactive (revoked or expired), and the provider treated the request idempotently."}],"description":"Outcome of the single‑session logout operation.\n\n- revoked: the provider set Sessions.community_platform_sessions.revoked_at to a non‑null timestamp for this session.\n- already_revoked: the session was already inactive (revoked or expired), and the provider treated the request idempotently."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the session became revoked (UTC, ISO 8601). Null when status is already_revoked and the record already had a non‑null revoked_at prior to this request.\n\nReflects Sessions.community_platform_sessions.revoked_at."},"message":{"type":"string","description":"Optional human‑readable note about the result.\n\nIntended for client logs and troubleshooting; not a replacement for status or HTTP codes."}},"required":["session_id","status"],"description":"Result payload for revoking the current session of a registered member.\n\nThis DTO reports the effect of updating a single row in Sessions.community_platform_sessions for the authenticated user (community_platform_user_id). It never exposes credential material (e.g., users.password_hash or sessions.hashed_token). The operation is idempotent; repeated calls may return status already_revoked.\n\nAll timestamps use ISO‑8601 in UTC as per platform conventions."},"ICommunityPlatformRegisteredMember.ISessionRevocationResult":{"type":"object","properties":{"session_id":{"type":"string","format":"uuid","description":"Target session identifier in Sessions.community_platform_sessions.\n\nUsed to correlate the result with the requested resource."},"status":{"oneOf":[{"const":"revoked","description":"Outcome of the targeted revocation attempt.\n\n- revoked: the session has just been marked revoked (revoked_at set).\n- already_revoked: the session was already inactive (revoked or expired); request handled idempotently.\n- not_found: no visible session matched the provided ID for this user.\n- forbidden: the session exists but does not belong to the caller (ownership enforcement).\n\nProviders may choose to map not_found/forbidden to HTTP status codes instead of returning this payload in those cases."},{"const":"already_revoked","description":"Outcome of the targeted revocation attempt.\n\n- revoked: the session has just been marked revoked (revoked_at set).\n- already_revoked: the session was already inactive (revoked or expired); request handled idempotently.\n- not_found: no visible session matched the provided ID for this user.\n- forbidden: the session exists but does not belong to the caller (ownership enforcement).\n\nProviders may choose to map not_found/forbidden to HTTP status codes instead of returning this payload in those cases."},{"const":"not_found","description":"Outcome of the targeted revocation attempt.\n\n- revoked: the session has just been marked revoked (revoked_at set).\n- already_revoked: the session was already inactive (revoked or expired); request handled idempotently.\n- not_found: no visible session matched the provided ID for this user.\n- forbidden: the session exists but does not belong to the caller (ownership enforcement).\n\nProviders may choose to map not_found/forbidden to HTTP status codes instead of returning this payload in those cases."},{"const":"forbidden","description":"Outcome of the targeted revocation attempt.\n\n- revoked: the session has just been marked revoked (revoked_at set).\n- already_revoked: the session was already inactive (revoked or expired); request handled idempotently.\n- not_found: no visible session matched the provided ID for this user.\n- forbidden: the session exists but does not belong to the caller (ownership enforcement).\n\nProviders may choose to map not_found/forbidden to HTTP status codes instead of returning this payload in those cases."}],"description":"Outcome of the targeted revocation attempt.\n\n- revoked: the session has just been marked revoked (revoked_at set).\n- already_revoked: the session was already inactive (revoked or expired); request handled idempotently.\n- not_found: no visible session matched the provided ID for this user.\n- forbidden: the session exists but does not belong to the caller (ownership enforcement).\n\nProviders may choose to map not_found/forbidden to HTTP status codes instead of returning this payload in those cases."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"UTC timestamp when the session became revoked (if applicable). Null for statuses already_revoked (no change), not_found, or forbidden."},"message":{"type":"string","description":"Optional explanatory note suitable for logs or UI hints. Avoids leaking internal details or sensitive data."}},"required":["session_id","status"],"description":"Per‑session revocation result for a registered member managing device sessions.\n\nReflects business logic applied to Sessions.community_platform_sessions with ownership enforced via community_platform_user_id and without exposing hashed_token. Aligns with long‑lived session behavior and Prisma audit fields (created_at, last_seen_at, expires_at, revoked_at)."},"ICommunityPlatformRegisteredMember.IUpdatePassword":{"type":"object","properties":{"current_password":{"type":"string","minLength":1,"description":"The caller’s current password in plaintext for verification.\n\nBack‑end verifies against Users.community_platform_users.password_hash. Plaintext is never stored; only a derived hash is compared server‑side."},"new_password":{"type":"string","minLength":1,"description":"The desired new password in plaintext.\n\nThe provider hashes and persists it into Users.community_platform_users.password_hash. Keep validation lightweight per business rules; the server may enforce additional policies."},"revoke_other_sessions":{"type":"boolean","description":"Optional hint asking the provider to revoke all other active sessions after changing the password.\n\nIf true, the service may set revoked_at on other rows in Sessions.community_platform_sessions for the same community_platform_user_id.\n\nDefault: false."}},"required":["current_password","new_password"],"description":"Request payload to rotate credentials for a registered member by updating Users.community_platform_users.password_hash.\n\nThis DTO carries plaintext inputs solely for verification and hashing on the server. It intentionally omits any actor identifiers because authentication context provides community_platform_user_id. The design aligns with Prisma models: Users.community_platform_users (password_hash, updated_at) and Sessions.community_platform_sessions (optional session revocation via revoked_at). Plain passwords are never persisted."},"ICommunityPlatformSiteAdminJoin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Administrator’s email address (human-readable). A normalized form (email_normalized) is derived application-side to satisfy case-insensitive uniqueness in Actors.community_platform_users.\n\nPrisma columns: community_platform_users.email, community_platform_users.email_normalized (derived)."},"username":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$","description":"Administrator’s username/handle (human-readable). A normalized form (username_normalized) is derived application-side for case-insensitive uniqueness in Actors.community_platform_users.\n\nPrisma columns: community_platform_users.username, community_platform_users.username_normalized (derived)."},"password":{"type":"string","minLength":8,"maxLength":128,"description":"Plaintext password supplied by the client for account creation. The backend MUST hash it into community_platform_users.password_hash; plaintext is never stored.\n\nPrisma column: community_platform_users.password_hash (server-computed)."},"displayName":{"oneOf":[{"type":"string","minLength":0,"maxLength":64},{"type":"null"}],"description":"Optional public-facing display name for the admin account. When null or empty the UI may show a fallback.\n\nPrisma column: community_platform_users.display_name (nullable)."}},"required":["email","username","password"],"description":"Request body to register a new Site Administrator.\n\nCreates a user row in Actors.community_platform_users (email, username, password_hash from password, optional display_name) and grants admin privileges via Actors.community_platform_siteadmins. Case-insensitive uniqueness is enforced through normalized columns email_normalized and username_normalized, computed by the application per Prisma schema guidance."},"ICommunityPlatformSiteAdminLogin.ICreate":{"type":"object","properties":{"identifier":{"type":"string","minLength":1,"maxLength":320,"description":"Email or username used for authentication lookup (case-insensitive). The application resolves this against community_platform_users.email_normalized or username_normalized per Prisma schema comments."},"password":{"type":"string","minLength":8,"maxLength":128,"description":"Plaintext password for verification. The backend compares against community_platform_users.password_hash; plaintext is never stored."}},"required":["identifier","password"],"description":"Request body to authenticate a Site Administrator. On success a new session row is created in Sessions.community_platform_sessions with hashed token material and lifecycle fields."},"ICommunityPlatformSiteAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the administrator role assignment.\n\nPrisma mapping: community_platform_siteadmins.id (UUID)."},"userId":{"type":"string","format":"uuid","description":"Identifier of the user who holds the administrator role.\n\nPrisma mapping: community_platform_siteadmins.community_platform_user_id → community_platform_users.id."},"grantedAt":{"type":"string","format":"date-time","description":"Timestamp indicating when admin privileges were granted.\n\nPrisma mapping: community_platform_siteadmins.granted_at."},"revokedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when admin privileges were revoked; null indicates the grant is currently active.\n\nPrisma mapping: community_platform_siteadmins.revoked_at (nullable)."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp for audit and ordering.\n\nPrisma mapping: community_platform_siteadmins.created_at."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp for audit.\n\nPrisma mapping: community_platform_siteadmins.updated_at."},"deletedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for visibility control and retention workflows (if used).\n\nPrisma mapping: community_platform_siteadmins.deleted_at (nullable)."}},"required":["id","userId","grantedAt","createdAt","updatedAt"],"description":"Administrator role assignment entity for SiteAdmin privileges.\n\nRepresents a row in the Prisma model community_platform_siteadmins and links to community_platform_users via community_platform_user_id. It records grant and optional revocation timestamps for audit, while excluding sensitive account credentials. This DTO is suitable for administrative tools and read responses where site-wide privileges need to be inspected."},"ICommunityPlatformSiteAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Identifier of the authenticated administrator’s user account.\n\nPrisma column: community_platform_users.id."},"userId":{"type":"string","format":"uuid","description":"Identifier of the user who holds the administrator role.\n\nPrisma mapping: community_platform_siteadmins.community_platform_user_id → community_platform_users.id."},"grantedAt":{"type":"string","format":"date-time","description":"Timestamp indicating when admin privileges were granted.\n\nPrisma mapping: community_platform_siteadmins.granted_at."},"revokedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when admin privileges were revoked; null indicates the grant is currently active.\n\nPrisma mapping: community_platform_siteadmins.revoked_at (nullable)."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp for audit and ordering.\n\nPrisma mapping: community_platform_siteadmins.created_at."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp for audit.\n\nPrisma mapping: community_platform_siteadmins.updated_at."},"deletedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for visibility control and retention workflows (if used).\n\nPrisma mapping: community_platform_siteadmins.deleted_at (nullable)."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"admin":{"$ref":"#/components/schemas/ICommunityPlatformSiteAdmin","description":"Administrator profile details derived from Actors.community_platform_users and Actors.community_platform_siteadmins.\n\nContains only non-sensitive fields."}},"required":["id","userId","grantedAt","createdAt","updatedAt","token"],"description":"Authorization response for Site Administrator operations.\n\nConforms to the standard IAuthorized contract: includes the authenticated entity id and the IAuthorizationToken. The admin profile is provided for client convenience without exposing sensitive columns (e.g., password_hash)."},"ICommunityPlatformRegisteredMember.IUpdatePasswordResult":{"type":"object","properties":{"updated":{"type":"boolean","description":"Indicates whether the password was successfully updated for the authenticated account.\n\nOn success, the server has written a new value to Actors.community_platform_users.password_hash and refreshed updated_at per Prisma schema."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"Optional refreshed authorization token returned when the provider rotates session credentials as part of the password change policy.\n\nStructure is defined by the platform-wide IAuthorizationToken schema. If rotation is not performed, this property may be omitted."},"message":{"type":"string","description":"Optional human-readable note describing the outcome (e.g., policy actions like revoking other sessions). Intended for client logs; not a replacement for status or HTTP codes."}},"required":["updated"],"description":"Result payload for rotating a registered member’s password.\n\nThis response confirms whether the server updated Users.community_platform_users.password_hash and may include a refreshed authorization token when the provider rotates credentials. It never exposes plaintext or hashed passwords and includes no actor identifiers. Aligns with the updatePassword operation semantics."},"ICommunityPlatformSiteAdminRefresh.IRequest":{"type":"object","properties":{"sessionId":{"type":"string","format":"uuid","description":"Identifier of the existing session to refresh.\n\nMaps to community_platform_sessions.id (UUID). When provided, the server can directly locate the session row to validate revocation/expiry status before rotating or extending it."},"refreshToken":{"type":"string","description":"Client-presented token material used to identify and validate the session for renewal when body-based refresh is allowed.\n\nPrisma note: the database stores only community_platform_sessions.hashed_token; this field carries plaintext token material from the client for hashing/comparison. If the platform relies solely on cookies/headers, this property may be omitted by clients."},"userAgent":{"type":"string","description":"Optional client user agent string to update metadata on the session.\n\nPrisma mapping: community_platform_sessions.user_agent (nullable text)."},"ip":{"type":"string","description":"Optional client IP address for session metadata (textual IPv4/IPv6 representation).\n\nPrisma mapping: community_platform_sessions.ip (nullable text)."},"clientPlatform":{"type":"string","description":"Optional client platform hint (e.g., OS/Browser summary) for usability/security review.\n\nPrisma mapping: community_platform_sessions.client_platform (nullable text)."},"clientDevice":{"type":"string","description":"Optional device descriptor captured during session establishment/refresh.\n\nPrisma mapping: community_platform_sessions.client_device (nullable text)."}},"required":[],"description":"Admin session refresh request payload.\n\nThis DTO renews a SiteAdmin session represented by Sessions.community_platform_sessions. It carries sufficient token context (e.g., sessionId or a refreshToken provided via body/cookie/header) so the service can validate that the session has not been revoked (revoked_at is null) and has not exceeded absolute lifetime (expires_at). On success, the server updates last_seen_at and typically extends expires_at.\n\nPrisma references: community_platform_sessions (id, hashed_token, user_agent, ip, client_platform, client_device, last_seen_at, expires_at, revoked_at)."},"ICommunityPlatformSiteAdminPassword.IUpdate":{"type":"object","properties":{"currentPassword":{"type":"string","minLength":1,"description":"Current credential to be verified against community_platform_users.password_hash.\n\nSecurity: plaintext is received only to verify; backend must hash and compare securely. Never persist plaintext."},"newPassword":{"type":"string","minLength":1,"description":"New credential to replace the existing password.\n\nOn success, write a fresh hash to community_platform_users.password_hash and update updated_at. Policy may require additional strength checks at the application layer."},"revokeOtherSessions":{"type":"boolean","description":"Whether to revoke all other active sessions after password rotation (recommended security hygiene).\n\nIf true, set community_platform_sessions.revoked_at for other sessions linked to the same user. The current session may be rotated or preserved per policy.","default":false}},"required":["currentPassword","newPassword"],"description":"Admin password change request.\n\nThis DTO updates community_platform_users.password_hash after verifying the current password. It does not alter role-assignment rows (community_platform_siteadmins) and may optionally revoke other sessions via community_platform_sessions.revoked_at for security hygiene.\n\nPrisma references: community_platform_users (password_hash, updated_at), community_platform_sessions (revoked_at)."},"IEOrderDirection":{"oneOf":[{"const":"asc","description":"Sort direction enumeration.\n\n- asc: ascending order\n- desc: descending order\n\nUsed by many IRequest DTOs across listing/search endpoints."},{"const":"desc","description":"Sort direction enumeration.\n\n- asc: ascending order\n- desc: descending order\n\nUsed by many IRequest DTOs across listing/search endpoints."}],"description":"Sort direction enumeration.\n\n- asc: ascending order\n- desc: descending order\n\nUsed by many IRequest DTOs across listing/search endpoints."},"IECommunityPlatformUserSortBy":{"oneOf":[{"const":"createdAt","description":"Sort keys for community platform user listings.\n\n- createdAt → orders by community_platform_users.created_at (desc typically for Newest)\n- lastLoginAt → orders by community_platform_users.last_login_at (nulls handled per provider policy)\n- username → orders by community_platform_users.username (collation and case-insensitive behavior per application rules)"},{"const":"lastLoginAt","description":"Sort keys for community platform user listings.\n\n- createdAt → orders by community_platform_users.created_at (desc typically for Newest)\n- lastLoginAt → orders by community_platform_users.last_login_at (nulls handled per provider policy)\n- username → orders by community_platform_users.username (collation and case-insensitive behavior per application rules)"},{"const":"username","description":"Sort keys for community platform user listings.\n\n- createdAt → orders by community_platform_users.created_at (desc typically for Newest)\n- lastLoginAt → orders by community_platform_users.last_login_at (nulls handled per provider policy)\n- username → orders by community_platform_users.username (collation and case-insensitive behavior per application rules)"}],"description":"Sort keys for community platform user listings.\n\n- createdAt → orders by community_platform_users.created_at (desc typically for Newest)\n- lastLoginAt → orders by community_platform_users.last_login_at (nulls handled per provider policy)\n- username → orders by community_platform_users.username (collation and case-insensitive behavior per application rules)"},"ICommunityPlatformUser.IRequest":{"type":"object","properties":{"q":{"type":"string","minLength":1,"maxLength":256,"description":"Free-text search over username/display_name (case-insensitive, diacritics-insensitive).\n\nPrisma mapping: community_platform_users.username and display_name (both trigram-indexed)."},"email":{"type":"string","format":"email","description":"Exact-match or case-insensitive email filter using the human-readable email field.\n\nNote: CI uniqueness is enforced via email_normalized; providers may normalize this filter internally."},"username":{"type":"string","minLength":1,"maxLength":64,"description":"Exact-match or case-insensitive username filter using the human-readable username field.\n\nNote: CI uniqueness is enforced via username_normalized; providers may normalize this filter internally."},"isMember":{"type":"boolean","description":"Filter by registered-member role assignment existence.\n\ntrue → has a row in community_platform_registeredmembers (deleted_at is null unless explicitly included)."},"isSiteAdmin":{"type":"boolean","description":"Filter by site-admin grant existence.\n\ntrue → has a row in community_platform_siteadmins where revoked_at is null (unless explicitly included)."},"includeDeleted":{"type":"boolean","description":"Include soft-deleted accounts (users.deleted_at not null) in results when true. Default is to exclude.","default":false},"createdFrom":{"type":"string","format":"date-time","description":"Lower bound (inclusive) for users.created_at."},"createdTo":{"type":"string","format":"date-time","description":"Upper bound (inclusive) for users.created_at."},"lastLoginFrom":{"type":"string","format":"date-time","description":"Lower bound (inclusive) for users.last_login_at (nullable column). Records with null can be handled per provider policy."},"lastLoginTo":{"type":"string","format":"date-time","description":"Upper bound (inclusive) for users.last_login_at (nullable column)."},"sortBy":{"$ref":"#/components/schemas/IECommunityPlatformUserSortBy","description":"Sort key to apply to the listing."},"order":{"$ref":"#/components/schemas/IEOrderDirection","description":"Sort direction to apply with sortBy."},"cursor":{"type":"string","description":"Opaque cursor encoding the active sort’s boundary tuple (e.g., createdAt+id for Newest). Used for deterministic continuation without duplicates."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Maximum number of records to return per page. Defaults to 20; capped at 100."}},"required":[],"description":"Administrative search/filter/sort request for listing user accounts sourced from community_platform_users.\n\nSupports case-insensitive text matching on username/display_name (q), exact/CI filters for email/username, role flags (isMember, isSiteAdmin), optional inclusion of soft-deleted rows, date range filters for created_at and last_login_at, and cursor-based pagination with deterministic ordering.\n\nPrisma references: community_platform_users (id, email, email_normalized, username, username_normalized, display_name, last_login_at, created_at, updated_at, deleted_at), community_platform_registeredmembers, community_platform_siteadmins."},"ICommunityPlatformUser":{"type":"object","description":"User account entity for public/admin reads mapped from Prisma table Actors.community_platform_users.\n\nThis DTO intentionally excludes sensitive/internal columns such as password_hash, email_normalized, username_normalized, and deleted_at. It exposes only business-safe, public-facing properties and audit timestamps. The descriptions below reference the original Prisma schema comments for each column.\n\nSource table summary (Prisma): id (UUID PK), email, email_normalized (CI uniqueness), username, username_normalized (CI uniqueness), password_hash (secret), display_name?, last_login_at?, created_at, updated_at, deleted_at?.","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of community_platform_users.\n\nPrisma: id String @id @db.Uuid"},"email":{"type":"string","format":"email","description":"Human-readable email address stored in community_platform_users.email.\n\nCase-insensitive uniqueness is enforced at the database level by email_normalized, which is not exposed."},"username":{"type":"string","description":"Preferred handle shown in UIs from community_platform_users.username.\n\nCase-insensitive uniqueness is enforced by username_normalized internally; not exposed here."},"displayName":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional display name (community_platform_users.display_name).\n\nMay be null when the user has not set a display name."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp (community_platform_users.created_at).\n\nISO-8601 in UTC as per API conventions."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp (community_platform_users.updated_at).\n\nISO-8601 in UTC as per API conventions."},"lastLoginAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Most recent successful login timestamp (community_platform_users.last_login_at).\n\nOptional and may be null. ISO-8601 in UTC."}},"required":["id","email","username","createdAt","updatedAt"]},"ICommunityPlatformUser.IUpdate":{"type":"object","description":"Profile update request for a user account based on community_platform_users.\n\nThis DTO permits changing only non-sensitive, user-editable fields. It must NOT accept password_hash, id, created_at, updated_at, or deleted_at. Uniqueness for email/username must be enforced against the normalized columns (email_normalized, username_normalized) at the application layer.\n\nTypical usage: PUT /communityPlatform/registeredMember/users/{userId}.","properties":{"email":{"type":"string","format":"email","description":"New human-readable email (community_platform_users.email).\n\nApplication must also update email_normalized consistently and enforce CI uniqueness."},"username":{"type":"string","minLength":3,"maxLength":30,"description":"New preferred handle (community_platform_users.username).\n\nApplication must also update username_normalized consistently and enforce CI uniqueness."},"displayName":{"oneOf":[{"type":"string","maxLength":64},{"type":"null"}],"description":"Optional display title (community_platform_users.display_name).\n\nProvide null to clear the display name."}},"required":[]},"IEUserRestrictionType":{"oneOf":[{"const":"read_only","description":"Restriction types supported by Actors.community_platform_guestvisitors.restriction_type.\n\n- read_only: Account limited to read-only interactions\n- suspended: Account suspended from interactive features"},{"const":"suspended","description":"Restriction types supported by Actors.community_platform_guestvisitors.restriction_type.\n\n- read_only: Account limited to read-only interactions\n- suspended: Account suspended from interactive features"}],"description":"Restriction types supported by Actors.community_platform_guestvisitors.restriction_type.\n\n- read_only: Account limited to read-only interactions\n- suspended: Account suspended from interactive features"},"IEUserRestrictionSortBy":{"oneOf":[{"const":"createdAt","description":"Sortable fields for user restriction searches, mapped from Prisma timestamps.\n\n- createdAt → community_platform_guestvisitors.created_at\n- assignedAt → community_platform_guestvisitors.assigned_at\n- restrictedUntil → community_platform_guestvisitors.restricted_until"},{"const":"assignedAt","description":"Sortable fields for user restriction searches, mapped from Prisma timestamps.\n\n- createdAt → community_platform_guestvisitors.created_at\n- assignedAt → community_platform_guestvisitors.assigned_at\n- restrictedUntil → community_platform_guestvisitors.restricted_until"},{"const":"restrictedUntil","description":"Sortable fields for user restriction searches, mapped from Prisma timestamps.\n\n- createdAt → community_platform_guestvisitors.created_at\n- assignedAt → community_platform_guestvisitors.assigned_at\n- restrictedUntil → community_platform_guestvisitors.restricted_until"}],"description":"Sortable fields for user restriction searches, mapped from Prisma timestamps.\n\n- createdAt → community_platform_guestvisitors.created_at\n- assignedAt → community_platform_guestvisitors.assigned_at\n- restrictedUntil → community_platform_guestvisitors.restricted_until"},"ICommunityPlatformUserRestriction.IRequest":{"type":"object","description":"Administrative search/filter request for user restriction assignments sourced from Prisma table Actors.community_platform_guestvisitors.\n\nThis request supports filtering by type, activity/visibility windows, and deterministic ordering with cursor-based pagination. Records where revoked_at is null are considered active by convention. Cursor should be an opaque token derived from the active sort’s tuple (e.g., created_at desc, id desc).","properties":{"cursor":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Opaque pagination cursor derived from the active sort’s key tuple.\n\nUse null when starting from the first page."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Maximum number of records to return. Defaults to 20.\n\nValidated server-side within [1, 100]."},"activeOnly":{"type":"boolean","description":"If true, return only currently active restrictions (revoked_at is null).\n\nDefault behavior is provider-defined; this flag forces active-only filtering when true."},"restrictionType":{"oneOf":[{"$ref":"#/components/schemas/IEUserRestrictionType"},{"type":"null"}],"description":"Filter by restriction type (guestvisitors.restriction_type). Known values include read_only and suspended."},"assignedFrom":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Lower bound (inclusive) for assignment time window (guestvisitors.assigned_at). ISO-8601 UTC."},"assignedTo":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Upper bound (inclusive) for assignment time window (guestvisitors.assigned_at). ISO-8601 UTC."},"restrictedUntilFrom":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Lower bound (inclusive) for restricted_until window (guestvisitors.restricted_until). ISO-8601 UTC."},"restrictedUntilTo":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Upper bound (inclusive) for restricted_until window (guestvisitors.restricted_until). ISO-8601 UTC."},"userId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by the target user’s ID (guestvisitors.community_platform_user_id)."},"sortBy":{"oneOf":[{"$ref":"#/components/schemas/IEUserRestrictionSortBy"},{"type":"null"}],"description":"Sort selector. Defaults to createdAt when unspecified.\n\nMaps to underlying Prisma timestamps."},"order":{"oneOf":[{"$ref":"#/components/schemas/IEOrderDirection"},{"type":"null"}],"description":"Sort direction. Defaults to desc for Newest-like ordering."}},"required":[]},"ICommunityPlatformUserRestriction":{"type":"object","description":"User restriction assignment entity mapped from Prisma table Actors.community_platform_guestvisitors.\n\nThis DTO represents account-level enforcement states (e.g., read_only, suspended) and includes audit timestamps. It excludes soft-deletion internals from public contracts by omitting deleted_at. Use this model in admin reads and detail views; creation/update flows are separate.\n\nSource table summary (Prisma): id (UUID PK), community_platform_user_id (FK → users.id), restriction_type (String), restricted_until (DateTime?), restriction_reason (String?), assigned_at (DateTime), revoked_at (DateTime?), created_at (DateTime), updated_at (DateTime), deleted_at (DateTime?).","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the restriction record (community_platform_guestvisitors.id)."},"userId":{"type":"string","format":"uuid","description":"Affected user’s ID (community_platform_guestvisitors.community_platform_user_id)."},"restrictionType":{"$ref":"#/components/schemas/IEUserRestrictionType","description":"Type of restriction (community_platform_guestvisitors.restriction_type).\n\nKnown values: read_only, suspended."},"restrictedUntil":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional expiry timestamp for the restriction (community_platform_guestvisitors.restricted_until). ISO-8601 UTC."},"restrictionReason":{"oneOf":[{"type":"string","maxLength":500},{"type":"null"}],"description":"Optional human-readable reason or policy reference (community_platform_guestvisitors.restriction_reason).\n\nTruncated or summarized for UI as needed."},"assignedAt":{"type":"string","format":"date-time","description":"Time when the restriction was assigned (community_platform_guestvisitors.assigned_at). ISO-8601 UTC."},"revokedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the restriction was revoked (community_platform_guestvisitors.revoked_at). Null means currently active. ISO-8601 UTC."},"createdAt":{"type":"string","format":"date-time","description":"Record creation timestamp (community_platform_guestvisitors.created_at). ISO-8601 UTC."},"updatedAt":{"type":"string","format":"date-time","description":"Record last update timestamp (community_platform_guestvisitors.updated_at). ISO-8601 UTC."}},"required":["id","userId","restrictionType","assignedAt","createdAt","updatedAt"]},"ICommunityPlatformRegisteredMember.IRequest":{"type":"object","properties":{"community_platform_user_id":{"type":"string","format":"uuid","description":"Filter by the target account’s community_platform_users.id (UUID).\n\nPrisma reference: community_platform_registeredmembers.community_platform_user_id — “Member account's {@link community_platform_users.id}.”"},"active_only":{"type":"boolean","description":"When true, return only visible (non-deactivated) assignment rows (deleted_at is null). When false, include historical/deactivated rows as well.\n\nPrisma reference: community_platform_registeredmembers.deleted_at — “Soft delete timestamp for the membership record.”","default":true},"registered_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Lower bound filter for the assignment time (inclusive).\n\nPrisma reference: community_platform_registeredmembers.registered_at — “Time when the user became a registered member.”"},"registered_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Upper bound filter for the assignment time (inclusive).\n\nPrisma reference: community_platform_registeredmembers.registered_at."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Lower bound filter for record creation time (inclusive).\n\nPrisma reference: community_platform_registeredmembers.created_at."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Upper bound filter for record creation time (inclusive).\n\nPrisma reference: community_platform_registeredmembers.created_at."},"sort_by":{"oneOf":[{"$ref":"#/components/schemas/IECommunityPlatformRegisteredMemberSort"},{"type":"null"}],"description":"Primary sort key to apply for deterministic ordering. Default uses created_at desc with id desc as tie-breaker.\n\nBusiness rule: Sorting follows platform deterministic rules with stable cursor continuation."},"order":{"oneOf":[{"$ref":"#/components/schemas/IEOrderDirection"},{"type":"null"}],"description":"Sort direction for the chosen sort_by key. Default desc for Newest-style listings."},"cursor":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Opaque cursor encoding the last item’s ordering tuple for deterministic continuation (e.g., created_at + id or registered_at + id)."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of records to return. Defaults to 20 when unspecified.","default":20}},"required":[],"description":"Request DTO for listing/searching Registered Member assignments from Prisma table community_platform_registeredmembers.\n\nThis model represents role assignments granting member capabilities to accounts. It supports filters, deterministic sorting, and cursor-based pagination. Properties map to the underlying Prisma columns or to read‑model controls (sort_by, order, cursor, limit).\n\nPrisma table reference: community_platform_registeredmembers — “Role assignment table marking a community_platform_users account as an active registered member with write capabilities (post, comment, vote, join/leave).”"},"ICommunityPlatformRegisteredMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the registered member assignment.\n\nPrisma reference: community_platform_registeredmembers.id — “Primary Key.”"},"community_platform_user_id":{"type":"string","format":"uuid","description":"The owning account’s UUID in community_platform_users.\n\nPrisma reference: community_platform_registeredmembers.community_platform_user_id — “Member account's {@link community_platform_users.id}.”"},"registered_at":{"type":"string","format":"date-time","description":"Timestamp when the user became a registered member.\n\nPrisma reference: community_platform_registeredmembers.registered_at."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp for audit/ordering.\n\nPrisma reference: community_platform_registeredmembers.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp for audit.\n\nPrisma reference: community_platform_registeredmembers.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp indicating a deactivated or hidden assignment. Null when active.\n\nPrisma reference: community_platform_registeredmembers.deleted_at — “Soft delete timestamp for the membership record (e.g., deactivated membership).”"}},"required":["id","community_platform_user_id","registered_at","created_at","updated_at"],"description":"Registered Member assignment entity (response DTO).\n\nRepresents a single row from Prisma table community_platform_registeredmembers, recording that a community_platform_users account has member capabilities. Includes all non-sensitive columns required for business logic and audit.\n\nSecurity note: This response DTO does not include credentials or secrets; it only surfaces role-assignment metadata."},"ICommunityPlatformSiteAdmin.IRequest":{"type":"object","properties":{"community_platform_user_id":{"type":"string","format":"uuid","description":"Filter by administrator account (community_platform_users.id).\n\nPrisma reference: community_platform_siteadmins.community_platform_user_id — Administrator account's community_platform_users.id."},"active_only":{"type":"boolean","description":"When true, return only currently active admin grants (revoked_at is null and deleted_at is null). When false, include historical grants as well.","default":true},"granted_at_from":{"type":"string","format":"date-time","description":"Lower bound filter for grant time (inclusive).\n\nPrisma reference: community_platform_siteadmins.granted_at."},"granted_at_to":{"type":"string","format":"date-time","description":"Upper bound filter for grant time (inclusive).\n\nPrisma reference: community_platform_siteadmins.granted_at."},"revoked_at_from":{"type":"string","format":"date-time","description":"Lower bound filter for revocation time (inclusive). Only meaningful when active_only is false.\n\nPrisma reference: community_platform_siteadmins.revoked_at."},"revoked_at_to":{"type":"string","format":"date-time","description":"Upper bound filter for revocation time (inclusive). Only meaningful when active_only is false.\n\nPrisma reference: community_platform_siteadmins.revoked_at."},"sort_by":{"$ref":"#/components/schemas/IECommunityPlatformSiteAdminSort","description":"Primary sort key for deterministic ordering. Default is granted_at with descending order and id desc tie-break."},"order":{"$ref":"#/components/schemas/IEOrderDirection","description":"Sort direction for the chosen sort key."},"cursor":{"type":"string","description":"Opaque cursor encoding the last item’s ordering tuple for stable continuation (e.g., granted_at + id)."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of records to return. Defaults to 20.","default":20}},"required":[],"description":"Request DTO for listing/searching Site Administrator assignments from Prisma table community_platform_siteadmins.\n\nSupports filtering by user, active status (revoked vs active), grant/revocation windows, deterministic sorting, and cursor-based pagination.\n\nPrisma table reference: community_platform_siteadmins — Role assignment table granting administrative privileges to a community_platform_users account."},"ICommunityPlatformSession.IRequest":{"type":"object","properties":{"status":{"$ref":"#/components/schemas/IECommunityPlatformSessionStatus","description":"Session lifecycle filter.\n- active: revoked_at is null AND now < expires_at\n- revoked: revoked_at is not null\n- expired: now >= expires_at\n- all: do not filter by lifecycle"},"session_type":{"type":"string","description":"Optional logical type tag to filter sessions (e.g., \"standard\", \"admin-console\").\n\nPrisma reference: community_platform_sessions.session_type."},"created_at_from":{"type":"string","format":"date-time","description":"Lower bound filter for session creation time (inclusive).\n\nPrisma reference: community_platform_sessions.created_at."},"created_at_to":{"type":"string","format":"date-time","description":"Upper bound filter for session creation time (inclusive).\n\nPrisma reference: community_platform_sessions.created_at."},"last_seen_at_from":{"type":"string","format":"date-time","description":"Lower bound filter for last authenticated activity (inclusive).\n\nPrisma reference: community_platform_sessions.last_seen_at."},"last_seen_at_to":{"type":"string","format":"date-time","description":"Upper bound filter for last authenticated activity (inclusive).\n\nPrisma reference: community_platform_sessions.last_seen_at."},"expires_at_from":{"type":"string","format":"date-time","description":"Lower bound filter for absolute expiration (inclusive).\n\nPrisma reference: community_platform_sessions.expires_at."},"expires_at_to":{"type":"string","format":"date-time","description":"Upper bound filter for absolute expiration (inclusive).\n\nPrisma reference: community_platform_sessions.expires_at."},"sort_by":{"$ref":"#/components/schemas/IECommunityPlatformSessionSort","description":"Primary sort key to order sessions for management views. Default is last_seen_at when present, else created_at."},"order":{"$ref":"#/components/schemas/IEOrderDirection","description":"Sort direction for the chosen key (asc|desc). Default desc for recent-first views."},"cursor":{"type":"string","description":"Opaque cursor encoding the last item’s ordering tuple for continuation (e.g., last_seen_at + id, or created_at + id)."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of sessions to return. Defaults to 20.","default":20}},"required":[],"description":"Request DTO for listing/searching authentication sessions from Prisma table community_platform_sessions.\n\nSupports lifecycle filtering (active/revoked/expired), typed session filtering, time-window filters, deterministic sorting, and cursor-based pagination.\n\nPrisma table reference: community_platform_sessions — Authentication sessions for the community platform."},"IECommunityPlatformRegisteredMemberSort":{"oneOf":[{"const":"created_at","description":"Allowed primary sort keys for Registered Member listing requests.\n\n- created_at: order by creation timestamp; tie-break by id desc\n- registered_at: order by registered_at; tie-break by id desc\n\nPrisma reference: community_platform_registeredmembers.created_at, registered_at."},{"const":"registered_at","description":"Allowed primary sort keys for Registered Member listing requests.\n\n- created_at: order by creation timestamp; tie-break by id desc\n- registered_at: order by registered_at; tie-break by id desc\n\nPrisma reference: community_platform_registeredmembers.created_at, registered_at."}],"description":"Allowed primary sort keys for Registered Member listing requests.\n\n- created_at: order by creation timestamp; tie-break by id desc\n- registered_at: order by registered_at; tie-break by id desc\n\nPrisma reference: community_platform_registeredmembers.created_at, registered_at."},"IECommunityPlatformSiteAdminSort":{"oneOf":[{"const":"granted_at","description":"Site Admin assignment primary sort keys.\n\nUse these values to sort records from Prisma model \"community_platform_siteadmins\". Apply deterministic ordering by breaking ties with id (descending) after the chosen primary key.\n\nPrisma references:\n- community_platform_siteadmins.granted_at\n- community_platform_siteadmins.created_at"},{"const":"created_at","description":"Site Admin assignment primary sort keys.\n\nUse these values to sort records from Prisma model \"community_platform_siteadmins\". Apply deterministic ordering by breaking ties with id (descending) after the chosen primary key.\n\nPrisma references:\n- community_platform_siteadmins.granted_at\n- community_platform_siteadmins.created_at"}],"description":"Site Admin assignment primary sort keys.\n\nUse these values to sort records from Prisma model \"community_platform_siteadmins\". Apply deterministic ordering by breaking ties with id (descending) after the chosen primary key.\n\nPrisma references:\n- community_platform_siteadmins.granted_at\n- community_platform_siteadmins.created_at"},"IECommunityPlatformSessionSort":{"oneOf":[{"const":"last_seen_at","description":"Session listing primary sort keys.\n\nUse these values to sort records from Prisma model \"community_platform_sessions\". Deterministic ordering requires an id (descending) tie‑breaker, and lifecycle filters (revoked_at, expires_at) should be respected according to the UI.\n\nPrisma references:\n- community_platform_sessions.last_seen_at\n- community_platform_sessions.created_at\n- community_platform_sessions.expires_at"},{"const":"created_at","description":"Session listing primary sort keys.\n\nUse these values to sort records from Prisma model \"community_platform_sessions\". Deterministic ordering requires an id (descending) tie‑breaker, and lifecycle filters (revoked_at, expires_at) should be respected according to the UI.\n\nPrisma references:\n- community_platform_sessions.last_seen_at\n- community_platform_sessions.created_at\n- community_platform_sessions.expires_at"},{"const":"expires_at","description":"Session listing primary sort keys.\n\nUse these values to sort records from Prisma model \"community_platform_sessions\". Deterministic ordering requires an id (descending) tie‑breaker, and lifecycle filters (revoked_at, expires_at) should be respected according to the UI.\n\nPrisma references:\n- community_platform_sessions.last_seen_at\n- community_platform_sessions.created_at\n- community_platform_sessions.expires_at"}],"description":"Session listing primary sort keys.\n\nUse these values to sort records from Prisma model \"community_platform_sessions\". Deterministic ordering requires an id (descending) tie‑breaker, and lifecycle filters (revoked_at, expires_at) should be respected according to the UI.\n\nPrisma references:\n- community_platform_sessions.last_seen_at\n- community_platform_sessions.created_at\n- community_platform_sessions.expires_at"},"IECommunityPlatformSessionStatus":{"oneOf":[{"const":"active","description":"Lifecycle status filter for sessions.\n\nThese values map to lifecycle columns in Prisma model \"community_platform_sessions\":\n- active: revoked_at is null and expires_at is in the future\n- revoked: revoked_at is not null\n- expired: expires_at is in the past\n- all: include all lifecycle states\n\nPrisma references:\n- community_platform_sessions.revoked_at\n- community_platform_sessions.expires_at"},{"const":"revoked","description":"Lifecycle status filter for sessions.\n\nThese values map to lifecycle columns in Prisma model \"community_platform_sessions\":\n- active: revoked_at is null and expires_at is in the future\n- revoked: revoked_at is not null\n- expired: expires_at is in the past\n- all: include all lifecycle states\n\nPrisma references:\n- community_platform_sessions.revoked_at\n- community_platform_sessions.expires_at"},{"const":"expired","description":"Lifecycle status filter for sessions.\n\nThese values map to lifecycle columns in Prisma model \"community_platform_sessions\":\n- active: revoked_at is null and expires_at is in the future\n- revoked: revoked_at is not null\n- expired: expires_at is in the past\n- all: include all lifecycle states\n\nPrisma references:\n- community_platform_sessions.revoked_at\n- community_platform_sessions.expires_at"},{"const":"all","description":"Lifecycle status filter for sessions.\n\nThese values map to lifecycle columns in Prisma model \"community_platform_sessions\":\n- active: revoked_at is null and expires_at is in the future\n- revoked: revoked_at is not null\n- expired: expires_at is in the past\n- all: include all lifecycle states\n\nPrisma references:\n- community_platform_sessions.revoked_at\n- community_platform_sessions.expires_at"}],"description":"Lifecycle status filter for sessions.\n\nThese values map to lifecycle columns in Prisma model \"community_platform_sessions\":\n- active: revoked_at is null and expires_at is in the future\n- revoked: revoked_at is not null\n- expired: expires_at is in the past\n- all: include all lifecycle states\n\nPrisma references:\n- community_platform_sessions.revoked_at\n- community_platform_sessions.expires_at"},"IECommunityCategory":{"oneOf":[{"const":"Tech & Programming","description":"Community category enumeration as defined by business requirements.\n\nPrisma source: community_platform_communities.category (stored as text). The application enforces selection to one of these allowed values at creation and during updates."},{"const":"Science","description":"Community category enumeration as defined by business requirements.\n\nPrisma source: community_platform_communities.category (stored as text). The application enforces selection to one of these allowed values at creation and during updates."},{"const":"Movies & TV","description":"Community category enumeration as defined by business requirements.\n\nPrisma source: community_platform_communities.category (stored as text). The application enforces selection to one of these allowed values at creation and during updates."},{"const":"Games","description":"Community category enumeration as defined by business requirements.\n\nPrisma source: community_platform_communities.category (stored as text). The application enforces selection to one of these allowed values at creation and during updates."},{"const":"Sports","description":"Community category enumeration as defined by business requirements.\n\nPrisma source: community_platform_communities.category (stored as text). The application enforces selection to one of these allowed values at creation and during updates."},{"const":"Lifestyle & Wellness","description":"Community category enumeration as defined by business requirements.\n\nPrisma source: community_platform_communities.category (stored as text). The application enforces selection to one of these allowed values at creation and during updates."},{"const":"Study & Education","description":"Community category enumeration as defined by business requirements.\n\nPrisma source: community_platform_communities.category (stored as text). The application enforces selection to one of these allowed values at creation and during updates."},{"const":"Art & Design","description":"Community category enumeration as defined by business requirements.\n\nPrisma source: community_platform_communities.category (stored as text). The application enforces selection to one of these allowed values at creation and during updates."},{"const":"Business & Finance","description":"Community category enumeration as defined by business requirements.\n\nPrisma source: community_platform_communities.category (stored as text). The application enforces selection to one of these allowed values at creation and during updates."},{"const":"News & Current Affairs","description":"Community category enumeration as defined by business requirements.\n\nPrisma source: community_platform_communities.category (stored as text). The application enforces selection to one of these allowed values at creation and during updates."}],"description":"Community category enumeration as defined by business requirements.\n\nPrisma source: community_platform_communities.category (stored as text). The application enforces selection to one of these allowed values at creation and during updates."},"IECommunitySort":{"oneOf":[{"const":"nameMatch","description":"Community sorting mode used across Explore and Search flows.\n\nPreferred values:\n- nameMatch: Rank by case-insensitive Name Match (exact > starts-with > token containment > fuzzy proximity). Ties resolve by (created_at desc, id desc).\n- recentlyCreated: Order by (created_at desc, id desc) for deterministic Newest-style listing.\n\nFor compatibility, case-variant forms may be accepted by some clients; servers should normalize to lower-case.\n\nBacked by ordering over Communities.community_platform_communities (created_at, id) or Name Match ranking per business rules."},{"const":"recentlyCreated","description":"Community sorting mode used across Explore and Search flows.\n\nPreferred values:\n- nameMatch: Rank by case-insensitive Name Match (exact > starts-with > token containment > fuzzy proximity). Ties resolve by (created_at desc, id desc).\n- recentlyCreated: Order by (created_at desc, id desc) for deterministic Newest-style listing.\n\nFor compatibility, case-variant forms may be accepted by some clients; servers should normalize to lower-case.\n\nBacked by ordering over Communities.community_platform_communities (created_at, id) or Name Match ranking per business rules."},{"const":"NameMatch","description":"Community sorting mode used across Explore and Search flows.\n\nPreferred values:\n- nameMatch: Rank by case-insensitive Name Match (exact > starts-with > token containment > fuzzy proximity). Ties resolve by (created_at desc, id desc).\n- recentlyCreated: Order by (created_at desc, id desc) for deterministic Newest-style listing.\n\nFor compatibility, case-variant forms may be accepted by some clients; servers should normalize to lower-case.\n\nBacked by ordering over Communities.community_platform_communities (created_at, id) or Name Match ranking per business rules."},{"const":"RecentlyCreated","description":"Community sorting mode used across Explore and Search flows.\n\nPreferred values:\n- nameMatch: Rank by case-insensitive Name Match (exact > starts-with > token containment > fuzzy proximity). Ties resolve by (created_at desc, id desc).\n- recentlyCreated: Order by (created_at desc, id desc) for deterministic Newest-style listing.\n\nFor compatibility, case-variant forms may be accepted by some clients; servers should normalize to lower-case.\n\nBacked by ordering over Communities.community_platform_communities (created_at, id) or Name Match ranking per business rules."}],"description":"Community sorting mode used across Explore and Search flows.\n\nPreferred values:\n- nameMatch: Rank by case-insensitive Name Match (exact > starts-with > token containment > fuzzy proximity). Ties resolve by (created_at desc, id desc).\n- recentlyCreated: Order by (created_at desc, id desc) for deterministic Newest-style listing.\n\nFor compatibility, case-variant forms may be accepted by some clients; servers should normalize to lower-case.\n\nBacked by ordering over Communities.community_platform_communities (created_at, id) or Name Match ranking per business rules."},"ICommunityPlatformSession":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the session (Sessions.community_platform_sessions.id).\n\nGenerated by the system when a session is created and used to manage device/session-specific actions (inspection and revocation)."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp (Sessions.community_platform_sessions.created_at).\n\nUsed for audit trails and relative time rendering in session management UIs."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp (Sessions.community_platform_sessions.updated_at).\n\nUpdated when server-side metadata is changed (e.g., client hints) or lifecycle transitions occur."},"lastSeenAt":{"type":"string","format":"date-time","description":"Timestamp of the last authenticated activity (Sessions.community_platform_sessions.last_seen_at).\n\nSupports long-lived sessions and activity-based insights. Optional when the session has not yet recorded activity after creation."},"expiresAt":{"type":"string","format":"date-time","description":"Absolute expiration timestamp (Sessions.community_platform_sessions.expires_at).\n\nAligns with long-session rules (idle timeout and absolute lifetime) and determines when a session must be refreshed or re-authenticated."},"revokedAt":{"type":"string","format":"date-time","description":"Revocation timestamp (Sessions.community_platform_sessions.revoked_at).\n\nWhen present, the session is considered invalid for future requests. Exposed for transparency in session-management UIs."},"userAgent":{"type":"string","description":"Client user agent hint (Sessions.community_platform_sessions.user_agent).\n\nA free-form string captured at sign-in or subsequent interactions to help users identify their sessions (e.g., a browser/OS signature)."},"ip":{"type":"string","description":"Last observed client IP address (Sessions.community_platform_sessions.ip).\n\nStored as a string to accommodate IPv4/IPv6 textual forms. Provided for security visibility subject to privacy policy."},"clientPlatform":{"type":"string","description":"Optional client platform hint (Sessions.community_platform_sessions.client_platform).\n\nExamples include a brief OS/Browser summary. Intended for ease of use in account security UIs."},"clientDevice":{"type":"string","description":"Optional client device descriptor (Sessions.community_platform_sessions.client_device).\n\nCan store a model name or category to help users recognize devices (e.g., \"MacBook Pro\", \"Pixel 7\")."},"sessionType":{"type":"string","description":"Logical session type (Sessions.community_platform_sessions.session_type).\n\nApplication-defined value to differentiate flavors of sessions (e.g., \"standard\", \"admin-console\")."}},"required":["id","createdAt","updatedAt","expiresAt"],"description":"Authentication session entity derived from Prisma Sessions.community_platform_sessions.\n\nThis DTO intentionally omits sensitive data such as hashed_token and any plaintext token material. It provides device hints (userAgent, ip, clientPlatform, clientDevice) and lifecycle timestamps (createdAt, updatedAt, lastSeenAt, expiresAt, revokedAt) suitable for account session-management UIs.\n\nAll timestamp properties use ISO-8601 (UTC) formatting consistent with API-wide conventions."},"ICommunityPlatformCommunity.IRequest":{"type":"object","properties":{"q":{"type":"string","minLength":2,"description":"Normalized query string for community search.\n\nMinimum length 2 after normalization (trim, case-insensitive, diacritics-insensitive; hyphen/underscore treated as token separators). Optional for Explore listings where search may be absent."},"category":{"$ref":"#/components/schemas/IECommunityCategory","description":"Optional category filter limiting results to a single allowed value.\n\nMaps to Communities.community_platform_communities.category."},"sort":{"$ref":"#/components/schemas/IECommunitySort","description":"Sorting mode for this request.\n\n- Explore contexts typically use recentlyCreated.\n- Search contexts default to nameMatch (with recentlyCreated as an alternative)."},"cursor":{"type":"string","description":"Opaque continuation token for cursor-based pagination.\n\nEncodes the active sort’s boundary tuple (e.g., created_at and id) to provide deterministic continuation without duplicates or omissions."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Maximum number of items to return (default 20). Business rules recommend 20 per page for lists.\n\nThe service may enforce an upper bound (e.g., 100) to protect stability."}},"required":[],"description":"Community collection/search request DTO used by Explore and Search flows.\n\nBacked by the Prisma model Communities.community_platform_communities for filtering and ordering (via created_at and id) while enforcing Name Match ranking at the business layer. Public-read; results exclude communities where deleted_at is set. Reserved-name and immutability rules apply at creation, not here."},"ICommunityPlatformCommunityRule.ICreate":{"type":"object","properties":{"order":{"type":"integer","minimum":1,"description":"Display order for the new rule within the community.\n\nPrisma mapping: Communities.community_platform_community_rules.order_index (Int). Must be unique per community."},"text":{"type":"string","minLength":1,"maxLength":100,"description":"Rule text to display (≈ ≤ 100 chars).\n\nPrisma mapping: Communities.community_platform_community_rules.text (text)."}},"required":["order","text"],"description":"Create payload for a community rule.\n\nOnly user-editable business fields are accepted. Identifiers, timestamps, and deletion flags are system-managed and excluded from this DTO."},"ICommunityPlatformCommunityRule.ICreateArray":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunityRule.ICreate"},"description":"Array of community rule create inputs.\n\nProvides a named schema to avoid inline array definitions for ICommunityPlatformCommunityRule.ICreate."},"ICommunityPlatformCommunityRule":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Rule identifier (Communities.community_platform_community_rules.id).\n\nOpaque UUID unique within the system."},"orderIndex":{"type":"integer","minimum":1,"description":"Display order within the community (Communities.community_platform_community_rules.order_index).\n\nStarts at 1 and increases without gaps by convention; used to render the top 5 rules."},"text":{"type":"string","maxLength":100,"description":"Rule content (Communities.community_platform_community_rules.text).\n\nConcise text rendered in the \"Community Rules\" box; long values may be truncated in UI."},"createdAt":{"type":"string","format":"date-time","description":"Timestamp when the rule was created (Communities.community_platform_community_rules.created_at)."},"updatedAt":{"type":"string","format":"date-time","description":"Timestamp when the rule was last updated (Communities.community_platform_community_rules.updated_at)."}},"required":["id","orderIndex","text","createdAt","updatedAt"],"description":"Community Rule item backed by Communities.community_platform_community_rules.\n\nThis public representation omits internal relational keys (community_platform_community_id) and soft-deletion flags (deleted_at), focusing on ordered text content and audit timestamps."},"ICommunityPlatformCommunityRuleArray":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunityRule"},"description":"Array of community rule items.\n\nUsed by ICommunityPlatformCommunity.rules to include ordered rule snippets for the right sidebar display."},"ICommunityPlatformCommunity.ICreate":{"type":"object","properties":{"name":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$","description":"Immutable community name (Communities.community_platform_communities.name) used in URLs and display.\n\nBusiness rules: alphanumeric with hyphen/underscore allowed; must start/end with alphanumeric; no consecutive separators; length 3–30; case-insensitive uniqueness enforced via name_key at the database layer. Reserved names (e.g., \"c\", \"s\", \"login\", \"submit\", \"create\", \"admin\") must be rejected by the application."},"category":{"$ref":"#/components/schemas/IECommunityCategory","description":"Single required category as defined by business rules.\n\nStored as String in Communities.community_platform_communities.category; the API enforces this fixed set."},"description":{"type":"string","maxLength":500,"description":"Optional short description (Communities.community_platform_communities.description).\n\nDisplayed in Community Info and search cards; UIs commonly truncate to two lines."},"logoUri":{"type":"string","format":"uri","maxLength":80000,"description":"Optional logo image URI (Communities.community_platform_communities.logo_uri).\n\nDefaults are handled by the application when absent."},"bannerUri":{"type":"string","format":"uri","maxLength":80000,"description":"Optional banner image URI (Communities.community_platform_communities.banner_uri).\n\nDefaults are handled by the application when absent."},"rules":{"$ref":"#/components/schemas/ICommunityPlatformCommunityRule.ICreateArray","description":"Optional initial rules to create for the community.\n\nEach item follows ICommunityPlatformCommunityRule.ICreate semantics (text ≤ ~100 chars, order starts at 1). Note: Many implementations prefer a dedicated rules API; providing initial rules here is optional."}},"required":["name","category"],"description":"Create DTO for Communities.community_platform_communities.\n\nSecurity-first design: ownership is derived from the authenticated context (community_platform_user_id is never accepted from clients). System-managed fields (id, created_at, updated_at, deleted_at) are excluded. The API enforces name immutability, category selection from a fixed set, and minimal validation to keep flows smooth."},"ICommunityPlatformCommunity":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Community identifier (Communities.community_platform_communities.id).\n\nOpaque UUID used internally and in administrative contexts. Public flows primarily address communities by name."},"name":{"type":"string","description":"Immutable community name (Communities.community_platform_communities.name).\n\nUsed in URLs (/c/[name]) and as the primary display label. Case-insensitive uniqueness is enforced in the database via name_key."},"category":{"$ref":"#/components/schemas/IECommunityPlatformCommunityCategory","description":"Community category (Communities.community_platform_communities.category).\n\nAlthough stored as text, the API enforces a fixed allowed set defined by business rules. Values must match IECommunityPlatformCommunityCategory exactly."},"description":{"type":"string","maxLength":500,"description":"Optional community description (Communities.community_platform_communities.description).\n\nDisplayed on Community Home and in search/explore cards."},"logoUri":{"type":"string","format":"uri","maxLength":80000,"description":"Logo image URI (Communities.community_platform_communities.logo_uri).\n\nClients should provide a resolvable URI. The application supplies defaults when absent."},"bannerUri":{"type":"string","format":"uri","maxLength":80000,"description":"Banner image URI (Communities.community_platform_communities.banner_uri).\n\nShown on the community header when present; defaults handled by the application."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp (Communities.community_platform_communities.created_at).\n\nSupports deterministic Newest ordering and relative time display."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp (Communities.community_platform_communities.updated_at).\n\nUpdated when mutable metadata changes (description, branding, category)."},"lastActiveAt":{"type":"string","format":"date-time","description":"Optional community last active timestamp (Communities.community_platform_communities.last_active_at).\n\nUpdated by posting, commenting, or other qualifying activity; used for info boxes and discovery sorting."},"memberCount":{"type":"integer","minimum":0,"description":"Derived count of active members for display.\n\nComputed from Memberships.community_platform_community_members where deleted_at is null for the community. Exposed to support Explore, Search, and Community Home cards."},"isMember":{"type":"boolean","description":"Whether the current authenticated user is a member of this community.\n\nDerived from community_platform_community_members for the caller’s user id. Omitted for unauthenticated requests."},"isOwner":{"type":"boolean","description":"Whether the current authenticated user is the creator/owner of this community.\n\nDerived by comparing the caller’s user id to Communities.community_platform_communities.community_platform_user_id. Omitted for unauthenticated requests."},"rules":{"$ref":"#/components/schemas/ICommunityPlatformCommunityRuleArray","description":"Optional rule items for the \"Community Rules\" box.\n\nMany responses include only the top 5 by order; complete lists can be obtained via the rules listing API. Soft-deleted rules (deleted_at not null) are excluded."}},"required":["id","name","category","createdAt","updatedAt"],"description":"Community entity based on Prisma Communities.community_platform_communities with derived presentation fields.\n\nThis response DTO focuses on public-facing metadata, omitting internal references like community_platform_user_id and soft-deletion timestamps. It surfaces derived values such as memberCount, isMember, and isOwner where relevant, and may include a short ordered list of rules to support the right sidebar. All timestamps are ISO-8601 (UTC)."},"ICommunityPlatformCommunity.IUpdate":{"type":"object","properties":{"description":{"type":"string","maxLength":500,"description":"Short community description used in the Community Info + Rules box and discovery snippets.\n\nPrisma mapping: Communities.community_platform_communities.description (nullable text). Business rule caps this field to ≤ 500 characters for concise presentation. Clients may omit this property when not changing the description."},"logoUri":{"type":"string","format":"uri","maxLength":80000,"description":"Optional logo image URI for the community header and cards.\n\nPrisma mapping: Communities.community_platform_communities.logo_uri (nullable varchar(80000)). This API accepts a string URI; the application handles defaults or fallbacks when absent."},"bannerUri":{"type":"string","format":"uri","maxLength":80000,"description":"Optional banner image URI for the community page header.\n\nPrisma mapping: Communities.community_platform_communities.banner_uri (nullable varchar(80000)). This API accepts a string URI; the application handles defaults when not provided."},"category":{"$ref":"#/components/schemas/IECommunityPlatformCommunityCategory","description":"Single selected category from the fixed set.\n\nPrisma mapping: Communities.community_platform_communities.category (text). Only values enumerated in IECommunityPlatformCommunityCategory are permitted."}},"required":[],"description":"Community metadata update payload.\n\nOnly mutable fields of Communities.community_platform_communities can be edited by this DTO: description, logo_uri, banner_uri, and category. The immutable identifier fields (name and name_key) are excluded by design, and system-managed timestamps (created_at, updated_at, last_active_at) or soft-delete flags (deleted_at) are not accepted here.\n\nSecurity: Only the creator (community_platform_user_id) or a site administrator may perform this update according to ownership rules."},"ICommunityPlatformCommunityRule.IRequest":{"type":"object","properties":{"cursor":{"type":"string","description":"Opaque cursor token for deterministic continuation based on the active sort key.\n\nUsed to fetch the next page of rules without duplicates or omissions."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of items per page.\n\nDefaults to 20 when omitted. The upper bound protects backend resources."},"sortBy":{"$ref":"#/components/schemas/IECommunityPlatformCommunityRuleSortBy","description":"Ordering key for listing rules.\n\n- order: uses Communities.community_platform_community_rules.order_index\n- createdAt: uses Communities.community_platform_community_rules.created_at"},"order":{"$ref":"#/components/schemas/IESortOrder","description":"Sort direction to apply to the selected sortBy field (asc or desc)."},"q":{"type":"string","minLength":1,"description":"Optional text filter applied to rule text.\n\nBacked by a trigram index on Communities.community_platform_community_rules.text for efficient contains-like queries."}},"required":[],"description":"Search, filter, sorting, and cursor-based pagination parameters for listing a community’s rule items.\n\nBacked by Communities.community_platform_community_rules. Default user-facing presentation orders by order_index ascending for the Community Info + Rules section."},"IECommunityPlatformCommunityCategory":{"oneOf":[{"const":"Tech & Programming","description":"Allowed community categories (application-level enumeration).\n\nPrisma mapping: Communities.community_platform_communities.category (text). The application enforces exactly one selection from this fixed set at creation/update time. Values are human-readable per business specification."},{"const":"Science","description":"Allowed community categories (application-level enumeration).\n\nPrisma mapping: Communities.community_platform_communities.category (text). The application enforces exactly one selection from this fixed set at creation/update time. Values are human-readable per business specification."},{"const":"Movies & TV","description":"Allowed community categories (application-level enumeration).\n\nPrisma mapping: Communities.community_platform_communities.category (text). The application enforces exactly one selection from this fixed set at creation/update time. Values are human-readable per business specification."},{"const":"Games","description":"Allowed community categories (application-level enumeration).\n\nPrisma mapping: Communities.community_platform_communities.category (text). The application enforces exactly one selection from this fixed set at creation/update time. Values are human-readable per business specification."},{"const":"Sports","description":"Allowed community categories (application-level enumeration).\n\nPrisma mapping: Communities.community_platform_communities.category (text). The application enforces exactly one selection from this fixed set at creation/update time. Values are human-readable per business specification."},{"const":"Lifestyle & Wellness","description":"Allowed community categories (application-level enumeration).\n\nPrisma mapping: Communities.community_platform_communities.category (text). The application enforces exactly one selection from this fixed set at creation/update time. Values are human-readable per business specification."},{"const":"Study & Education","description":"Allowed community categories (application-level enumeration).\n\nPrisma mapping: Communities.community_platform_communities.category (text). The application enforces exactly one selection from this fixed set at creation/update time. Values are human-readable per business specification."},{"const":"Art & Design","description":"Allowed community categories (application-level enumeration).\n\nPrisma mapping: Communities.community_platform_communities.category (text). The application enforces exactly one selection from this fixed set at creation/update time. Values are human-readable per business specification."},{"const":"Business & Finance","description":"Allowed community categories (application-level enumeration).\n\nPrisma mapping: Communities.community_platform_communities.category (text). The application enforces exactly one selection from this fixed set at creation/update time. Values are human-readable per business specification."},{"const":"News & Current Affairs","description":"Allowed community categories (application-level enumeration).\n\nPrisma mapping: Communities.community_platform_communities.category (text). The application enforces exactly one selection from this fixed set at creation/update time. Values are human-readable per business specification."}],"description":"Allowed community categories (application-level enumeration).\n\nPrisma mapping: Communities.community_platform_communities.category (text). The application enforces exactly one selection from this fixed set at creation/update time. Values are human-readable per business specification."},"IECommunityPlatformCommunityRuleSortBy":{"oneOf":[{"const":"order","description":"Allowed sort keys for community rules listing.\n\n- order: sort by order_index\n- createdAt: sort by created_at"},{"const":"createdAt","description":"Allowed sort keys for community rules listing.\n\n- order: sort by order_index\n- createdAt: sort by created_at"}],"description":"Allowed sort keys for community rules listing.\n\n- order: sort by order_index\n- createdAt: sort by created_at"},"IESortOrder":{"oneOf":[{"const":"asc","description":"Generic sort direction enumeration used across list requests.\n\nValues:\n- asc: ascending order\n- desc: descending order"},{"const":"desc","description":"Generic sort direction enumeration used across list requests.\n\nValues:\n- asc: ascending order\n- desc: descending order"}],"description":"Generic sort direction enumeration used across list requests.\n\nValues:\n- asc: ascending order\n- desc: descending order"},"ICommunityPlatformCommunityRule.IUpdate":{"type":"object","properties":{"order":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"New display order within the community’s rules list. When provided, must be ≥ 1 and unique per community.\n\nPrisma mapping: Communities.community_platform_community_rules.order_index (Int)."},"text":{"oneOf":[{"type":"string","maxLength":100},{"type":"null"}],"description":"Updated rule text (≈ ≤ 100 chars). Plain text only.\n\nPrisma mapping: Communities.community_platform_community_rules.text (text)."}},"required":[],"description":"Update DTO for a Community Rule.\n\nAll fields are optional (Partial pattern). Immutable properties such as id, community linkage, and timestamps are not included. Use null explicitly to clear optional fields if business logic allows; otherwise, omit."},"ICommunityPlatformRecentCommunity.IList":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformRecentCommunity.ISummary"},"maxItems":5,"description":"Up to five most recent communities for the authenticated user, ordered by lastActivityAt descending.\n\nBacked by Memberships.community_platform_recent_communities (last_activity_at) with joins to Communities.community_platform_communities for display fields. Rows where deleted_at is set on either table are excluded."}},"required":["data"],"description":"Container for the Left Sidebar \"Recent Communities\" module.\n\nRepresents the caller’s five most recently active communities. The dataset is capped at five items by business rule and reinforced here by maxItems validation. Uses Memberships.community_platform_recent_communities as the source with ordering by last_activity_at (desc)."},"ICommunityPlatformRecentCommunity.ISummary":{"type":"object","properties":{"name":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$","description":"Immutable community name used in URLs and display (Prisma: community_platform_communities.name).\n\nNaming policy (business rules): alphanumeric with optional hyphen/underscore separators, 3–30 chars, begins/ends alphanumeric, and avoid consecutive separators. Uniqueness is enforced case-insensitively via name_key at the database layer."},"logoUrl":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"Optional logo image URI for the community (Prisma: community_platform_communities.logo_uri). When null or absent, clients show a default icon."},"lastActivityAt":{"type":"string","format":"date-time","description":"Most recent activity time for this user in this community (Prisma: community_platform_recent_communities.last_activity_at). Used to order the recent list descending."},"category":{"oneOf":[{"$ref":"#/components/schemas/IECommunityCategory"},{"type":"null"}],"description":"Community category value (Prisma: community_platform_communities.category). Optional in this summary but typically present. Enum values are defined in IECommunityCategory."}},"required":["name","lastActivityAt"],"description":"Summary card for a recent community list item.\n\nComposed primarily from Communities.community_platform_communities (name, logo_uri, category) and Memberships.community_platform_recent_communities (last_activity_at). Excludes soft-deleted records."},"ICommunityPlatformPost.IRequest":{"type":"object","properties":{"q":{"type":"string","minLength":2,"description":"Optional normalized search query for posts. Matches against title/body when used by search endpoints.\n\nBusiness rule: queries shorter than 2 characters are rejected. Ignored when the endpoint context does not support text search (e.g., simple feeds)."},"sort":{"$ref":"#/components/schemas/IEPostSort","description":"Sort mode for listing posts.\n\n- newest: created_at DESC, id DESC tie-breaker\n- top: score DESC (votes up − votes down), then created_at DESC, then id DESC\n\nDefaults to newest when not specified."},"cursor":{"type":"string","description":"Opaque cursor for deterministic continuation. Encodes the active sort tuple (e.g., created_at/id for Newest; score/created_at/id for Top). Do not interpret on the client; treat as an opaque string."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Maximum number of items to return. Defaults to 20 per business rules for feeds and search."}},"required":[],"description":"Standard request model for listing/searching post summaries.\n\nBacked by Posts.community_platform_posts with optional joins to post_votes (for Top scoring) and comments (for visible comment counts). Applies deterministic sorting and cursor-based pagination. All timestamps are ISO-8601 UTC strings in responses."},"ICommunityPlatformCommunityMember.IList":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunityMember"},"description":"Active memberships (deleted_at is null) for the specified user, each paired with community summary details and the joined timestamp."}},"required":["data"],"description":"List container of active community memberships for a user.\n\nSourced from Memberships.community_platform_community_members (created_at as joinedAt) joined to Communities.community_platform_communities (name, category, branding) for display. Excludes soft-deleted memberships and soft-deleted communities."},"ICommunityPlatformCommunityMember":{"type":"object","properties":{"community":{"$ref":"#/components/schemas/ICommunityPlatformCommunity.IBasic","description":"Community reference wrapped in a minimal, safe-to-expose view. Mapped from Prisma model \"community_platform_communities\" using the immutable name and optional branding fields."},"joined":{"type":"boolean","description":"Whether the authenticated user is currently a member of the community.\n\nThis flag reflects presence (deleted_at is null) of an active membership row in Prisma model \"community_platform_community_members\" for (user, community)."},"memberCount":{"type":"integer","description":"Number of active members in the community.\n\nComputed as the count of rows in \"community_platform_community_members\" for the community where deleted_at is null. Used to update UI immediately after join/leave.\n\nType note: integer with non-negative domain.","minimum":0},"joinedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the current active membership row was created (ISO-8601 in UTC) or null when not joined.\n\nMaps to \"community_platform_community_members.created_at\" for the current user’s active record. Exposed for relative time rendering in clients."}},"required":["community","joined","memberCount"],"description":"Membership snapshot for a user’s relation to a community.\n\nThis DTO merges multiple Prisma sources for presentation: the community entity from \"community_platform_communities\" and the membership state from \"community_platform_community_members\". It never exposes internal foreign keys directly; the authenticated user identity is implied by context.\n\nSecurity: No ownership-changing fields are present. This DTO intentionally omits sensitive account information and any internal flags. Member counts are read-only computed values."},"ICommunityPlatformCommunity.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the community.\n\nPrisma: community_platform_communities.id"},"name":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$","description":"Immutable display/URL name of the community. Case-insensitive uniqueness is enforced via name_key.\n\nPrisma: community_platform_communities.name (application maintains name_key)."},"category":{"$ref":"#/components/schemas/IECommunityCategory","description":"Community category constrained by business rules.\n\nPrisma: community_platform_communities.category (stored as text)."},"description":{"oneOf":[{"type":"string","maxLength":500},{"type":"null"}],"description":"Optional short description used on cards and right-sidebar info.\n\nPrisma: community_platform_communities.description (≤ 500 chars by business rules)."},"logoUrl":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"Optional logo image URI for branding in headers/cards.\n\nPrisma: community_platform_communities.logo_uri."},"memberCount":{"type":"integer","minimum":0,"description":"Computed count of distinct active members for this community.\n\nDerived from community_platform_community_members where deleted_at is null. Not stored in communities table."},"createdAt":{"type":"string","format":"date-time","description":"Community creation timestamp used for Newest ordering and audit.\n\nPrisma: community_platform_communities.created_at."},"lastActiveAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional timestamp reflecting recent community activity.\n\nPrisma: community_platform_communities.last_active_at."}},"required":["id","name","category","createdAt","memberCount"],"description":"Community summary card DTO.\n\nCompact representation of a sub‑community from Prisma model community_platform_communities. Surfaces immutable name, category, optional branding/description, and a derived memberCount for card/list displays.\n\nAvoids internal or sensitive fields and follows business naming/format rules."},"IEPostSort":{"oneOf":[{"const":"newest","description":"Post sort modes supported across feeds and search.\n\n- newest: Order by community_platform_posts.created_at DESC; tie-break by id DESC.\n- top: Order by aggregated score (sum of community_platform_post_votes.value where deleted_at is null) DESC; tie-break by created_at DESC, then id DESC."},{"const":"top","description":"Post sort modes supported across feeds and search.\n\n- newest: Order by community_platform_posts.created_at DESC; tie-break by id DESC.\n- top: Order by aggregated score (sum of community_platform_post_votes.value where deleted_at is null) DESC; tie-break by created_at DESC, then id DESC."}],"description":"Post sort modes supported across feeds and search.\n\n- newest: Order by community_platform_posts.created_at DESC; tie-break by id DESC.\n- top: Order by aggregated score (sum of community_platform_post_votes.value where deleted_at is null) DESC; tie-break by created_at DESC, then id DESC."},"ICommunityPlatformCommunityMember.IUpdate":{"type":"object","properties":{"join":{"type":"boolean","description":"Desired final membership state for the authenticated user with respect to the target community.\n\ntrue means the caller intends to be a member (Join). false means the caller intends not to be a member (Leave).\n\nBusiness rules: This request triggers idempotent membership upsert or removal in the Prisma model \"community_platform_community_members\". The server will update recency in \"community_platform_recent_communities\" accordingly."}},"required":["join"],"description":"Request payload to set the authenticated user’s membership state for a community.\n\nThis DTO is used by membership toggling operations that manipulate the Prisma table \"community_platform_community_members\". It expresses the final desired state only (join=true or join=false) and does not carry user IDs because the actor is resolved from authentication context.\n\nSecurity and integrity: The actor identity comes from the authenticated session, never from the request body. Idempotent semantics are required: repeated requests yielding the same final state must not create duplicates."},"ICommunityPlatformPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the post.\n\nPrisma: community_platform_posts.id (UUID)."},"community":{"$ref":"#/components/schemas/ICommunityPlatformCommunity.IBasic","description":"Community where the post was created, shown in cards and detail views.\n\nResolved from Prisma relation community_platform_posts.community_platform_community_id → community_platform_communities. Name is immutable at application layer."},"title":{"type":"string","minLength":5,"maxLength":120,"description":"Post title (plain text). 5–120 characters inclusive.\n\nPrisma: community_platform_posts.title."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"Post body (plain text with line breaks; no executable code). 10–10,000 characters inclusive.\n\nPrisma: community_platform_posts.body."},"author":{"$ref":"#/components/schemas/ICommunityPlatformUser.IAuthorLabel","description":"Author label for display and ownership checks.\n\nDerived from Prisma relation community_platform_posts.community_platform_user_id → community_platform_users."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp (ISO-8601 UTC) used for Newest ordering and relative time.\n\nPrisma: community_platform_posts.created_at."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp (ISO-8601 UTC).\n\nPrisma: community_platform_posts.updated_at."},"score":{"type":"integer","description":"Computed score = upvotes − downvotes.\n\nDerived from aggregating rows in Prisma community_platform_post_votes where value ∈ {1, -1} and deleted_at is null. Not stored in posts table."},"commentCount":{"type":"integer","minimum":0,"description":"Visible comment count for the post.\n\nDerived from rows in Prisma community_platform_comments where community_platform_post_id matches and deleted_at is null."},"myVote":{"oneOf":[{"$ref":"#/components/schemas/IECommunityPlatformVoteState"},{"type":"null"}],"description":"Caller’s current vote state on this post or null when unauthenticated or no vote exists.\n\nBacked by Prisma community_platform_post_votes for (post, current user)."}},"required":["id","community","title","body","author","createdAt","updatedAt","score","commentCount"],"description":"Full post representation suitable for Post Detail views and rich cards.\n\nPrimary source: Prisma table community_platform_posts with relations to communities (container) and users (author). Sensitive fields are excluded by design. Computed values like score and commentCount are included for deterministic sorting and display.\n\nSecurity: Ownership (for subsequent edits/deletes) is enforced server-side using the authenticated session and the post’s author relation; this DTO does not expose modifiable ownership fields."},"ICommunityPlatformPost.ICreate":{"type":"object","properties":{"communityName":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$","description":"Immutable display/URL name of the target community. Case-insensitive at persistence via normalized key.\n\nApplication resolves to Prisma \"community_platform_communities.name_key\". Business validation: alphanumeric with hyphen/underscore, 3–30 chars, starts/ends alphanumeric, no consecutive separators, not reserved."},"title":{"type":"string","minLength":5,"maxLength":120,"description":"Post title (plain text). Business constraints: 5–120 characters inclusive.\n\nMaps to Prisma \"community_platform_posts.title\"."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"Post body (plain text with line breaks; scripts/code prohibited). Business constraints: 10–10,000 characters inclusive.\n\nMaps to Prisma \"community_platform_posts.body\"."},"authorDisplayName":{"oneOf":[{"type":"string","minLength":0,"maxLength":32},{"type":"null"}],"description":"Optional author display name override (0–32 chars). When null or empty, clients may show a default such as \"Anonymous\".\n\nMaps to Prisma \"community_platform_posts.author_display_name\"."}},"required":["communityName","title","body"],"description":"Request body for creating a text-only post in a specific community.\n\nSecurity: The author is taken from the authenticated session context and persisted to Prisma \"community_platform_posts.community_platform_user_id\". The request body must not accept or infer author IDs from client input. Timestamps are set by the server."},"ICommunityPlatformCommunity.IBasic":{"type":"object","properties":{"name":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$","description":"Immutable community name used in URLs and display.\n\nMaps to Prisma \"community_platform_communities.name\" (with case-insensitive uniqueness enforced via name_key)."},"logoUrl":{"oneOf":[{"type":"string","maxLength":80000},{"type":"null"}],"description":"Optional logo URL for the community header/card.\n\nMaps to Prisma \"community_platform_communities.logo_uri\". Clients may fall back to a default image when null."}},"required":["name"],"description":"Minimal, safe-to-expose community view for embedding inside other DTOs.\n\nThis schema intentionally avoids disclosing internal identifiers or system-managed fields. It maps to Prisma model \"community_platform_communities\" and is suitable for cards and nested references."},"ICommunityPlatformUser.IAuthorLabel":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Author’s user ID.\n\nMaps to Prisma \"community_platform_users.id\"."},"displayName":{"oneOf":[{"type":"string","minLength":0,"maxLength":255},{"type":"null"}],"description":"Optional author display name label. When null/empty, clients render a default such as \"Anonymous\".\n\nMaps to Prisma \"community_platform_users.display_name\" for accounts, or to the post’s own author_display_name when applicable depending on provider composition."}},"required":["id"],"description":"Concise author label used on posts/comments. Contains only public-facing identity needed for display and ownership checks.\n\nSensitive fields like email, username_normalized, email_normalized, and password_hash are intentionally omitted."},"IECommunityPlatformVoteState":{"oneOf":[{"const":"UPVOTE","description":"Vote state enumeration used across posts and comments.\n\nBusiness semantics per Voting requirements: UPVOTE contributes +1, DOWNVOTE contributes −1, and NONE represents no effective vote (typically absence of a row in the corresponding vote table).\n\nThis is a presentation-level enum; persistence of vote states is modeled via Prisma tables community_platform_post_votes and community_platform_comment_votes with value ∈ {1, -1}."},{"const":"DOWNVOTE","description":"Vote state enumeration used across posts and comments.\n\nBusiness semantics per Voting requirements: UPVOTE contributes +1, DOWNVOTE contributes −1, and NONE represents no effective vote (typically absence of a row in the corresponding vote table).\n\nThis is a presentation-level enum; persistence of vote states is modeled via Prisma tables community_platform_post_votes and community_platform_comment_votes with value ∈ {1, -1}."},{"const":"NONE","description":"Vote state enumeration used across posts and comments.\n\nBusiness semantics per Voting requirements: UPVOTE contributes +1, DOWNVOTE contributes −1, and NONE represents no effective vote (typically absence of a row in the corresponding vote table).\n\nThis is a presentation-level enum; persistence of vote states is modeled via Prisma tables community_platform_post_votes and community_platform_comment_votes with value ∈ {1, -1}."}],"description":"Vote state enumeration used across posts and comments.\n\nBusiness semantics per Voting requirements: UPVOTE contributes +1, DOWNVOTE contributes −1, and NONE represents no effective vote (typically absence of a row in the corresponding vote table).\n\nThis is a presentation-level enum; persistence of vote states is modeled via Prisma tables community_platform_post_votes and community_platform_comment_votes with value ∈ {1, -1}."},"ICommunityPlatformPost.IUpdate":{"type":"object","properties":{"title":{"type":"string","minLength":5,"maxLength":120,"description":"Post title to update.\n\nMaps to community_platform_posts.title in the Prisma schema. Business rules require 5–120 characters and plain text only; executable content is prohibited. Edits affect only presentation and do not change ownership or community associations."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"Post body content to update (plain text with line breaks allowed).\n\nMaps to community_platform_posts.body in the Prisma schema. Business rules require 10–10,000 characters and prohibit scripts or executable markup. Preserve line breaks and neutralize markup semantics at display time."},"authorDisplayName":{"oneOf":[{"type":"string","minLength":0,"maxLength":32},{"type":"null"}],"description":"Optional author display name shown on cards/details.\n\nCorresponds to community_platform_posts.author_display_name. Business rules allow 0–32 characters. If null or empty, clients may render a default such as \"Anonymous\"."}},"required":[],"description":"Update DTO for editing a text-only post’s mutable fields.\n\nThis request body mirrors the editable columns of the Prisma model Posts.community_platform_posts: title, body, and optional author_display_name. It intentionally excludes immutable or system-managed fields such as id, community reference, author reference, created_at, updated_at, and deleted_at.\n\nSecurity and ownership: Only the post’s author (or site administrator via policy) may use this DTO in update operations. Ownership is enforced at the business/service layer, not by this schema."},"ICommunityPlatformPost.IGlobalLatest":{"type":"object","properties":{"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformPost.IPostMini"},"minItems":10,"maxItems":10,"description":"Exactly 10 newest post mini-cards sitewide, ordered by Newest (created_at DESC, id DESC).\n\nEach item is a minimal representation suitable for the Home right sidebar \"Global Latest\" module."}},"required":["data"],"description":"Container for the fixed-size \"Global Latest\" list of posts.\n\nDerived from Prisma model Posts.community_platform_posts with deterministic Newest ordering (created_at DESC, id DESC). Always returns exactly 10 items and has no pagination."},"ICommunityPlatformPost.IPostMini":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the post.\n\nMaps to community_platform_posts.id (UUID primary key). Used for navigation to Post Detail."},"community":{"$ref":"#/components/schemas/ICommunityPlatformCommunity.IRef","description":"Minimal community identity containing the immutable community name for URL and display.\n\nMaps to Posts.community_platform_posts.community_platform_community_id → Communities.community_platform_communities."},"title":{"type":"string","minLength":5,"maxLength":120,"description":"Post title.\n\nSourced from community_platform_posts.title. Business constraints: 5–120 characters, plain text."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp of the post in ISO-8601 UTC.\n\nSourced from community_platform_posts.created_at and used for Newest ordering and relative time displays."}},"required":["id","community","title","createdAt"],"description":"Minimal post representation for compact lists (e.g., Global Latest).\n\nProvides the essential fields needed to render a single-line title with time and community name, without heavy relations or aggregates."},"ICommunityPlatformCommunity.IRef":{"type":"object","properties":{"name":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$","description":"Immutable community name used in URLs and display.\n\nMaps to Communities.community_platform_communities.name. Business rules enforce alphanumeric with optional hyphen/underscore, 3–30 chars, starting/ending alphanumeric, and no consecutive separators. Case-insensitive uniqueness is enforced via name_key at the database layer."}},"required":["name"],"description":"Minimal community reference containing only the immutable name.\n\nBacked by Communities.community_platform_communities; suitable for embedding within other DTOs (e.g., post mini-cards)."},"ICommunityPlatformComment.IRequest":{"type":"object","properties":{"cursor":{"type":"string","description":"Opaque cursor token representing the boundary of the previous page according to the active ordering tuple (Newest uses created_at DESC, id DESC)."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of items to return (cursor-based pagination).\n\nDefault is 20 for comments pages per business rules."},"q":{"type":"string","minLength":2,"description":"Optional normalized search query used by global comment search (≥ 2 characters after normalization).\n\nWhen used for listing comments under a single post, this field is typically omitted."}},"required":[],"description":"Request DTO for listing or searching comments with cursor-based pagination.\n\nBacked by Comments.community_platform_comments and related indices. Supports Newest ordering semantics across both post-scoped listings and global search. The same DTO is reused across endpoints; some properties (e.g., q) apply only to search scenarios."},"ICommunityPlatformComment.ICreate":{"type":"object","properties":{"content":{"type":"string","minLength":2,"maxLength":2000,"description":"Plain-text comment content with line breaks allowed; executable code is prohibited.\n\nMaps to Comments.community_platform_comments.content with business constraints 2–2,000 characters."},"parentId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional parent comment identifier for creating a nested reply (must belong to the same post).\n\nBacked by Comments.community_platform_comments.parent_id. Nesting depth must not exceed 8 levels including the root; enforcement occurs in service logic."}},"required":["content"],"description":"Create DTO for a new comment under a post (and optionally as a reply).\n\nCorresponds to Prisma model Comments.community_platform_comments. Requires authentication at the service layer; the author and post associations are derived from path/auth context and are not accepted in the payload."},"ICommunityPlatformComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the comment.\n\nPrisma source: community_platform_comments.id (UUID primary key)."},"postId":{"type":"string","format":"uuid","description":"Identifier of the post this comment belongs to.\n\nPrisma source: community_platform_comments.community_platform_post_id (FK → posts.id)."},"authorId":{"type":"string","format":"uuid","description":"Identifier of the user who authored this comment.\n\nPrisma source: community_platform_comments.community_platform_user_id (FK → users.id)."},"parentId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Identifier of the parent comment when this is a reply; null for root comments.\n\nPrisma source: community_platform_comments.parent_id (nullable FK to comments.id)."},"content":{"type":"string","description":"Plain-text body of the comment. Line breaks are allowed; executable code is prohibited by business rules.\n\nPrisma source: community_platform_comments.content. Creation/update validations require length 2–2,000 characters, but response payloads may include placeholder text for soft-deleted comments."},"createdAt":{"type":"string","format":"date-time","description":"Timestamp when the comment was created (ISO 8601, UTC).\n\nPrisma source: community_platform_comments.created_at. Used for Newest sorting and relative time displays."},"updatedAt":{"type":"string","format":"date-time","description":"Timestamp when the comment was last modified (ISO 8601, UTC).\n\nPrisma source: community_platform_comments.updated_at. Reflects edits after creation."},"deletedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp (ISO 8601, UTC). When present (non-null), the comment is considered deleted and its body should be hidden in public views while preserving thread position.\n\nPrisma source: community_platform_comments.deleted_at."},"score":{"type":"integer","description":"Computed score of the comment defined as upvotes minus downvotes.\n\nDerived at query time from community_platform_comment_votes (sum of value where value ∈ {-1,1} and deleted_at is null). Not persisted in comments table."},"myVote":{"$ref":"#/components/schemas/IECommunityPlatformVoteState","description":"The caller’s current vote on this comment. One of NONE, UPVOTE, or DOWNVOTE. Included when an authenticated context is available; omitted otherwise.\n\nDerived from community_platform_comment_votes for the (comment, user) pair."},"author":{"$ref":"#/components/schemas/ICommunityPlatformUser.ISummary","description":"Minimal author information for display (id and displayName).\n\nAuthor account source: community_platform_users with optional display_name used as the friendly label."}},"required":["id","postId","authorId","content","createdAt","updatedAt"],"description":"Comment entity returned from read operations.\n\nThis type represents a threaded comment stored in the Prisma model Comments: community_platform_comments. It includes foreign keys to the parent post and author account, hierarchical linkage through an optional parent_id for replies, and standard audit timestamps (created_at/updated_at). A nullable deleted_at implements soft deletion while preserving thread continuity.\n\nResponse payloads may include derived fields such as score (aggregated from community_platform_comment_votes) and myVote (the caller’s per-item vote), which are not persisted in the comments table but computed at runtime. Security note: no sensitive authentication fields are present in this DTO. Passwords, token hashes, or normalized identity columns are never exposed."},"ICommunityPlatformComment.IUpdate":{"type":"object","properties":{"content":{"type":"string","minLength":2,"maxLength":2000,"description":"New plain-text content for the comment. Line breaks allowed; executable content prohibited.\n\nValidation aligns with business rules: length 2–2,000 characters."}},"required":[],"description":"Comment update payload.\n\nThis DTO is used to edit an existing record in Prisma model community_platform_comments. Only the content field is editable; immutable associations (post, author, and parent) cannot be changed via this operation. All fields are optional (Partial pattern); when provided, content must satisfy the 2–2,000 character constraint."},"ICommunityPlatformPostVote.IUpdate":{"type":"object","properties":{"state":{"$ref":"#/components/schemas/IEVoteDirection","description":"Desired vote direction for this post. Only UPVOTE or DOWNVOTE are accepted here; use the DELETE endpoint to clear (None)."}},"required":["state"],"description":"Post vote update payload.\n\nThis DTO drives writes to the Prisma model Posts/Votes: community_platform_post_votes by setting the caller’s effective vote for a post. Only two directions are accepted here (UPVOTE or DOWNVOTE). Transition to NONE is handled by the dedicated DELETE endpoint that removes the vote row."},"ICommunityPlatformPostVoteOutcome":{"type":"object","properties":{"postId":{"type":"string","format":"uuid","description":"Identifier of the post whose vote outcome is returned.\n\nPrisma source: community_platform_posts.id."},"score":{"type":"integer","description":"Updated post score computed as upvotes minus downvotes.\n\nDerived at read time from community_platform_post_votes by summing value where value ∈ {-1, 1} and deleted_at is null."},"myVote":{"$ref":"#/components/schemas/IEVoteState","description":"The caller’s current vote state after the operation. One of NONE, UPVOTE, or DOWNVOTE.\n\nState is computed from community_platform_post_votes for the (post, user) pair."}},"required":["postId","score","myVote"],"description":"Outcome payload after changing a vote on a post.\n\nThis response provides the target post id, the recalculated score (upvotes − downvotes), and the caller’s effective vote state. It reflects authoritative server state following an update or clear operation on Prisma model community_platform_post_votes."},"IVoteState":{"oneOf":[{"const":"NONE","description":"Vote state enumeration used across voting outcomes.\n\nThis enum represents the caller’s effective vote on a content item after an operation. Values:\n- NONE: No active vote exists (absence of a vote row in Prisma tables).\n- UPVOTE: An upvote is applied (value = 1 in vote tables).\n- DOWNVOTE: A downvote is applied (value = -1 in vote tables).\n\nBacked by Prisma vote models: Posts.community_platform_post_votes and Comments.community_platform_comment_votes where deleted_at is null for tallies."},{"const":"UPVOTE","description":"Vote state enumeration used across voting outcomes.\n\nThis enum represents the caller’s effective vote on a content item after an operation. Values:\n- NONE: No active vote exists (absence of a vote row in Prisma tables).\n- UPVOTE: An upvote is applied (value = 1 in vote tables).\n- DOWNVOTE: A downvote is applied (value = -1 in vote tables).\n\nBacked by Prisma vote models: Posts.community_platform_post_votes and Comments.community_platform_comment_votes where deleted_at is null for tallies."},{"const":"DOWNVOTE","description":"Vote state enumeration used across voting outcomes.\n\nThis enum represents the caller’s effective vote on a content item after an operation. Values:\n- NONE: No active vote exists (absence of a vote row in Prisma tables).\n- UPVOTE: An upvote is applied (value = 1 in vote tables).\n- DOWNVOTE: A downvote is applied (value = -1 in vote tables).\n\nBacked by Prisma vote models: Posts.community_platform_post_votes and Comments.community_platform_comment_votes where deleted_at is null for tallies."}],"description":"Vote state enumeration used across voting outcomes.\n\nThis enum represents the caller’s effective vote on a content item after an operation. Values:\n- NONE: No active vote exists (absence of a vote row in Prisma tables).\n- UPVOTE: An upvote is applied (value = 1 in vote tables).\n- DOWNVOTE: A downvote is applied (value = -1 in vote tables).\n\nBacked by Prisma vote models: Posts.community_platform_post_votes and Comments.community_platform_comment_votes where deleted_at is null for tallies."},"ICommentVoteUpdateState":{"oneOf":[{"const":"UPVOTE","description":"Enumeration for comment vote update requests (PUT operation only).\n\nPer business rules, the update operation accepts only UPVOTE or DOWNVOTE. Clearing a vote (state NONE) is handled by the DELETE endpoint and is intentionally excluded here. Maps to Comments.community_platform_comment_votes.value domain {1, -1}."},{"const":"DOWNVOTE","description":"Enumeration for comment vote update requests (PUT operation only).\n\nPer business rules, the update operation accepts only UPVOTE or DOWNVOTE. Clearing a vote (state NONE) is handled by the DELETE endpoint and is intentionally excluded here. Maps to Comments.community_platform_comment_votes.value domain {1, -1}."}],"description":"Enumeration for comment vote update requests (PUT operation only).\n\nPer business rules, the update operation accepts only UPVOTE or DOWNVOTE. Clearing a vote (state NONE) is handled by the DELETE endpoint and is intentionally excluded here. Maps to Comments.community_platform_comment_votes.value domain {1, -1}."},"ICommunityPlatformCommentVote.IUpdate":{"type":"object","properties":{"state":{"$ref":"#/components/schemas/ICommentVoteUpdateState","description":"Desired vote to apply to the target comment.\n\nMaps to Prisma Comments.community_platform_comment_votes.value (1 for UPVOTE, −1 for DOWNVOTE). NONE is handled by the DELETE vote endpoint and is not accepted here."}},"required":["state"],"description":"Request body for applying a vote to a comment (PUT /communityPlatform/registeredMember/comments/{commentId}/vote).\n\nBacked by Prisma model Comments.community_platform_comment_votes (columns: id, community_platform_comment_id, community_platform_user_id, value, created_at, updated_at, deleted_at). The request expresses only the intended state; ownership and self‑vote guards are enforced by service logic."},"ICommunityPlatformCommentVoteOutcome":{"type":"object","properties":{"commentId":{"type":"string","format":"uuid","description":"Identifier of the comment whose vote outcome is reported.\n\nReferences Comments.community_platform_comments.id (UUID primary key)."},"score":{"type":"integer","description":"Computed score for the comment after applying the vote.\n\nScore is defined as upvotes minus downvotes and is derived from community_platform_comment_votes where deleted_at IS NULL."},"myVote":{"$ref":"#/components/schemas/IVoteState","description":"The caller’s effective vote state on this comment after the operation.\n\nOne of {NONE, UPVOTE, DOWNVOTE} reflecting the current state."}},"required":["commentId","score","myVote"],"description":"Response payload after setting or clearing a vote on a comment.\n\nAggregates are computed from Prisma models Comments.community_platform_comment_votes and Comments.community_platform_comments. Sensitive authentication or credential data is never included."},"ICommunityPlatformRegisteredMember.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the membership assignment.\n\nPrisma: Actors.community_platform_registeredmembers.id."},"userId":{"type":"string","format":"uuid","description":"User account identifier holding this member capability.\n\nPrisma: Actors.community_platform_registeredmembers.community_platform_user_id → community_platform_users.id."},"registeredAt":{"type":"string","format":"date-time","description":"Timestamp when the user became a registered member.\n\nPrisma: Actors.community_platform_registeredmembers.registered_at."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp of this assignment record.\n\nPrisma: Actors.community_platform_registeredmembers.created_at."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp of this assignment record.\n\nPrisma: Actors.community_platform_registeredmembers.updated_at."},"deletedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp if the assignment has been deactivated; null when active.\n\nPrisma: Actors.community_platform_registeredmembers.deleted_at."},"isActive":{"type":"boolean","description":"Convenience flag indicating visibility/activeness of the assignment.\n\nComputed as deleted_at IS NULL."}},"required":["id","userId","registeredAt","createdAt","updatedAt","isActive"],"description":"Summary of a Registered Member role assignment.\n\nBacked by Actors.community_platform_registeredmembers. Designed for management grids and list views; excludes any sensitive user credential data."},"ICommunityPlatformSiteAdmin.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the administrator role assignment.\n\nPrisma table: community_platform_siteadmins.id."},"userId":{"type":"string","format":"uuid","description":"Identifier of the owning user account to whom administrator privileges are granted.\n\nPrisma relation: community_platform_siteadmins.community_platform_user_id → community_platform_users.id."},"grantedAt":{"type":"string","format":"date-time","description":"Timestamp when administrative privileges were granted to the user.\n\nPrisma column: community_platform_siteadmins.granted_at."},"revokedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when administrative privileges were revoked. Null indicates a currently active admin grant.\n\nPrisma column: community_platform_siteadmins.revoked_at."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp for the admin assignment record used for audit and ordering.\n\nPrisma column: community_platform_siteadmins.created_at."},"updatedAt":{"type":"string","format":"date-time","description":"Last update timestamp for this admin assignment record.\n\nPrisma column: community_platform_siteadmins.updated_at."},"deletedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for the role assignment record. When set, the record is considered hidden from normal operations.\n\nPrisma column: community_platform_siteadmins.deleted_at."},"isActive":{"type":"boolean","description":"Computed convenience flag indicating whether the admin assignment is currently active.\n\nDerived by checking that revokedAt is null and deletedAt is null. Not stored in the database."}},"required":["id","userId","grantedAt","createdAt","updatedAt"],"description":"Site administrator assignment summary.\n\nThis schema represents a compact view of an administrative role grant stored in the Prisma model “community_platform_siteadmins”. It includes only non-sensitive, business-facing fields required for listing or summarizing administrator assignments, such as the assignment id, the user it belongs to, and the grant and lifecycle timestamps.\n\nUse this summary where management grids or audit lists need to render who has site-wide privileges without loading full detail objects. Sensitive credential data is never exposed."},"ICommunityPlatformSession.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the session.\n\nPrisma table: community_platform_sessions.id."},"userId":{"type":"string","format":"uuid","description":"Identifier of the user who owns this session.\n\nPrisma relation: community_platform_sessions.community_platform_user_id → community_platform_users.id."},"userAgent":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Client user agent string captured at sign-in or last interaction for device identification.\n\nPrisma column: community_platform_sessions.user_agent."},"ip":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Last observed client IP address (text form, supports IPv4/IPv6).\n\nPrisma column: community_platform_sessions.ip."},"clientPlatform":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional client platform hint (e.g., OS/Browser summary).\n\nPrisma column: community_platform_sessions.client_platform."},"clientDevice":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional device descriptor (e.g., model or category).\n\nPrisma column: community_platform_sessions.client_device."},"sessionType":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Logical session type if used by the application (e.g., \"standard\", \"admin-console\").\n\nPrisma column: community_platform_sessions.session_type."},"createdAt":{"type":"string","format":"date-time","description":"Session creation timestamp used for relative time displays and audit trails.\n\nPrisma column: community_platform_sessions.created_at."},"updatedAt":{"type":"string","format":"date-time","description":"Last updated timestamp for session metadata.\n\nPrisma column: community_platform_sessions.updated_at."},"lastSeenAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the last authenticated activity for this session.\n\nPrisma column: community_platform_sessions.last_seen_at."},"expiresAt":{"type":"string","format":"date-time","description":"Absolute expiration timestamp to satisfy long-lived session constraints.\n\nPrisma column: community_platform_sessions.expires_at."},"revokedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the session was revoked. Null indicates the session has not been explicitly revoked.\n\nPrisma column: community_platform_sessions.revoked_at."},"deletedAt":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for retention and compliance workflows.\n\nPrisma column: community_platform_sessions.deleted_at."},"isActive":{"type":"boolean","description":"Computed convenience flag indicating whether the session is currently active.\n\nTypically true when revokedAt is null, expiresAt is in the future, and deletedAt is null. This is a derived field, not stored in the database."}},"required":["id","userId","createdAt","updatedAt","expiresAt"],"description":"Authentication session summary.\n\nRepresents a safe, non-sensitive view of a user’s long-lived authentication session stored in the Prisma model “community_platform_sessions”. The schema intentionally omits secret materials such as hashed_token while providing lifecycle and device hints suitable for session management UIs.\n\nUsed for listings or compact displays of sessions, enabling users and admins to identify devices and session states without exposing sensitive token data."},"ICommunityPlatformPost.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the post.\n\nPrisma table: community_platform_posts.id."},"community":{"$ref":"#/components/schemas/ICommunityRef.ISummary","description":"Minimal community reference for card displays.\n\nDerived from community_platform_posts.community_platform_community_id → community_platform_communities."},"title":{"type":"string","minLength":5,"maxLength":120,"description":"Post title in plain text (5–120 chars).\n\nPrisma column: community_platform_posts.title."},"author":{"$ref":"#/components/schemas/IUserRef.ISummary","description":"Minimal author reference with safe, public-facing fields only.\n\nDerived from community_platform_posts.community_platform_user_id → community_platform_users."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp for Newest ordering and relative time.\n\nPrisma column: community_platform_posts.created_at."},"commentCount":{"type":"integer","minimum":0,"description":"Visible comment count for the post (excludes soft-deleted comments by business rules).\n\nDerived from community_platform_comments (deleted_at is null)."},"score":{"type":"integer","description":"Score computed as upvotes − downvotes.\n\nDerived from community_platform_post_votes by summing value where deleted_at is null."},"myVote":{"oneOf":[{"$ref":"#/components/schemas/IEVoteState"},{"type":"null"}],"description":"The caller’s current vote state on this post when authenticated; null when unauthenticated or not applicable.\n\nDerived from community_platform_post_votes for the (post, user) pair; not persisted on the post."}},"required":["id","community","title","author","createdAt","commentCount","score"],"description":"Post summary (card) DTO.\n\nA compact representation of a text‑only post based on the Prisma model “community_platform_posts.” It includes the community and author mini‑refs, title, creation time, and derived aggregates such as commentCount and score for list rendering.\n\nThis summary intentionally excludes large text bodies and any sensitive/internal fields, focusing on efficient rendering in feeds, community lists, and search results."},"ICommunityRef.ISummary":{"type":"object","properties":{"name":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$","description":"Immutable community name (user-facing). Case-insensitive uniqueness is enforced via the normalized key stored as name_key.\n\nPrisma source: community_platform_communities.name."},"logoUrl":{"oneOf":[{"type":"string","format":"uri"},{"type":"null"}],"description":"Optional logo URI to display alongside the community name.\n\nPrisma source: community_platform_communities.logo_uri."},"category":{"$ref":"#/components/schemas/IECommunityCategory","description":"Community category text constrained by application-level enum.\n\nPrisma source: community_platform_communities.category."}},"required":["name","category"],"description":"Minimal community reference used inside post cards and other summaries.\n\nThis object resolves from community_platform_communities and provides only the essentials needed to render a compact reference (name, optional logo, category)."},"IUserRef.ISummary":{"$ref":"#/components/schemas/ICommunityPlatformUser.ISummary","description":"Compatibility alias referencing the safe user summary DTO.\n\nThis type directly reuses ICommunityPlatformUser.ISummary to embed a minimal, non‑sensitive user reference (e.g., id and public profile basics) in other entities without duplicating structure. It intentionally excludes confidential fields like password_hash and internal normalized keys (email_normalized, username_normalized) from Actors.community_platform_users.\n\nUse this alias when legacy layers expect IUserRef.ISummary; new integrations may reference ICommunityPlatformUser.ISummary directly."},"IEVoteState":{"oneOf":[{"const":"UPVOTE","description":"Caller’s current vote is an upvote (+1). Mapped from value=1 rows in vote tables (community_platform_post_votes / community_platform_comment_votes, deleted rows ignored)."},{"const":"DOWNVOTE","description":"Caller’s current vote is a downvote (−1). Mapped from value=−1 rows in vote tables (deleted rows ignored)."},{"const":"NONE","description":"No effective vote from the caller. Represented by absence of a vote row; not stored as value=0."}],"description":"Enumeration of effective per-user vote states for content.\n\nBusiness mapping: values derive from the presence and value of a row in community_platform_post_votes or community_platform_comment_votes for the authenticated user (value ∈ {1, −1}); the NONE state corresponds to no row (or a deleted row) and is not persisted. Used by list/detail DTOs to present personalized vote UX without exposing raw identifiers."},"ICommunityPlatformComment.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary identifier of the comment (Comments.community_platform_comments.id).\n\nUUID generated at creation; participates in deterministic Newest tie‑breakers together with createdAt."},"postId":{"type":"string","format":"uuid","description":"Foreign key to the parent post (Comments.community_platform_comments.community_platform_post_id → Posts.community_platform_posts.id)."},"parentId":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional parent comment ID for replies (Comments.community_platform_comments.parent_id). Null for root comments (depth 1)."},"excerpt":{"type":"string","minLength":0,"maxLength":200,"description":"Truncated plain‑text snippet derived from content for summary displays (not persisted).\n\nComputed from Comments.community_platform_comments.content by the provider; removes markup and limits to ~2 lines (~≤200 chars). Large bodies are intentionally excluded from summaries."},"author":{"$ref":"#/components/schemas/ICommunityPlatformUser.ISummary","description":"Minimal author profile derived from Actors.community_platform_users.\n\nSecurity: never include password_hash or normalized keys. This summary is safe for public responses."},"createdAt":{"type":"string","format":"date-time","description":"Creation timestamp (Comments.community_platform_comments.created_at). ISO‑8601 UTC. Used for Newest ordering and relative time."},"updatedAt":{"type":"string","format":"date-time","description":"Last modification timestamp (Comments.community_platform_comments.updated_at). ISO‑8601 UTC."},"score":{"type":"integer","description":"Computed score = upvotes − downvotes for this comment.\n\nAggregated from Comments.community_platform_comment_votes where value ∈ {1, −1} and deleted_at is null; not stored on the comment row."},"myVote":{"oneOf":[{"$ref":"#/components/schemas/IEVoteState"},{"type":"null"}],"description":"Caller’s current vote on this comment. Null/omitted for unauthenticated callers.\n\nValues are IEVoteState (UPVOTE, DOWNVOTE, NONE)."},"post":{"$ref":"#/components/schemas/ICommunityPlatformPost.IReference","description":"Lightweight reference to the parent post for snippet contexts.\n\nBacked by Posts.community_platform_posts; includes essential card fields only."},"community":{"$ref":"#/components/schemas/ICommunityPlatformCommunity.IReference","description":"Lightweight reference to the community that the parent post belongs to.\n\nBacked by Communities.community_platform_communities; name is immutable and used for routing."}},"required":["id","postId","author","createdAt","score"],"description":"Comment summary DTO for list/search views.\n\nMaps to Comments.community_platform_comments and includes only safe, public‑facing fields with computed aggregates (score, myVote) and truncated content (excerpt). Large bodies are intentionally excluded from summaries to meet performance and security guidance. Timestamps are ISO‑8601 in UTC, and relationships are expressed via lightweight reference DTOs."},"ICommunityPlatformCommunity.IReference":{"type":"object","properties":{"name":{"type":"string","minLength":3,"maxLength":30,"pattern":"^[A-Za-z0-9](?:[A-Za-z0-9_-]{1,28}[A-Za-z0-9])?$","description":"Immutable community name used for routing and display (community_platform_communities.name).\n\nCase-insensitive uniqueness is enforced via name_key at the database layer; name itself is immutable per business rules."},"logoUrl":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional logo URI (community_platform_communities.logo_uri).\n\nClients may show a default image when null; value is a URI string."}},"required":["name"],"description":"Lightweight reference to a community based on Communities.community_platform_communities.\n\nIntended for embedding within other DTOs (e.g., comment/post summaries) without loading full community details."},"ICommunityPlatformPost.IReference":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key of the post in Prisma table Posts.community_platform_posts.id.\n\nThis UUID uniquely identifies a post record and is used for navigation (e.g., GET /communityPlatform/posts/{postId}) and as part of deterministic ordering tie-breakers alongside created timestamps when applicable."},"title":{"type":"string","minLength":5,"maxLength":120,"description":"Post title mapped to Prisma column community_platform_posts.title.\n\nBusiness validation requires 5–120 characters of plain text. UI surfaces treat this as a short, display-friendly label shown in cards and detail views; executable content is not permitted, and markup semantics should not be interpreted at render time."}},"required":["id","title"],"description":"Lightweight reference view of a Post sourced from Prisma model Posts.community_platform_posts.\n\nThis type intentionally includes only essential identification and display fields (id, title) for embedding within other DTOs (e.g., comment summaries or search results) without incurring full post payload overhead. The id property corresponds to community_platform_posts.id (UUID). The title property corresponds to community_platform_posts.title and follows business constraints for title length as described in product requirements."},"IEVoteDirection":{"oneOf":[{"const":"UPVOTE","description":"Vote direction enumeration used by update operations that require an explicit choice between an Upvote or a Downvote.\n\nThis enum maps to the domain of values persisted in Prisma voting tables where value ∈ {-1, 1}. Specifically, community_platform_post_votes.value and community_platform_comment_votes.value store directional intent: 1 for upvote and -1 for downvote. Transition to a neutral state (None) is represented by deleting the corresponding vote row rather than storing 0.\n\nBusiness rules: Clients use this enum only in write requests (PUT) to set a concrete direction. Clearing a vote (switching to None) is handled by DELETE endpoints which remove the vote row."},{"const":"DOWNVOTE","description":"Vote direction enumeration used by update operations that require an explicit choice between an Upvote or a Downvote.\n\nThis enum maps to the domain of values persisted in Prisma voting tables where value ∈ {-1, 1}. Specifically, community_platform_post_votes.value and community_platform_comment_votes.value store directional intent: 1 for upvote and -1 for downvote. Transition to a neutral state (None) is represented by deleting the corresponding vote row rather than storing 0.\n\nBusiness rules: Clients use this enum only in write requests (PUT) to set a concrete direction. Clearing a vote (switching to None) is handled by DELETE endpoints which remove the vote row."}],"description":"Vote direction enumeration used by update operations that require an explicit choice between an Upvote or a Downvote.\n\nThis enum maps to the domain of values persisted in Prisma voting tables where value ∈ {-1, 1}. Specifically, community_platform_post_votes.value and community_platform_comment_votes.value store directional intent: 1 for upvote and -1 for downvote. Transition to a neutral state (None) is represented by deleting the corresponding vote row rather than storing 0.\n\nBusiness rules: Clients use this enum only in write requests (PUT) to set a concrete direction. Clearing a vote (switching to None) is handled by DELETE endpoints which remove the vote row."}}}}