/// Core user identity entity representing authenticated accounts in the
/// platform. Serves as the parent for credentials, profile, and sessions.
/// Other role assignment tables such as {@link
/// community_platform_communitymembers} and {@link
/// community_platform_systemadmins} reference this entity. This table is the
/// central user record used across the system for authorship and
/// permissions.
///
/// @namespace Actors
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_users {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Unique public handle used to identify the account. Used for login
  /// alternatives and search. Must be unique platform-wide.
  username String
  
  /// Account status lifecycle label (e.g., active, disabled, pending). Used by
  /// administrative controls and guard checks.
  status String
  
  /// Timestamp of the last successful login for this account.
  last_login_at DateTime?
  
  /// Entity creation timestamp.
  created_at DateTime
  
  /// Last update timestamp.
  updated_at DateTime
  
  /// Soft deletion timestamp. When set, the record is considered removed from
  /// active use.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  community_platform_user_profiles community_platform_user_profiles?
  community_platform_user_credentials community_platform_user_credentials?
  community_platform_sessions community_platform_sessions[]
  community_platform_communitymembers community_platform_communitymembers?
  community_platform_systemadmins_of_community_platform_user_id community_platform_systemadmins? @relation("community_platform_systemadmins_of_community_platform_user_id")
  community_platform_systemadmins_of_granted_by_user_id community_platform_systemadmins[] @relation("community_platform_systemadmins_of_granted_by_user_id")
  community_platform_communities community_platform_communities[]
  community_platform_community_memberships community_platform_community_memberships[]
  community_platform_recent_communities community_platform_recent_communities[]
  community_platform_posts community_platform_posts[]
  community_platform_post_votes community_platform_post_votes[]
  community_platform_post_snapshots community_platform_post_snapshots[]
  community_platform_comments community_platform_comments[]
  community_platform_comment_votes community_platform_comment_votes[]
  mv_community_platform_global_latest_posts mv_community_platform_global_latest_posts[]
  community_platform_admin_actions community_platform_admin_actions[]
  community_platform_audit_logs community_platform_audit_logs[]
  
  @@unique([username])
  @@index([status, created_at])
  @@index([created_at])
}

/// Presentation-oriented profile information for a user, managed separately
/// from credentials for security and normalization. One-to-one with {@link
/// community_platform_users}. Typical fields include display name and avatar
/// URI. Managed through user settings and not used for authentication.
///
/// @namespace Actors
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_user_profiles {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Owned user’s {@link community_platform_users.id}.
  community_platform_user_id String
  
  /// Public display name shown in UI. Suggested 0–32 characters; empty is
  /// allowed and may default to a neutral label for display.
  display_name String?
  
  /// Optional short biography or intro text for the user profile.
  bio String?
  
  /// Optional avatar image URI for the profile.
  avatar_uri String?
  
  /// Optional locale preference tag (e.g., en-US).
  locale String?
  
  /// Optional preferred IANA timezone identifier (e.g., Asia/Seoul).
  timezone String?
  
  /// Profile creation timestamp.
  created_at DateTime
  
  /// Profile last update timestamp.
  updated_at DateTime
  
  /// Soft deletion timestamp for the profile.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  user community_platform_users @relation(fields: [community_platform_user_id], references: [id], onDelete: Cascade)
  
  @@unique([community_platform_user_id])
  @@index([created_at, updated_at])
}

/// Authentication credentials bound to a single user. Contains email
/// identity and password hash. One-to-one with {@link
/// community_platform_users}. Supports email verification and password
/// rotation timestamps. Security-sensitive data; never stores plaintext
/// passwords. Adds email_normalized to enforce case-insensitive uniqueness
/// and faster lookups.
///
/// @namespace Actors
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_user_credentials {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Owned user’s {@link community_platform_users.id}.
  community_platform_user_id String
  
  /// Login email address for the account (original casing). Must be unique
  /// platform-wide and used for communications where applicable.
  email String
  
  /// Lowercased email for case-insensitive uniqueness and lookups. Application
  /// must maintain this value in sync with email.
  email_normalized String
  
  /// Timestamp when the email address was verified. Null if not verified.
  email_verified_at DateTime?
  
  /// BCrypt/Argon or similar password hash. Plaintext passwords must never be
  /// stored.
  password_hash String
  
  /// Timestamp when the password was last changed to support security policy
  /// checks.
  password_updated_at DateTime?
  
  /// Timestamp of the last successful login using these credentials.
  last_login_at DateTime?
  
  /// Credentials creation timestamp.
  created_at DateTime
  
  /// Credentials last update timestamp.
  updated_at DateTime
  
  /// Soft deletion timestamp for the credentials record.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  user community_platform_users @relation(fields: [community_platform_user_id], references: [id], onDelete: Cascade)
  
  @@unique([email])
  @@unique([email_normalized])
  @@unique([community_platform_user_id], map: "community_platform_user_credentials_community_platform_c81fcf25")
  @@index([password_updated_at, updated_at], map: "community_platform_user_credentials_password_updated_a_577995b3")
}

/// Issued sessions for authenticated users enabling access/refresh
/// workflows, sign-out from current/all devices, and revocation. Each
/// session belongs to one {@link community_platform_users}. Stores token
/// hash rather than raw token for security. Adds composite index to optimize
/// active-session queries (by user_id, revoked_at, expires_at).
///
/// @namespace Actors
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_sessions {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Session owner’s {@link community_platform_users.id}.
  community_platform_user_id String
  
  /// Hash of the refresh token associated with this session. Prevents
  /// plaintext token storage. Must be unique to avoid duplication.
  refresh_token_hash String
  
  /// Client user-agent string observed at session creation.
  user_agent String?
  
  /// Client IP address observed at session creation.
  ip String?
  
  /// Timestamp when the session was issued.
  issued_at DateTime
  
  /// Timestamp when the session will expire without renewal.
  expires_at DateTime
  
  /// Timestamp when this session was revoked (sign-out). Null if still active.
  revoked_at DateTime?
  
  /// Record creation timestamp.
  created_at DateTime
  
  /// Record last update timestamp.
  updated_at DateTime
  
  /// Soft deletion timestamp for the session record.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  user community_platform_users @relation(fields: [community_platform_user_id], references: [id], onDelete: Cascade)
  
  community_platform_audit_logs community_platform_audit_logs[]
  
  @@unique([refresh_token_hash])
  @@index([community_platform_user_id, created_at], map: "community_platform_sessions_community_platform_user_id_16631a09")
  @@index([community_platform_user_id, expires_at], map: "community_platform_sessions_community_platform_user_id_0cded53e")
  @@index([community_platform_user_id, revoked_at, expires_at], map: "community_platform_sessions_community_platform_user_id_ece17645")
}

/// Anonymous visitor representations used for sessionless interactions
/// analytics and guard flows. Not tied to authenticated accounts. Provides
/// minimal device fingerprinting context and last seen timestamps. This
/// model is supporting and not user-managed directly.
///
/// @namespace Actors
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_guestvisitors {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Optional opaque device/browser fingerprint used to correlate guest
  /// activity.
  device_fingerprint String?
  
  /// Observed user-agent string for the guest visitor.
  user_agent String?
  
  /// Observed IP address for the guest visitor.
  ip String?
  
  /// First observed timestamp for this guest visitor.
  first_seen_at DateTime
  
  /// Most recent observed timestamp for this guest visitor.
  last_seen_at DateTime
  
  /// Record creation timestamp.
  created_at DateTime
  
  /// Record last update timestamp.
  updated_at DateTime
  
  /// Soft deletion timestamp for the guest visitor record.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  community_platform_audit_logs community_platform_audit_logs[]
  
  @@index([first_seen_at, last_seen_at])
}

/// Role assignment table indicating that a {@link community_platform_users}
/// holds the communityMember role. Used for permission checks, analytics,
/// and onboarding workflows. One row per user (unique), with lifecycle
/// timestamps for activation/suspension.
///
/// @namespace Actors
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_communitymembers {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Assigned user’s {@link community_platform_users.id}.
  community_platform_user_id String
  
  /// Lifecycle status of the membership capability (e.g., active, suspended).
  status String
  
  /// Timestamp when the communityMember role became effective.
  since_at DateTime
  
  /// Record creation timestamp.
  created_at DateTime
  
  /// Record last update timestamp.
  updated_at DateTime
  
  /// Soft deletion timestamp for this role assignment.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  user community_platform_users @relation(fields: [community_platform_user_id], references: [id], onDelete: Cascade)
  
  @@unique([community_platform_user_id], map: "community_platform_communitymembers_community_platform_8daf54c0")
  @@index([status, since_at])
}

/// Role assignment table indicating that a {@link community_platform_users}
/// holds the systemAdmin role. Supports administrative governance with
/// grant/revoke tracking and optional reason text. Enables independent
/// management and audit of elevated privileges.
///
/// @namespace Actors
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_systemadmins {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Admin user’s {@link community_platform_users.id}.
  community_platform_user_id String
  
  /// Granting actor’s {@link community_platform_users.id}. Null when
  /// system-initialized.
  granted_by_user_id String?
  
  /// Timestamp when administrative privileges were granted.
  granted_at DateTime
  
  /// Timestamp when administrative privileges were revoked, if applicable.
  revoked_at DateTime?
  
  /// Optional reason or notes for the grant/revocation for audit context.
  reason String?
  
  /// Record creation timestamp.
  created_at DateTime
  
  /// Record last update timestamp.
  updated_at DateTime
  
  /// Soft deletion timestamp for this role assignment.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  user community_platform_users @relation("community_platform_systemadmins_of_community_platform_user_id", fields: [community_platform_user_id], references: [id], onDelete: Cascade)
  grantedBy community_platform_users? @relation("community_platform_systemadmins_of_granted_by_user_id", fields: [granted_by_user_id], references: [id], onDelete: Cascade)
  
  @@unique([community_platform_user_id])
  @@index([granted_by_user_id, granted_at], map: "community_platform_systemadmins_granted_by_user_id_gra_3f1d8092")
  @@index([revoked_at, updated_at])
}