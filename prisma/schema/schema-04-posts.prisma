/// Primary posts authored by users within exactly one community. Each record
/// represents a text-only post with title, body, and an optional author
/// display name used for presentation (e.g., "Anonymous" when empty). Posts
/// are independently created, searched, and moderated, forming a core
/// content entity. Relationships: belongs to a {@link
/// community_platform_communities} and an author {@link
/// community_platform_users}. Voting and comment entities reference this
/// table, and historical edits are preserved in {@link
/// community_platform_post_snapshots}. No calculated fields (e.g., score,
/// counts) are stored here; those are derived via queries or materialized
/// views. Author linkage is nullable to support account closure with
/// anonymization; on user deletion, the author reference is set to null
/// rather than cascading content deletion.
///
/// @namespace Posts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_posts {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Belonged community's {@link community_platform_communities.id}.
  community_platform_community_id String
  
  /// Author account's {@link community_platform_users.id}. Nullable to enable
  /// anonymization on account deletion while retaining content.
  author_user_id String?
  
  /// Post title shown in feeds and detail. Business constraints: length 5–120
  /// characters enforced at application level.
  title String
  
  /// Post body as plain text with line breaks only (no scripts/code). Business
  /// constraints: length 10–10,000 characters enforced at application level.
  body String
  
  /// Optional author display name (0–32 chars). When empty, display a default
  /// such as "Anonymous". Stored for presentation only; does not affect
  /// authorship.
  author_display_name String?
  
  /// Creation timestamp of the post (used for Newest sort and tie-breakers).
  created_at DateTime
  
  /// Last update timestamp of the post (editing).
  updated_at DateTime
  
  /// Soft deletion timestamp. Null means the post is active.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  community community_platform_communities @relation(fields: [community_platform_community_id], references: [id], onDelete: Cascade)
  author community_platform_users? @relation(fields: [author_user_id], references: [id], onDelete: Cascade)
  
  community_platform_post_votes community_platform_post_votes[]
  community_platform_post_snapshots community_platform_post_snapshots[]
  community_platform_comments community_platform_comments[]
  mv_community_platform_global_latest_posts mv_community_platform_global_latest_posts?
  community_platform_admin_actions community_platform_admin_actions[]
  community_platform_audit_logs community_platform_audit_logs[]
  
  @@index([created_at])
  @@index([community_platform_community_id, created_at], map: "community_platform_posts_community_platform_community__4df12ea5")
  @@index([author_user_id, created_at])
}

/// Per-user vote state for posts. Captures a single state per (user, post)
/// with allowed values managed at application level. Absence of a row
/// represents the "None" state. To align with comment votes, the canonical
/// values should be lower-case "up" | "down". Supports score computation
/// (upvotes − downvotes) and the voting state machine. References {@link
/// community_platform_posts} and {@link community_platform_users}.
///
/// @namespace Posts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_post_votes {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Target post's {@link community_platform_posts.id}.
  community_platform_post_id String
  
  /// Voter account's {@link community_platform_users.id}.
  community_platform_user_id String
  
  /// Canonical voting state value. Recommended values (to match comment
  /// votes): "up" for upvote, "down" for downvote. The "None" state is
  /// represented by absence of a record.
  state String
  
  /// Creation timestamp of this vote record (initial state time).
  created_at DateTime
  
  /// Last update timestamp of this vote record (when state changes).
  updated_at DateTime
  
  /// Soft deletion timestamp. Null means the vote record is active.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  post community_platform_posts @relation(fields: [community_platform_post_id], references: [id], onDelete: Cascade)
  voter community_platform_users @relation(fields: [community_platform_user_id], references: [id], onDelete: Cascade)
  
  @@unique([community_platform_post_id, community_platform_user_id], map: "community_platform_post_votes_community_platform_post__786c2464")
  @@index([community_platform_user_id, created_at], map: "community_platform_post_votes_community_platform_user__00277ed4")
  @@index([community_platform_post_id, created_at], map: "community_platform_post_votes_community_platform_post__80871491")
}

/// Historical snapshots of post content for audit/versioning. Each record
/// captures a point-in-time state of a post’s mutable fields (title, body,
/// author_display_name) to provide an immutable history of edits. References
/// the source {@link community_platform_posts} and optionally an editor
/// {@link community_platform_users}. Append-only in practice; used for audit
/// trails and temporal analysis.
///
/// @namespace Posts
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model community_platform_post_snapshots {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Source post's {@link community_platform_posts.id}.
  community_platform_post_id String
  
  /// Optional editor account's {@link community_platform_users.id} who created
  /// this snapshot (if different from author).
  editor_user_id String?
  
  /// Snapshot of the post title at the time of change.
  title String
  
  /// Snapshot of the post body (plain text) at the time of change.
  body String
  
  /// Snapshot of the post's author display name at the time of change (if any).
  author_display_name String?
  
  /// Snapshot creation timestamp (represents the point-in-time state).
  created_at DateTime
  
  /// Timestamp when this snapshot metadata was last modified (rare; snapshots
  /// are effectively append-only).
  updated_at DateTime
  
  /// Soft deletion timestamp for this snapshot record, if ever needed for
  /// administrative purposes.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  post community_platform_posts @relation(fields: [community_platform_post_id], references: [id], onDelete: Cascade)
  editor community_platform_users? @relation(fields: [editor_user_id], references: [id], onDelete: Cascade)
  
  @@index([editor_user_id])
  
  @@index([community_platform_post_id, created_at], map: "community_platform_post_snapshots_community_platform_p_fff76d8e")
  @@index([created_at])
}